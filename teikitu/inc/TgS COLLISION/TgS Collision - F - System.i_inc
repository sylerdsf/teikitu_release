/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Collision - F - System.i_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Collision ================================================================================================================================================================== */

/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*  Collision - Request Functions                                                                                                                                                  */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

/* ---- FCN_VO(tgCO_REQ_Init_Test) ----------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_VO(tgCO_REQ_Init_Test)( VEC_OBJ_T(STg2_CO_Request,PC) psRequest, ETgPRIMITIVE_C enPM, ETgCO_PURPOSE_C enPurpose )
{
    FCN_VO(tgCO_REQ_Reset)( psRequest );
    psRequest->m_enPrimitive = enPM;
    psRequest->m_enPurpose = enPurpose;
    psRequest->m_enTest = ETgCO_TEST__BOOLEAN;
}


/* ---- FCN_VO(tgCO_REQ_Init_Test_Sweep) ----------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_VO(tgCO_REQ_Init_Test_Sweep)( VEC_OBJ_T(STg2_CO_Request,PC) psRequest, ETgPRIMITIVE_C enPM, VEC_T(1,CPC) pvDT, ETgCO_PURPOSE_C enPurpose )
{
    FCN_VO(tgCO_REQ_Reset)( psRequest );
    psRequest->m_enPrimitive = enPM;
    psRequest->m_enPurpose = enPurpose;
    psRequest->m_enTest = ETgCO_TEST__BOOLEAN_SWEEP;
    psRequest->m_fToI = TYPE_K(1);
    FCN_VO(tgGM_DT_Set)( &psRequest->m_sDT, pvDT );
}


/* ---- FCN_VO(tgCO_REQ_Init_Intersect) ------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_VO(tgCO_REQ_Init_Intersect)( VEC_OBJ_T(STg2_CO_Request,PC) psRequest, ETgPRIMITIVE_C enPM, ETgCO_PURPOSE_C enPurpose )
{
    FCN_VO(tgCO_REQ_Reset)( psRequest );
    psRequest->m_enPrimitive = enPM;
    psRequest->m_enPurpose = enPurpose;
    psRequest->m_enTest = ETgCO_TEST__INTERSECT;
}


/* ---- FCN_VO(tgCO_REQ_Init_Penetrate) ------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_VO(tgCO_REQ_Init_Penetrate)( VEC_OBJ_T(STg2_CO_Request,PC) psRequest, ETgPRIMITIVE_C enPM, ETgCO_PURPOSE_C enPurpose )
{
    FCN_VO(tgCO_REQ_Reset)( psRequest );
    psRequest->m_enPrimitive = enPM;
    psRequest->m_enPurpose = enPurpose;
    psRequest->m_enTest = ETgCO_TEST__PENETRATE;
    tgBF_Set_Flag_U32( &psRequest->m_bfFlags, ETgCO_FLAGS_ORDER_PARAMETER, true );
}


/* ---- FCN_VO(tgCO_REQ_Init_Sweep) ---------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_VO(tgCO_REQ_Init_Sweep)( VEC_OBJ_T(STg2_CO_Request,PC) psRequest, ETgPRIMITIVE_C enPM, VEC_T(1,CPC) pvDT, ETgCO_PURPOSE_C enPurpose )
{
    FCN_VO(tgCO_REQ_Reset)( psRequest );
    psRequest->m_enPrimitive = enPM;
    psRequest->m_enPurpose = enPurpose;
    psRequest->m_enTest = ETgCO_TEST__SWEEP;
    psRequest->m_fToI = TYPE_K(1);
    FCN_VO(tgGM_DT_Set)(&psRequest->m_sDT, pvDT);
}


/* ---- FCN_VO(tgCO_REQ_Init_Sweep_Penetrate) ------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_VO(tgCO_REQ_Init_Sweep_Penetrate)( VEC_OBJ_T(STg2_CO_Request,PC) psRequest, ETgPRIMITIVE_C enPM, VEC_T(1,CPC) pvDT, ETgCO_PURPOSE_C enPurpose )
{
    FCN_VO(tgCO_REQ_Reset)( psRequest );
    psRequest->m_enPrimitive = enPM;
    psRequest->m_enPurpose = enPurpose;
    psRequest->m_enTest = ETgCO_TEST__SWEEP_PENETRATE;
    psRequest->m_fToI = TYPE_K(1);
    FCN_VO(tgGM_DT_Set)(&psRequest->m_sDT, pvDT);
}


/* ---- FCN_VO(tgCO_REQ_Init_Collect) -------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_VO(tgCO_REQ_Init_Collect)( VEC_OBJ_T(STg2_CO_Request,PC) psRequest, ETgPRIMITIVE_C enPM, ETgCO_PURPOSE_C enPurpose )
{
    FCN_VO(tgCO_REQ_Reset)( psRequest );
    psRequest->m_enPrimitive = enPM;
    psRequest->m_enPurpose = enPurpose;
    psRequest->m_enTest = ETgCO_TEST__COLLECT;
}


/* ---- FCN_VO(tgCO_REQ_Set_Include_Filter) -------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_VO(tgCO_REQ_Set_Include_Filter)( VEC_OBJ_T(STg2_CO_Request,PC) psRequest, TgUINT_F32_C uiFilter )
{
    psRequest->m_uiFilter_Objects = uiFilter;
}


/* ---- FCN_VO(tgCO_REQ_RQ_Ignore_Reset) ----------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_VO(tgCO_REQ_RQ_Ignore_Reset)( VEC_OBJ_T(STg2_CO_Request,PC) psRequest )
{
    tgBF_Set_Flag_U32( &psRequest->m_bfFlags, ETgCO_FLAGS_IGNORE_ALL, false );
    psRequest->m_niConnection_Graph_Ignored = 0;
    psRequest->m_niConnection_Ignored = 0;
    psRequest->m_niNative_String = 0;
}


/* ---- FCN_VO(tgCO_REQ_Ignore_All) ---------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_VO(tgCO_REQ_Ignore_All)( VEC_OBJ_T(STg2_CO_Request,PC) psRequest, TgBOOL_C bFlag )
{
    tgBF_Set_Flag_U32( &psRequest->m_bfFlags, ETgCO_FLAGS_IGNORE_ALL, bFlag );
}


/* ---- FCN_VO(tgCO_REQ_Is_Ignored_All) ------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgBOOL FCN_VO(tgCO_REQ_Is_Ignored_All)( VEC_OBJ_T(STg2_CO_Request,CPC) psRequest )
{
    return (tgBF_Test_Flag_U32( &psRequest->m_bfFlags, ETgCO_FLAGS_IGNORE_ALL ));
}
