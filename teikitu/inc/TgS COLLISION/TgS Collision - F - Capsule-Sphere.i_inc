/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Collision - F - Capsule-Sphere.i_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Collision ================================================================================================================================================================== */

/* ---- FCN_VO(tgCO_F_CP_DistSq_SP) ---------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCN_VO(tgCO_F_CP_DistSq_SP)( VEC_OBJ_T(TgTUBE,CPC) psCP0, VEC_OBJ_T(TgSPHERE,CPC) psSP0 )
{
    VAR_T()                             fCP0_Rad = psCP0->m_fRadius;
    VAR_T()                             fRad_SP = psSP0->m_fRadius;

    VAR_T()                             fDist = FCN_VO(tgCO_F_SG_DistSq_VT)( &psCP0->m_sAX, &psSP0->m_vOrigin ) - (fCP0_Rad + fRad_SP);

    return (FCN_F(tgPM_FSEL)( fDist, fDist*fDist, -VAR_K(KTgMAX) ));
}


/* ---- FCN_VO(tgCO_F_CP_Dist_SP) ------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCN_VO(tgCO_F_CP_Dist_SP)( VEC_OBJ_T(TgTUBE,CPC) psCP0, VEC_OBJ_T(TgSPHERE,CPC) psSP0 )
{
    VAR_T()                             fCP0_Rad = psCP0->m_fRadius;
    VAR_T()                             fRad_SP = psSP0->m_fRadius;

    VAR_T()                             fDist = FCN_VO(tgCO_F_SG_DistSq_VT)( &psCP0->m_sAX, &psSP0->m_vOrigin ) - (fCP0_Rad + fRad_SP);

    return (FCN_F(tgPM_FSEL)( fDist, fDist, -VAR_K(KTgMAX) ));
}


/* ---- FCN_VO(tgCO_F_CP_ClosestSq_SP) ------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCN_VO(tgCO_F_CP_ClosestSq_SP)( VEC_T(1,PC) pvCP0, VEC_T(1,PC) pvSP0, VEC_OBJ_T(TgTUBE,CPC) psCP0, VEC_OBJ_T(TgSPHERE,CPC) psSP0 )
{
    VAR_T()                             fDist = FCN_VO(tgCO_F_CP_Closest_SP)( pvCP0, pvSP0, psCP0, psSP0 );

    return (FCN_F(tgPM_FSEL)( fDist, fDist*fDist, -VAR_K(KTgMAX) ));
}


/* ---- FCN_VO(tgCO_F_CP_Closest_SP) --------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCN_VO(tgCO_F_CP_Closest_SP)( VEC_T(1,PC) pvCP0, VEC_T(1,PC) pvSP0, VEC_OBJ_T(TgTUBE,CPC) psCP0, VEC_OBJ_T(TgSPHERE,CPC) psSP0 )
{
    VAR_T()                             fCP0_Rad = psCP0->m_fRadius;
    VAR_T()                             fRad_SP = psSP0->m_fRadius;
    VAR_T()                             fRadSum = fCP0_Rad + fRad_SP;
    VAR_T()                             fTest = FCN_VO(tgCO_F_SG_Closest_VT)( pvCP0, &psCP0->m_sAX, &psSP0->m_vOrigin );
    VAR_T()                             fDist = FCN_F(tgPM_FSEL)( fTest - fRadSum, fTest, -TYPE_K(1) );
    VEC_T(1,C)                          vNormal = FCN_V(tgMH_SUB)( &psSP0->m_vOrigin, pvCP0 );
    VEC_T(1,C)                          vK0 = FCN_V(tgMH_MUL_SV)( fCP0_Rad / fDist, &vNormal );
    VEC_T(1,C)                          vK1 = FCN_V(tgMH_MUL_SV)( fRad_SP / fDist, &vNormal );

    *pvCP0 = FCN_V(tgMH_ADD)( pvCP0, &vK0 );
    *pvSP0 = FCN_V(tgMH_ADD)( &psSP0->m_vOrigin, &vK1 );

    return (FCN_F(tgPM_FSEL)( fDist, fDist - fRadSum, -VAR_K(KTgMAX) ));
}


/* ---- FCN_VO(tgCO_F_CP_Test_SP) ------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgBOOL FCN_VO(tgCO_F_CP_Test_SP)( VEC_OBJ_T(TgTUBE,CPC) psCP0, VEC_OBJ_T(TgSPHERE,CPC) psSP0 )
{
    VAR_T()                             fCP0_Rad = psCP0->m_fRadius;
    VAR_T()                             fRad_SP = psSP0->m_fRadius;

    return (FCN_VO(tgCO_F_SG_Dist_VT)( &psCP0->m_sAX, &psSP0->m_vOrigin ) <= (fCP0_Rad + fRad_SP));
}
