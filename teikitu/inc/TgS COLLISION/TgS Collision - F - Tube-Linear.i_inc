/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Collision - F - Tube-Linear.i_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */

MSVC_WARN_DISABLE_PUSH( 6285 ) /* Analysis - (<non-zero constant> || <non-zero constant>) is always a non-zero constant. */


/* == Collision ================================================================================================================================================================== */

/* ---- VI(tgCO_FI_TB_Clip_Param_LR) --------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgRESULT VI(tgCO_FI_TB_Clip_Param_LR)( VAR_T(P) pfT0, VAR_T(P) pfT1, VEC_OBJ_T(TgTUBE,CPC) psTB0, VEC_T(1,CPC) pvS0, VEC_T(1,CPC) pvD0 )
{
    VAR_T()                             fT0, fT1;
    VEC_T(1)                            vN0, vN1;
    TgRESULT                            iResult;

    iResult = VI(tgCO_FI_TB11_Param_LR)( &fT0, &fT1, &vN0, &vN1, TYPE_K(0), psTB0, pvS0, pvD0 );
    
    if (TgFAILED( iResult ))
    {
        return (iResult);
    };

    /* Limit the variable to the cap regions */

    if (LR_CAP_0)
    {
        fT0 = FCN_F(tgPM_FSEL)( fT0, fT0, TYPE_K(0) );
    };

    if (LR_CAP_1)
    {
        fT1 = FCN_F(tgPM_FSEL)( fT1 - TYPE_K(1), fT1, TYPE_K(1) );
    };

    *pfT0 = fT0;
    *pfT1 = fT1;

    if ((LR_CAP_0 && fT0 < TYPE_K(0) && fT1 <= TYPE_K(0)) || (LR_CAP_1 && fT0 >= TYPE_K(1) && fT1 > TYPE_K(1)))
    {
        return (KTgE_NO_INTERSECT);
    }

    return (KTgS_OK);
}


/* ---- VI(tgCO_FI_TB_Clip_LR) --------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgRESULT VI(tgCO_FI_TB_Clip_LR)( VEC_OBJ_T(STg2_CO_Clip_List,PC) psCL, VEC_OBJ_T(TgTUBE,CPC) psTB0, VEC_T(1,CPC) pvS0, VEC_T(1,CPC) pvD0 )
{
    VAR_T()                             fT0, fT1;
    VEC_T(1)                            vN0, vN1;
    VEC_T(1)                            vT0, vT1;
    TgRESULT                            iResult;

    if (psCL->m_niMax < 2)
    {
        return (KTgE_FAIL);
    };

    iResult = VI(tgCO_FI_TB11_Param_LR)( &fT0, &fT1, &vN0, &vN1, TYPE_K(0), psTB0, pvS0, pvD0 );
    
    if (TgFAILED( iResult ))
    {
        psCL->m_niPoint = 0;
        return (iResult);
    };

    /* Limit the variable to the cap regions */

    if (LR_CAP_0)
    {
        fT0 = FCN_F(tgPM_FSEL)( fT0, fT0, TYPE_K(0) );
    };

    if (LR_CAP_1)
    {
        fT1 = FCN_F(tgPM_FSEL)( fT1 - TYPE_K(1), fT1, TYPE_K(1) );
    };

    vT0 = FCN_V(tgMH_MUL_SV)( fT0, pvD0 );
    psCL->m_avPoint[0] = FCN_V(tgMH_ADD)( pvS0, &vT0 );
    vT1 = FCN_V(tgMH_MUL_SV)( fT1, pvD0 );
    psCL->m_avPoint[1] = FCN_V(tgMH_ADD)( pvS0, &vT1 );

    if ((LR_CAP_0 && fT0 < TYPE_K(0) && fT1 <= TYPE_K(0)) || (LR_CAP_1 && fT0 >= TYPE_K(1) && fT1 > TYPE_K(1)))
    {
        psCL->m_niPoint = 0;
        return (KTgE_NO_INTERSECT);
    }

    psCL->m_niPoint = 2;
    return (KTgS_OK);
}


MSVC_WARN_DISABLE_POP( 6285 )
