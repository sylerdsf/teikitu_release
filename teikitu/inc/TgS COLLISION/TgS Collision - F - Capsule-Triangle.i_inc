/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Collision - F - Capsule-Triangle.i_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Collision ================================================================================================================================================================== */

/* ---- FCN_VO(tgCO_F_CP_DistSq_ST) ---------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCN_VO(tgCO_F_CP_DistSq_ST)( VEC_OBJ_T(TgTUBE,CPC) psCP0, VEC_OBJ_T(TgSTRI,CPC) psST0 )
{
    VEC_OBJ_T(TgSEGMENT,CPC)                    psCP0_SG = &psCP0->m_sAX;
    VAR_T()                             fCP0_Rad = psCP0->m_fRadius;
    VAR_T()                             fDist = FCN_VO(tgCO_F_ST_Dist_SG)( psST0, psCP0_SG ) - fCP0_Rad;

    return (FCN_F(tgPM_FSEL)( fDist, fDist*fDist, -VAR_K(KTgMAX) ));
}


/* ---- FCN_VO(tgCO_F_CP_Dist_ST) ------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCN_VO(tgCO_F_CP_Dist_ST)( VEC_OBJ_T(TgTUBE,CPC) psCP0, VEC_OBJ_T(TgSTRI,CPC) psST0 )
{
    VEC_OBJ_T(TgSEGMENT,CPC)                    psCP0_SG = &psCP0->m_sAX;
    VAR_T()                             fCP0_Rad = psCP0->m_fRadius;
    VAR_T()                             fDist = FCN_VO(tgCO_F_ST_Dist_SG)( psST0, psCP0_SG ) - fCP0_Rad;

    return (FCN_F(tgPM_FSEL)( fDist, fDist, -VAR_K(KTgMAX) ));
}


/* ---- FCN_VO(tgCO_F_CP_ClosestSq_ST) ------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCN_VO(tgCO_F_CP_ClosestSq_ST)( VEC_T(1,PC) pvCP0, VEC_T(1,PC) pvET0, VEC_OBJ_T(TgTUBE,CPC) psCP0, VEC_OBJ_T(TgSTRI,CPC) psST0 )
{
    VAR_T()                             fDist = FCN_VO(tgCO_F_CP_Closest_ST)( pvCP0, pvET0, psCP0, psST0 );

    return (FCN_F(tgPM_FSEL)( fDist, fDist*fDist, -VAR_K(KTgMAX) ));
}


/* ---- FCN_VO(tgCO_F_CP_Closest_ST) --------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCN_VO(tgCO_F_CP_Closest_ST)( VEC_T(1,PC) pvCP0, VEC_T(1,PC) pvET0, VEC_OBJ_T(TgTUBE,CPC) psCP0, VEC_OBJ_T(TgSTRI,CPC) psST0 )
{
    VEC_T(1)                            vCP0;

    VEC_OBJ_T(TgSEGMENT,CPC)                    psCP0_SG = &psCP0->m_sAX;
    VAR_T()                             fCP0_Rad = psCP0->m_fRadius;
    VAR_T()                             fTest = FCN_VO(tgCO_F_ST_Closest_SG)( pvET0, &vCP0, psST0, psCP0_SG );
    VAR_T()                             fDist = FCN_F(tgPM_FSEL)( fTest - fCP0_Rad, fTest, -TYPE_K(1) );
    VEC_T(1,C)                          vK0 = FCN_V(tgMH_SUB)( pvET0, &vCP0 );
    VEC_T(1,C)                          vK1 = FCN_V(tgMH_MUL_SV)( fCP0_Rad / fDist, &vK0 );

    *pvCP0 = FCN_V(tgMH_ADD)( &vCP0, &vK1 );

    return (FCN_F(tgPM_FSEL)( fDist, fDist - fCP0_Rad, -VAR_K(KTgMAX) ));
}


/* ---- FCN_VO(tgCO_F_CP_ParamSq_ST) --------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCN_VO(tgCO_F_CP_ParamSq_ST)( VEC_T(1,PC) pvCP0, VAR_T(P) pfET0, VAR_T(P) pfET1, VEC_OBJ_T(TgTUBE,CPC) psCP0, VEC_OBJ_T(TgSTRI,CPC) psST0 )
{
    VAR_T()                             fDist = FCN_VO(tgCO_F_CP_Param_ST)( pvCP0, pfET0, pfET1, psCP0, psST0 );

    return (FCN_F(tgPM_FSEL)( fDist, fDist*fDist, -VAR_K(KTgMAX) ));
}


/* ---- FCN_VO(tgCO_F_CP_Param_ST) ----------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCN_VO(tgCO_F_CP_Param_ST)( VEC_T(1,PC) pvCP0, VAR_T(P) pfET0, VAR_T(P) pfET1, VEC_OBJ_T(TgTUBE,CPC) psCP0, VEC_OBJ_T(TgSTRI,CPC) psST0 )
{
    VAR_T()                             fCP0;

    VEC_OBJ_T(TgSEGMENT,CPC)                    psCP0_SG = &psCP0->m_sAX;
    VAR_T()                             fTest = FCN_VO(tgCO_F_ST_Param_SG)( pfET0, pfET1, &fCP0, psST0, psCP0_SG );
    VAR_T()                             fCP0_Rad = psCP0->m_fRadius;
    VAR_T()                             fDist = FCN_F(tgPM_FSEL)( fTest - fCP0_Rad, fTest, -TYPE_K(1) );
    VEC_T(1,C)                          vK0 = FCN_V(tgMH_MUL_SV)( *pfET0, psST0->m_sCT.m_sET.m_avEdge + 0 );
    VEC_T(1,C)                          vK1 = FCN_V(tgMH_MUL_SV)( *pfET1, psST0->m_sCT.m_sET.m_avEdge + 2 );
    VEC_T(1,C)                          vK7 = FCN_V(tgMH_ADD)( psST0->m_sCT.m_sET.m_sPT.m_avPoint, &vK0 );
    VEC_T(1,C)                          vK5 = FCN_V(tgMH_SUB)( &vK7, &vK1 );
    VEC_T(1,C)                          vK2 = FCN_V(tgMH_MUL_SV)( fCP0, &psCP0->m_sAX.m_vDirN );
    VEC_T(1,C)                          vK3 = FCN_V(tgMH_ADD)( &psCP0->m_sAX.m_vOrigin, &vK2 );
    VEC_T(1,C)                          vK6 = FCN_V(tgMH_SUB)( &vK5, &vK3 );
    VEC_T(1,C)                          vK4 = FCN_V(tgMH_MUL_SV)( fCP0_Rad / fDist, &vK6 );

    *pvCP0 = FCN_V(tgMH_ADD)( &vK3, &vK4 );

    return (FCN_F(tgPM_FSEL)( fDist, fDist - fCP0_Rad, -VAR_K(KTgMAX) ));
}


/* ---- FCN_VO(tgCO_F_CP_Test_ST) ------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgBOOL FCN_VO(tgCO_F_CP_Test_ST)( VEC_OBJ_T(TgTUBE,CPC) psCP0, VEC_OBJ_T(TgSTRI,CPC) psST0 )
{
    return (FCN_VO(tgCO_F_ST_Dist_SG)( psST0, &psCP0->m_sAX ) <= psCP0->m_fRadius);
}
