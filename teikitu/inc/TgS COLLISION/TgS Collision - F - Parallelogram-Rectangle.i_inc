/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Collision - F - Parallelogram-Rectangle.i_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Collision ================================================================================================================================================================== */

/* ---- FCN_VO(tgCO_F_PE_DistSq_RT) ---------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCN_VO(tgCO_F_PE_DistSq_RT)( VEC_OBJ_T(TgPARALLELOGRAM,CPC) psPE0, VEC_OBJ_T(TgRECTANGLE,CPC) psRT0 )
{
    VAR_T()                             fPE00, fPE01, fRT10, fRT11;

    return (FCN_VO(tgCO_F_PE_ParamSq_RT)( &fPE00, &fPE01, &fRT10, &fRT11, psPE0, psRT0 ));
}


/* ---- FCN_VO(tgCO_F_PE_Dist_RT) ------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCN_VO(tgCO_F_PE_Dist_RT)( VEC_OBJ_T(TgPARALLELOGRAM,CPC) psPE0, VEC_OBJ_T(TgRECTANGLE,CPC) psRT0 )
{
    VAR_T()                             fDistSq = FCN_VO(tgCO_F_PE_DistSq_RT)( psPE0, psRT0 );

    return (FCN_F(tgPM_FSEL)( fDistSq, FCN_F(tgPM_SQRT)( fDistSq ), -VAR_K(KTgMAX) ));
}


/* ---- FCN_VO(tgCO_F_PE_ClosestSq_RT) ------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCN_VO(tgCO_F_PE_ClosestSq_RT)( VEC_T(1,PC) pvPE0, VEC_T(1,PC) pvRT0, VEC_OBJ_T(TgPARALLELOGRAM,CPC) psPE0, VEC_OBJ_T(TgRECTANGLE,CPC) psRT0 )
{
    VAR_T()                             fPE00, fPE01, fRT10, fRT11;
    VAR_T()                             fDistSq = FCN_VO(tgCO_F_PE_ParamSq_RT)( &fPE00, &fPE01, &fRT10, &fRT11, psPE0, psRT0 );

    VEC_T(1,C)                          vK0 = FCN_V(tgMH_MUL_SV)( fPE00, psPE0->m_avEdge + 0 );
    VEC_T(1,C)                          vK1 = FCN_V(tgMH_MUL_SV)( fPE01, psPE0->m_avEdge + 1 );
    VEC_T(1,C)                          vK2 = FCN_V(tgMH_MUL_SV)( fRT10, psRT0->m_avEdge + 0 );
    VEC_T(1,C)                          vK3 = FCN_V(tgMH_MUL_SV)( fRT11, psRT0->m_avEdge + 1 );
    VEC_T(1,C)                          vK4 = FCN_V(tgMH_ADD)( &psPE0->m_vOrigin, &vK0 );
    VEC_T(1,C)                          vK5 = FCN_V(tgMH_ADD)( &psRT0->m_vOrigin, &vK2 );

    *pvPE0 = FCN_V(tgMH_ADD)( &vK4, &vK1 );
    *pvRT0 = FCN_V(tgMH_ADD)( &vK5, &vK3 );

    return (FCN_F(tgPM_FSEL)( fDistSq, FCN_F(tgPM_SQRT)( fDistSq ), -VAR_K(KTgMAX) ));
}


/* ---- FCN_VO(tgCO_F_PE_Closest_RT) --------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCN_VO(tgCO_F_PE_Closest_RT)( VEC_T(1,PC) pvPE0, VEC_T(1,PC) pvRT0, VEC_OBJ_T(TgPARALLELOGRAM,CPC) psPE0, VEC_OBJ_T(TgRECTANGLE,CPC) psRT0 )
{
    VAR_T()                             fDistSq = FCN_VO(tgCO_F_PE_ClosestSq_RT)( pvPE0, pvRT0, psPE0, psRT0 );

    return (FCN_F(tgPM_FSEL)( fDistSq, FCN_F(tgPM_SQRT)( fDistSq ), -VAR_K(KTgMAX) ));
}


/* ---- FCN_VO(tgCO_F_PE_Param_RT) ----------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCN_VO(tgCO_F_PE_Param_RT)( VAR_T(P) pfPE0, VAR_T(P) pfPE1, VAR_T(P) pfRT0, VAR_T(P) pfRT1, VEC_OBJ_T(TgPARALLELOGRAM,CPC) psPE0, VEC_OBJ_T(TgRECTANGLE,CPC) psRT0 )
{
    VAR_T()                             fDistSq = FCN_VO(tgCO_F_PE_ParamSq_RT)( pfPE0, pfPE1, pfRT0, pfRT1, psPE0, psRT0 );

    return (FCN_F(tgPM_FSEL)( fDistSq, FCN_F(tgPM_SQRT)( fDistSq ), -VAR_K(KTgMAX) ));
}
