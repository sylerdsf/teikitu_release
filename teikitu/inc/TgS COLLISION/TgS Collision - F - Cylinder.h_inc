/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Collision - F - Cylinder.h_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Collision ================================================================================================================================================================== */

/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*  Public Functions - Scalar Functions                                                                                                                                            */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

/* Cylinder - Line                                                                                                                                                                 */
TgINLINE TgRESULT                           FCN_VO(tgCO_F_CY_Param_LN)( VAR_T(P) , VAR_T(P) , VEC_T(1,PC), VEC_T(1,PC), VEC_OBJ_T(TgTUBE,CPC), VEC_OBJ_T(TgLINE,CPC) );
TgINLINE TgRESULT                           FCN_VO(tgCO_F_CY_Intersect_LN)( VEC_OBJ_T(STg2_CO_Packet,PC), VEC_OBJ_T(TgTUBE,CPC), VEC_OBJ_T(TgLINE,CPC) );
TgINLINE TgRESULT                           FCN_VO(tgCO_F_CY_Clip_Param_LN)( VAR_T(P) , VAR_T(P) , VEC_OBJ_T(TgTUBE,CPC), VEC_OBJ_T(TgLINE,CPC) );
TgINLINE TgRESULT                           FCN_VO(tgCO_F_CY_Clip_LN)( VEC_OBJ_T(STg2_CO_Clip_List,PC), VEC_OBJ_T(TgTUBE,CPC), VEC_OBJ_T(TgLINE,CPC) );

TgEXTN TgRESULT                             FCN_VO(tgCO_FI_CY_Intersect_LR00)( VEC_OBJ_T(STg2_CO_Packet,PC), VEC_OBJ_T(TgTUBE,CPC), VEC_T(1,CPC), VEC_T(1,CPC) );
TgEXTN TgRESULT                             FCN_VO(tgCO_FI_CY_Internal_LR00)( VAR_T(P) , VAR_T(P) , VEC_T(1,PC), VEC_T(1,PC), VEC_OBJ_T(TgTUBE,CPC), VEC_T(1,CPC), VEC_T(1,CPC) );

/* Cylinder - Ray                                                                                                                                                                  */
TgINLINE TgRESULT                           FCN_VO(tgCO_F_CY_Param_RY)( VAR_T(P) , VAR_T(P) , VEC_T(1,PC), VEC_T(1,PC), VEC_OBJ_T(TgTUBE,CPC), VEC_OBJ_T(TgRAY,CPC) );
TgINLINE TgRESULT                           FCN_VO(tgCO_F_CY_Intersect_RY)( VEC_OBJ_T(STg2_CO_Packet,PC), VEC_OBJ_T(TgTUBE,CPC), VEC_OBJ_T(TgRAY,CPC) );
TgINLINE TgRESULT                           FCN_VO(tgCO_F_CY_Clip_Param_RY)( VAR_T(P) , VAR_T(P) , VEC_OBJ_T(TgTUBE,CPC), VEC_OBJ_T(TgRAY,CPC) );
TgINLINE TgRESULT                           FCN_VO(tgCO_F_CY_Clip_RY)( VEC_OBJ_T(STg2_CO_Clip_List,PC), VEC_OBJ_T(TgTUBE,CPC), VEC_OBJ_T(TgRAY,CPC) );

TgEXTN TgRESULT                             FCN_VO(tgCO_FI_CY_Intersect_LR10)( VEC_OBJ_T(STg2_CO_Packet,PC), VEC_OBJ_T(TgTUBE,CPC), VEC_T(1,CPC), VEC_T(1,CPC) );
TgEXTN TgRESULT                             FCN_VO(tgCO_FI_CY_Internal_LR10)( VAR_T(P) , VAR_T(P) , VEC_T(1,PC), VEC_T(1,PC), VEC_OBJ_T(TgTUBE,CPC), VEC_T(1,CPC), VEC_T(1,CPC) );

/* Cylinder - Segment                                                                                                                                                              */
TgINLINE TgRESULT                           FCN_VO(tgCO_F_CY_Param_SG)( VAR_T(P) , VAR_T(P) , VEC_T(1,PC), VEC_T(1,PC), VEC_OBJ_T(TgTUBE,CPC), VEC_OBJ_T(TgSEGMENT,CPC) );
TgINLINE TgRESULT                           FCN_VO(tgCO_F_CY_Intersect_SG)( VEC_OBJ_T(STg2_CO_Packet,PC), VEC_OBJ_T(TgTUBE,CPC), VEC_OBJ_T(TgSEGMENT,CPC) );
TgINLINE TgRESULT                           FCN_VO(tgCO_F_CY_Clip_Param_SG)( VAR_T(P) , VAR_T(P) , VEC_OBJ_T(TgTUBE,CPC), VEC_OBJ_T(TgSEGMENT,CPC) );
TgINLINE TgRESULT                           FCN_VO(tgCO_F_CY_Clip_SG)( VEC_OBJ_T(STg2_CO_Clip_List,PC), VEC_OBJ_T(TgTUBE,CPC), VEC_OBJ_T(TgSEGMENT,CPC) );

TgEXTN TgRESULT                             FCN_VO(tgCO_FI_CY_Intersect_LR11)( VEC_OBJ_T(STg2_CO_Packet,PC), VEC_OBJ_T(TgTUBE,CPC), VEC_T(1,CPC), VEC_T(1,CPC) );
TgEXTN TgRESULT                             FCN_VO(tgCO_FI_CY_Internal_LR11)( VAR_T(P) , VAR_T(P) , VEC_T(1,PC), VEC_T(1,PC), VEC_OBJ_T(TgTUBE,CPC), VEC_T(1,CPC), VEC_T(1,CPC) );

/* Cylinder - Plane                                                                                                                                                                */
TgINLINE VAR_T()                            FCN_VO(tgCO_F_CY_DistSq_PN)( VEC_OBJ_T(TgTUBE,CPC), VEC_OBJ_T(TgPLANE,CPC) );
TgEXTN VAR_T()                              FCN_VO(tgCO_F_CY_Dist_PN)( VEC_OBJ_T(TgTUBE,CPC), VEC_OBJ_T(TgPLANE,CPC) );
TgINLINE VAR_T()                            FCN_VO(tgCO_F_CY_ClosestSq_PN)( VEC_T(1,PC), VEC_T(1,PC), VEC_OBJ_T(TgTUBE,CPC), VEC_OBJ_T(TgPLANE,CPC) );
TgEXTN VAR_T()                              FCN_VO(tgCO_F_CY_Closest_PN)( VEC_T(1,PC), VEC_T(1,PC), VEC_OBJ_T(TgTUBE,CPC), VEC_OBJ_T(TgPLANE,CPC) );
TgEXTN TgRESULT                             FCN_VO(tgCO_F_PN_Penetrate_CY)( VEC_OBJ_T(STg2_CO_Packet,PC), VEC_OBJ_T(TgPLANE,CPC), VEC_OBJ_T(TgTUBE,CPC) );

/* Cylinder - Box                                                                                                                                                                  */
TgEXTN TgRESULT                             FCN_VO(tgCO_F_BX_Penetrate_CY)( VEC_OBJ_T(STg2_CO_Packet,PC), VEC_OBJ_T(TgBOX,CPC), VEC_OBJ_T(TgTUBE,CPC) );

/* Cylinder - Capsule                                                                                                                                                              */
TgEXTN TgRESULT                             FCN_VO(tgCO_F_CP_Penetrate_CY)( VEC_OBJ_T(STg2_CO_Packet,PC), VEC_OBJ_T(TgTUBE,CPC), VEC_OBJ_T(TgTUBE,CPC) );

/* Cylinder - Cylinder                                                                                                                                                             */
TgEXTN TgRESULT                             FCN_VO(tgCO_F_CY_Penetrate_CY)( VEC_OBJ_T(STg2_CO_Packet,PC), VEC_OBJ_T(TgTUBE,CPC), VEC_OBJ_T(TgTUBE,CPC) );

/* Cylinder - Sphere                                                                                                                                                               */
TgEXTN TgRESULT                             FCN_VO(tgCO_F_SP_Penetrate_CY)( VEC_OBJ_T(STg2_CO_Packet,PC), VEC_OBJ_T(TgSPHERE,CPC), VEC_OBJ_T(TgTUBE,CPC) );

/* Cylinder - Triangle                                                                                                                                                             */
TgEXTN TgRESULT                             FCN_VO(tgCO_F_ST_Penetrate_CY)( VEC_OBJ_T(STg2_CO_Packet,PC), VEC_OBJ_T(TgSTRI,CPC), VEC_OBJ_T(TgTUBE,CPC) );

/* Cylinder - Utility                                                                                                                                                              */
TgINLINE TgRESULT                           FCN_VO(tgCO_F_CY_Clip_Points)( VAR_T(P) , VAR_T(P) , VEC_OBJ_T(TgTUBE,CPC), VEC_T(1,CPC), VEC_T(1,CPC) );
TgEXTN TgRESULT                             FCN_VO(tgCO_F_CY_Clip)( VEC_OBJ_T(STg2_CO_Clip_List,PC), VEC_OBJ_T(TgTUBE,CPC) );
