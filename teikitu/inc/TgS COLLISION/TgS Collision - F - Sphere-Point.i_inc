/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Collision - F - Sphere-Point.i_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Collision ================================================================================================================================================================== */

/* ---- FCN_VO(tgCO_F_SP_DistSq_VT) ---------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCN_VO(tgCO_F_SP_DistSq_VT)( VEC_OBJ_T(TgSPHERE,CPC) psSP0, VEC_T(1,CPC) pvS0 )
{
    VEC_T(1,C)                          vDS = FCN_V(tgMH_SUB)( pvS0, &psSP0->m_vOrigin );
    VAR_T()                             fDS_DS = FCN_V(tgMH_LSQ)( &vDS );
    VAR_T()                             fDist;

    fDist = FCN_F(tgPM_FSEL)( fDS_DS - psSP0->m_fRadiusSq, FCN_F(tgPM_SQRT)( fDS_DS ) - psSP0->m_fRadius, -TYPE_K(1) );

    return (FCN_F(tgPM_FSEL)( fDist, fDist*fDist, -VAR_K(KTgMAX) ));
}


/* ---- FCN_VO(tgCO_F_SP_Dist_VT) ------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCN_VO(tgCO_F_SP_Dist_VT)( VEC_OBJ_T(TgSPHERE,CPC) psSP0, VEC_T(1,CPC) pvS0 )
{
    VEC_T(1,C)                          vDS = FCN_V(tgMH_SUB)( pvS0, &psSP0->m_vOrigin );
    VAR_T()                             fDS_DS = FCN_V(tgMH_LSQ)( &vDS );

    return (FCN_F(tgPM_FSEL)( fDS_DS - psSP0->m_fRadiusSq, FCN_F(tgPM_SQRT)( fDS_DS ) - psSP0->m_fRadius, -VAR_K(KTgMAX) ));
}


/* ---- FCN_VO(tgCO_F_SP_ClosestSq_VT) ------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCN_VO(tgCO_F_SP_ClosestSq_VT)( VEC_T(1,PC) pvSP0, VEC_OBJ_T(TgSPHERE,CPC) psSP0, VEC_T(1,CPC) pvS0 )
{
    VAR_T()                             fDS;
    VEC_T(1,C)                          vT0 = FCN_V(tgMH_SUB)( pvS0, &psSP0->m_vOrigin );
    VEC_T(1,C)                          vDS = FCN_V(tgMH_NORM_LEN)( &fDS, &vT0 );
    VEC_T(1,C)                          vT1 = FCN_V(tgMH_MUL_VS)( &vDS, psSP0->m_fRadius );

    *pvSP0 = FCN_V(tgMH_ADD)( &psSP0->m_vOrigin, &vT1 );
    return (FCN_F(tgPM_FSEL)( fDS, fDS*fDS, -VAR_K(KTgMAX) ));
}


/* ---- FCN_VO(tgCO_F_SP_Closest_VT) --------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCN_VO(tgCO_F_SP_Closest_VT)( VEC_T(1,PC) pvSP0, VEC_OBJ_T(TgSPHERE,CPC) psSP0, VEC_T(1,CPC) pvS0 )
{
    VAR_T()                             fDS;
    VEC_T(1,C)                          vT0 = FCN_V(tgMH_SUB)( pvS0, &psSP0->m_vOrigin );
    VEC_T(1,C)                          vDS = FCN_V(tgMH_NORM_LEN)( &fDS, &vT0 );
    VEC_T(1,C)                          vT1 = FCN_V(tgMH_MUL_VS)( &vDS, psSP0->m_fRadius );

    fDS -= psSP0->m_fRadius;

    *pvSP0 = FCN_V(tgMH_ADD)( &psSP0->m_vOrigin, &vT1 );
    return (FCN_F(tgPM_FSEL)( fDS, fDS, -VAR_K(KTgMAX) ));
}


/* ---- FCN_VO(tgCO_F_SP_Test_VT) ------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgBOOL FCN_VO(tgCO_F_SP_Test_VT)( VEC_OBJ_T(TgSPHERE,CPC) psSP0, VEC_T(1,CPC) pvS0 )
{
    VEC_T(1,C)                          vT0 = FCN_V(tgMH_SUB)( pvS0, &psSP0->m_vOrigin );

    return (FCN_V(tgMH_LSQ)( &vT0 ) == psSP0->m_fRadiusSq);
}
