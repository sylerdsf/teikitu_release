/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common - Geometry 3D - Box.h_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Common ===================================================================================================================================================================== */

/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*  Public Functions                                                                                                                                                               */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

                                                /** @brief Calculate a point along the basis vectors of the box
                                                    @param[in] ARG0 Pointer to the geometry object (box)
                                                    @param[in] ARG1 Scalar Value for the first basis vector
                                                    @param[in] ARG2 Scalar Value for the second basis vector
                                                    @param[in] ARG3 Scalar Value for the third basis vector
                                                    @return The resulting point from the arguments and the box basis vectors */
TgINLINE VEC_T(1)                               FCN_VO(tgGM_BX_Calc_Point)( VEC_OBJ_T(TgBOX,CPCU) ARG0, VAR_T(C) ARG1, VAR_T(C) ARG2, VAR_T(C) ARG3 );

                                                /** @brief Return one of the box's corner position
                                                    @param[in] ARG0 Pointer to a geometry object (box)
                                                    @param[in] ARG1 Integer value [0-7] to select a box corner
                                                    @return The selected corner position of the box */
TgINLINE VEC_T(1)                               FCN_VO(tgGM_BX_Calc_Point_Index)( VEC_OBJ_T(TgBOX,CPCU), TgRSIZE_C );

                                                /** @brief Invalidate the geometry object (box)
                                                    @param[out] OUT Pointer to the geometry object (box) */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_Reset)( VEC_OBJ_T(TgBOX,PCU) OUT );

                                                /** @brief Validate the integrity of the geometry object (box)
                                                    @param[in] ARG Pointer to a geometry object (box)
                                                    @return True if the geometry object (box) is valid and false otherwise */
TgEXTN TgBOOL                                   FCN_VO(tgGM_BX_Is_Valid)( VEC_OBJ_T(TgBOX,CPCU) ARG );

                                                /** @brief Determine the point on the geometry object (box) that is furthest along the direction of ARG1
                                                    @param[in] ARG0 Pointer to a geometry object (box)
                                                    @param[in] ARG1 Pointer to a direction vector
                                                    @return The point on the geometry object (box) that is furthest along the direction of ARG1 */
TgINLINE VEC_T(1)                               FCN_VO(tgGM_BX_Support_Point)( VEC_OBJ_T(TgBOX,CPCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                                /** @brief Calculate the volume of the geometry object (box)
                                                    @param[in] ARG Pointer to a geometry object (box)
                                                    @return The volume of the geometry object (box) */
TgINLINE VAR_T()                                FCN_VO(tgGM_BX_Volume)( VEC_OBJ_T(TgBOX,CPCU) ARG );

                                                /** @brief Calculate the surface area of the geometry object (box)
                                                    @param[in] ARG Pointer to a geometry object (box)
                                                    @return The surface area of the geometry object (box) */
TgINLINE VAR_T()                                FCN_VO(tgGM_BX_Area)( VEC_OBJ_T(TgBOX,CPCU) ARG );

                                                /** @brief Calculate the minimum necessary Axis-Aligned Bounding Box to contain the geometry object (box)
                                                    @param[out] ARG0 Pointer to an axis-aligned bounding box object
                                                    @param[in] ARG1 Pointer to a geometry object (box) */
TgEXTN TgVOID                                   FCN_VO(tgGM_BX_BA)( VEC_OBJ_T(TgBOXAA,PCU) ARG0, VEC_OBJ_T(TgBOX,CPCU) ARG1 );

                                                /** @brief Calculate the minimum necessary Axis-Aligned Bounding Box to contain the swept geometry object (box)
                                                    @param[out] ARG0 Pointer to an axis-aligned bounding box object
                                                    @param[in] ARG1 Pointer to a geometry object (box)
                                                    @param[in] ARG2 Pointer to a vector describing the swept direction and magnitude */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_Sweep_BA)( VEC_OBJ_T(TgBOXAA,PCU) ARG0, VEC_OBJ_T(TgBOX,CPCU) ARG1, VEC_T(1,CPCU) ARG2 );

                                                /** @brief Project the geometry object (box) along the direction vector
                                                    @param[out] OUT0 Pointer to a scalar value to hold the lower bound of the projection
                                                    @param[out] OUT1 Pointer to a scalar value to hold the upper bound of the projection
                                                    @param[in] ARG2 Pointer to a geometry object (box)
                                                    @param[in] ARG3 Pointer to a direction vector */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_Project)( VAR_T(PCU) ARG0, VAR_T(PCU) ARG1, VEC_OBJ_T(TgBOX,CPCU) ARG2, VEC_T(1,CPCU) ARG3 );

                                                /** @brief Test to see if a point is either on or in the geometry object (box)
                                                    @param[in] ARG0 Pointer to a geometry object (box)
                                                    @param[in] ARG1 Pointer to a position vector
                                                    @return True if the position is either on or in the geometry object (box) and false otherwise */
TgINLINE TgBOOL                                 FCN_VO(tgGM_BX_Is_Contained)( VEC_OBJ_T(TgBOX,CPCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                                /** @brief Transform the geometry object (box) at ARG0 by the matrix at ARG1
                                                    @param[in,out] ARG0 Pointer to a geometry object (box)
                                                    @param[in] ARG1 Column-Major matrix (3x4) containing rotation and translation */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_TX)( VEC_OBJ_T(TgBOX,PCU) ARG0, VEC_T(3,CPCU) ARG1 );

                                                /** @brief Transform the geometry object (box) at ARG1 by the matrix at ARG2 and store it in ARG0
                                                    @param[out] ARG0 Pointer to a geometry object (box)
                                                    @param[in] ARG1 Pointer to a geometry object (box)
                                                    @param[in] ARG2 Column-Major matrix (3x4) containing rotation and translation */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_Copy_TX)( VEC_OBJ_T(TgBOX,PCU) ARG0, VEC_OBJ_T(TgBOX,CPCU) ARG1, VEC_T(3,CPCU) ARG2 );


                                                /** @brief Initialize a new geometry object (box) with the function arguments
                                                    @param[out] ARG0 Pointer to a geometry object (box)
                                                    @param[in] ARG1 Column-Major matrix (3x4) containing rotation (basis vectors) and origin
                                                    @param[in] ARG2 Scalar Value for the first basis vector
                                                    @param[in] ARG3 Scalar Value for the second basis vector
                                                    @param[in] ARG4 Scalar Value for the third basis vector */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_Init_3D)( VEC_OBJ_T(TgBOX,PCU) ARG0, VEC_T(3,CPCU) ARG1, VAR_T(C) ARG2, VAR_T(C) ARG3, VAR_T(C) ARG4 );

                                                /** @brief Copy the one geometry object (box) to another of the same type
                                                    @param[out] ARG0 Pointer to a geometry object (box)
                                                    @param[in] ARG1 Pointer to a geometry object (box) */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_Copy)( VEC_OBJ_T(TgBOX,PCU) ARG0, VEC_OBJ_T(TgBOX,CPCU) ARG1 );


                                                /** @brief Set the origin
                                                    @param[in,out] ARG0 Pointer to a geometry object (box) */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_Set_Origin)( VEC_OBJ_T(TgBOX,PCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                                /** @brief Set all three of the basis vectors
                                                    @note Orthogonality of the basis vectors is the responsibility of the caller
                                                    @param[in,out] ARG0 Pointer to a geometry object (box)
                                                    @param[in] ARG1 Column-Major matrix (3x4) */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_Set_Axes_Unit_List)( VEC_OBJ_T(TgBOX,PCU) ARG0, VEC_T(3,CPCU) ARG1 );

                                                /** @brief Set the specified basis vector
                                                    @note Orthogonality of the basis vectors is the responsibility of the caller
                                                    @param[in,out] ARG0 Pointer to a geometry object (box)
                                                    @param[in] ARG1 Basis vector index [0-2]
                                                    @param[in] ARG2 Pointer to a basis vector */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_Set_Axis_Unit_Index)( VEC_OBJ_T(TgBOX,PCU), TgRSIZE_C, VEC_T(1,CPCU) ARG );

                                                /** @brief Set the first basis vector
                                                    @note Orthogonality of the basis vectors is the responsibility of the caller
                                                    @param[in,out] ARG0 Pointer to a geometry object (box)
                                                    @param[in] ARG1 Pointer to a basis vector */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_Set_Axis_Unit_0)( VEC_OBJ_T(TgBOX,PCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                                /** @brief Set the second basis vector
                                                    @note Orthogonality of the basis vectors is the responsibility of the caller
                                                    @param[in,out] ARG0 Pointer to a geometry object (box)
                                                    @param[in] ARG1 Pointer to a basis vector */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_Set_Axis_Unit_1)( VEC_OBJ_T(TgBOX,PCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                                /** @brief Set the third basis vector
                                                    @note Orthogonality of the basis vectors is the responsibility of the caller
                                                    @param[in,out] ARG0 Pointer to a geometry object (box)
                                                    @param[in] ARG1 Pointer to a basis vector */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_Set_Axis_Unit_2)( VEC_OBJ_T(TgBOX,PCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                                /** @brief Set all three of the basis vectors and the origin
                                                    @note Orthogonality of the basis vectors is the responsibility of the caller
                                                    @param[in,out] ARG0 Pointer to a geometry object (box)
                                                    @param[in] ARG1 Column-Major matrix (3x4) containing rotation (basis vectors) and origin */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_Set_3D)( VEC_OBJ_T(TgBOX,PCU) ARG0, VEC_T(3,CPCU) ARG1 );

                                                /** @brief Set the extents along all three of the basis vectors
                                                    @param[in,out] ARG0 Pointer to a geometry object (box)
                                                    @param[in] ARG1 Pointer to a vector */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_Set_Extent_List)( VEC_OBJ_T(TgBOX,PCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                                /** @brief Set the extent along the specific basis vector
                                                    @param[in,out] ARG0 Pointer to a geometry object (box)
                                                    @param[in] ARG1 Basis vector index [0-2]
                                                    @param[in] ARG2 Scalar value */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_Set_Extent_Index)( VEC_OBJ_T(TgBOX,PCU), TgRSIZE_C ARG0, VAR_T(C) ARG1 );

                                                /** @brief Set the extent along the first basis vector
                                                    @param[in,out] ARG0 Pointer to a geometry object (box)
                                                    @param[in] ARG1 Scalar value */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_Set_Extent_0)( VEC_OBJ_T(TgBOX,PCU) ARG0, VAR_T(C) ARG1 );

                                                /** @brief Set the extent along the second basis vector
                                                    @param[in,out] ARG0 Pointer to a geometry object (box)
                                                    @param[in] ARG1 Scalar value */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_Set_Extent_1)( VEC_OBJ_T(TgBOX,PCU) ARG0, VAR_T(C) ARG1 );

                                                /** @brief Set the extent along the third basis vector
                                                    @param[in,out] ARG0 Pointer to a geometry object (box)
                                                    @param[in] ARG1 Scalar value */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_Set_Extent_2)( VEC_OBJ_T(TgBOX,PCU) ARG0, VAR_T(C) ARG1 );


                                                /** @brief Return the origin
                                                    @param[in] ARG Pointer to a geometry object (box)
                                                    @return The origin */
TgINLINE VEC_T(1,CP)                            FCN_VO(tgGM_BX_Query_Origin)( VEC_OBJ_T(TgBOX,CPCU) ARG );

                                                /** @brief Return the specified basis vector
                                                    @param[in] ARG0 Pointer to a geometry object (box)
                                                    @param[in] ARG1 Basis vector index [0-2]
                                                    @return The specified basis vector */
TgINLINE VEC_T(1,CP)                            FCN_VO(tgGM_BX_Query_Axis_Unit)( VEC_OBJ_T(TgBOX,CPCU) ARG0, TgRSIZE_C ARG1 );

                                                /** @brief Return the first basis vector
                                                    @param[in] ARG Pointer to a geometry object (box)
                                                    @return The first basis vector */
TgINLINE VEC_T(1,CP)                            FCN_VO(tgGM_BX_Query_Axis_Unit_0)( VEC_OBJ_T(TgBOX,CPCU) ARG );

                                                /** @brief Return the second basis vector
                                                    @param[in] ARG Pointer to a geometry object (box)
                                                    @return The second basis vector */
TgINLINE VEC_T(1,CP)                            FCN_VO(tgGM_BX_Query_Axis_Unit_1)( VEC_OBJ_T(TgBOX,CPCU) ARG );

                                                /** @brief Return the third basis vector
                                                    @param[in] ARG Pointer to a geometry object (box)
                                                    @return The third basis vector */
TgINLINE VEC_T(1,CP)                            FCN_VO(tgGM_BX_Query_Axis_Unit_2)( VEC_OBJ_T(TgBOX,CPCU) ARG );

                                                /** @brief Return a vector of all three extent values
                                                    @param[in] ARG0 Pointer to a geometry object (box)
                                                    @return A vector of all three extent values */
TgINLINE VEC_T(1,CP)                            FCN_VO(tgGM_BX_Query_Extent_List)( VEC_OBJ_T(TgBOX,CPCU) ARG );

                                                /** @brief Return the extent along the specified basis vector
                                                    @param[in,out] ARG0 Pointer to a geometry object (box)
                                                    @param[in] ARG1 Basis vector index [0-2]
                                                    @return The extent along the specified basis vector */
TgINLINE VAR_T()                                FCN_VO(tgGM_BX_Query_Extent)( VEC_OBJ_T(TgBOX,CPCU) ARG0, TgRSIZE_C ARG1 );

                                                /** @brief Return the extent along the first basis vector
                                                    @param[in] ARG Pointer to a geometry object (box)
                                                    @return The extent along the first basis vector */
TgINLINE VAR_T()                                FCN_VO(tgGM_BX_Query_Extent_0)( VEC_OBJ_T(TgBOX,CPCU) ARG );

                                                /** @brief Return the extent along the second basis vector
                                                    @param[in] ARG Pointer to a geometry object (box)
                                                    @return The extent along the second basis vector */
TgINLINE VAR_T()                                FCN_VO(tgGM_BX_Query_Extent_1)( VEC_OBJ_T(TgBOX,CPCU) ARG );

                                                /** @brief Return the extent along the third basis vector
                                                    @param[in] ARG Pointer to a geometry object (box)
                                                    @return The extent along the third basis vector */
TgINLINE VAR_T()                                FCN_VO(tgGM_BX_Query_Extent_2)( VEC_OBJ_T(TgBOX,CPCU) ARG );




#if defined(VEC_IS_NATIVE) && VEC_IS_NATIVE

                                                /** @brief Calculate a point along the basis vectors of the box
                                                    @param[in] ARG0 Pointer to the geometry object (box)
                                                    @param[in] ARG1 Vector of extents for the basis vectors
                                                    @return The resulting point from the arguments and the box basis vectors */
TgINLINE VEC_N_T(1)                             FCN_VO(tgGM_BX_N_Calc_Point)( VEC_OBJ_T(TgBOX_N,CPCU) ARG0, VEC_N_T(1,C) ARG1 );

                                                /** @copydoc FCN_VO(tgGM_BX_Calc_Point_Index) */
TgINLINE VEC_N_T(1)                             FCN_VO(tgGM_BX_N_Calc_Point_Index)( VEC_OBJ_T(TgBOX_N,CPCU), TgRSIZE_C );

                                                /** @copydoc FCN_VO(tgGM_BX_Reset) */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_N_Reset)( VEC_OBJ_T(TgBOX_N,PCU) ARG );

                                                /** @copydoc FCN_VO(tgGM_BX_Is_Valid) */
TgEXTN TgBOOL                                   FCN_VO(tgGM_BX_N_Is_Valid)( VEC_OBJ_T(TgBOX_N,CPCU) ARG );

                                                /** @copydoc FCN_VO(tgGM_BX_Support_Point) */
TgINLINE VEC_N_T(1)                             FCN_VO(tgGM_BX_N_Support_Point)( VEC_OBJ_T(TgBOX_N,CPCU) ARG0, VEC_N_T(1,C) ARG1 );

                                                /** @copydoc FCN_VO(tgGM_BX_Volume) */
TgINLINE VEC_N_T(1)                             FCN_VO(tgGM_BX_N_Volume)( VEC_OBJ_T(TgBOX_N,CPCU) ARG );

                                                /** @copydoc FCN_VO(tgGM_BX_Area) */
TgINLINE VEC_N_T(1)                             FCN_VO(tgGM_BX_N_Area)( VEC_OBJ_T(TgBOX_N,CPCU) ARG );

                                                /** @copydoc FCN_VO(tgGM_BX_BA) */
TgEXTN TgVOID                                   FCN_VO(tgGM_BX_N_BA)( VEC_OBJ_T(TgBOXAA_N,PCU) ARG0, VEC_OBJ_T(TgBOX_N,CPCU) ARG1 );

                                                /** @copydoc FCN_VO(tgGM_BX_Sweep_BA) */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_N_Sweep_BA)( VEC_OBJ_T(TgBOXAA_N,PCU) ARG0, VEC_OBJ_T(TgBOX_N,CPCU) ARG1, VEC_N_T(1,C) ARG2 );

                                                /** @copydoc FCN_VO(tgGM_BX_Project) */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_N_Project)( VEC_N_T(1,PCU) ARG0, VEC_N_T(1,PCU) ARG1, VEC_OBJ_T(TgBOX_N,CPCU) ARG2, VEC_N_T(1,C) ARG3 );

                                                /** @copydoc FCN_VO(tgGM_BX_Is_Contained) */
TgINLINE TgBOOL                                 FCN_VO(tgGM_BX_N_Is_Contained)( VEC_OBJ_T(TgBOX_N,CPCU) ARG0, VEC_N_T(1,C) ARG1 );

                                                /** @copydoc FCN_VO(tgGM_BX_TX) */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_N_TX)( VEC_OBJ_T(TgBOX_N,PCU) ARG0, VEC_N_T(3,CPCU) ARG1 );

                                                /** @copydoc FCN_VO(tgGM_BX_Copy_TX) */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_N_Copy_TX)( VEC_OBJ_T(TgBOX_N,PCU) ARG0, VEC_OBJ_T(TgBOX_N,CPCU) ARG1, VEC_N_T(3,CPCU) ARG2 );

                                                /** @copydoc FCN_VO(tgGM_BX_Init_3D) */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_N_Init_3D)( VEC_OBJ_T(TgBOX_N,PCU) ARG0, VEC_N_T(3,CPCU) ARG1, VEC_N_T(1,C) ARG2 );

                                                /** @copydoc FCN_VO(tgGM_BX_Copy) */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_N_Copy)( VEC_OBJ_T(TgBOX_N,PCU) ARG0, VEC_OBJ_T(TgBOX_N,CPCU) ARG1 );


                                                /** @copydoc FCN_VO(tgGM_BX_Set_Origin) */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_N_Set_Origin)( VEC_OBJ_T(TgBOX_N,PCU) ARG0, VEC_N_T(1,C) ARG1 );

                                                /** @copydoc FCN_VO(tgGM_BX_Set_Axes_Unit_List) */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_N_Set_Axes_Unit_List)( VEC_OBJ_T(TgBOX_N,PCU) ARG0, VEC_N_T(3,CPCU) ARG1 );

                                                /** @copydoc FCN_VO(tgGM_BX_Set_Axis_Unit_Index) */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_N_Set_Axis_Unit_Index)( VEC_OBJ_T(TgBOX_N,PCU), TgRSIZE_C, VEC_N_T(1,C) ARG );

                                                /** @copydoc FCN_VO(tgGM_BX_Set_Axis_Unit_0) */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_N_Set_Axis_Unit_0)( VEC_OBJ_T(TgBOX_N,PCU) ARG0, VEC_N_T(1,C) ARG1 );

                                                /** @copydoc FCN_VO(tgGM_BX_Set_Axis_Unit_1) */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_N_Set_Axis_Unit_1)( VEC_OBJ_T(TgBOX_N,PCU) ARG0, VEC_N_T(1,C) ARG1 );

                                                /** @copydoc FCN_VO(tgGM_BX_Set_Axis_Unit_2) */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_N_Set_Axis_Unit_2)( VEC_OBJ_T(TgBOX_N,PCU) ARG0, VEC_N_T(1,C) ARG1 );

                                                /** @copydoc FCN_VO(tgGM_BX_Set_3D) */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_N_Set_3D)( VEC_OBJ_T(TgBOX_N,PCU) ARG0, VEC_N_T(3,CPCU) ARG1 );

                                                /** @copydoc FCN_VO(tgGM_BX_Set_Extent_List) */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_N_Set_Extent_List)( VEC_OBJ_T(TgBOX_N,PCU) ARG0, VEC_N_T(1,C) ARG1 );

                                                /** @copydoc FCN_VO(tgGM_BX_Set_Extent_Index) */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_N_Set_Extent_Index)( VEC_OBJ_T(TgBOX_N,PCU), TgRSIZE_C ARG0, VAR_T(C) ARG1 );

                                                /** @copydoc FCN_VO(tgGM_BX_Set_Extent_0) */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_N_Set_Extent_0)( VEC_OBJ_T(TgBOX_N,PCU) ARG0, VAR_T(C) ARG1 );

                                                /** @copydoc FCN_VO(tgGM_BX_Set_Extent_1) */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_N_Set_Extent_1)( VEC_OBJ_T(TgBOX_N,PCU) ARG0, VAR_T(C) ARG1 );

                                                /** @copydoc FCN_VO(tgGM_BX_Set_Extent_2) */
TgINLINE TgVOID                                 FCN_VO(tgGM_BX_N_Set_Extent_2)( VEC_OBJ_T(TgBOX_N,PCU) ARG0, VAR_T(C) ARG1 );


                                                /** @copydoc FCN_VO(tgGM_BX_Query_Origin) */
TgINLINE VEC_N_T(1)                             FCN_VO(tgGM_BX_N_Query_Origin)( VEC_OBJ_T(TgBOX_N,CPCU) ARG );

                                                /** @copydoc FCN_VO(tgGM_BX_Query_Axis_Unit) */
TgINLINE VEC_N_T(1)                             FCN_VO(tgGM_BX_N_Query_Axis_Unit)( VEC_OBJ_T(TgBOX_N,CPCU) ARG0, TgRSIZE_C ARG1 );

                                                /** @copydoc FCN_VO(tgGM_BX_Query_Axis_Unit_0) */
TgINLINE VEC_N_T(1)                             FCN_VO(tgGM_BX_N_Query_Axis_Unit_0)( VEC_OBJ_T(TgBOX_N,CPCU) ARG );

                                                /** @copydoc FCN_VO(tgGM_BX_Query_Axis_Unit_1) */
TgINLINE VEC_N_T(1)                             FCN_VO(tgGM_BX_N_Query_Axis_Unit_1)( VEC_OBJ_T(TgBOX_N,CPCU) ARG );

                                                /** @copydoc FCN_VO(tgGM_BX_Query_Axis_Unit_2) */
TgINLINE VEC_N_T(1)                             FCN_VO(tgGM_BX_N_Query_Axis_Unit_2)( VEC_OBJ_T(TgBOX_N,CPCU) ARG );

                                                /** @copydoc FCN_VO(tgGM_BX_Query_Extent_List) */
TgINLINE VEC_N_T(1)                             FCN_VO(tgGM_BX_N_Query_Extent_List)( VEC_OBJ_T(TgBOX_N,CPCU) ARG );

                                                /** @copydoc FCN_VO(tgGM_BX_Query_Extent) */
TgINLINE VEC_N_T(1)                             FCN_VO(tgGM_BX_N_Query_Extent)( VEC_OBJ_T(TgBOX_N,CPCU) ARG0, TgRSIZE_C ARG1 );

                                                /** @copydoc FCN_VO(tgGM_BX_Query_Extent_0) */
TgINLINE VEC_N_T(1)                             FCN_VO(tgGM_BX_N_Query_Extent_0)( VEC_OBJ_T(TgBOX_N,CPCU) ARG );

                                                /** @copydoc FCN_VO(tgGM_BX_Query_Extent_1) */
TgINLINE VEC_N_T(1)                             FCN_VO(tgGM_BX_N_Query_Extent_1)( VEC_OBJ_T(TgBOX_N,CPCU) ARG );

                                                /** @copydoc FCN_VO(tgGM_BX_Query_Extent_2) */
TgINLINE VEC_N_T(1)                             FCN_VO(tgGM_BX_N_Query_Extent_2)( VEC_OBJ_T(TgBOX_N,CPCU) ARG );

/*# defined(VEC_IS_NATIVE) && VEC_IS_NATIVE */
#endif
