/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common - Geometry 3D - Disk.h_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.17 / »GUID« 3ED3C595-046B-47FB-8785-5C167178CD24 */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Common ===================================================================================================================================================================== */

/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*  Public Functions                                                                                                                                                               */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

                                                /** @brief Invalidate the geometry object (disk)
                                                    @param[out] OUT Pointer to the geometry object (disk) */
TgINLINE TgVOID                                 FCN_VO(tgGM_DK_Reset)( VEC_OBJ_T(TgDISK,PCU) NONULL OUT );

                                                /** @brief Validate the integrity of the geometry object (disk)
                                                    @param[in] ARG Pointer to a geometry object (disk)
                                                    @return True if the geometry object (disk) is valid and false otherwise */
TgEXTN TgBOOL                                   FCN_VO(tgGM_DK_Is_Valid)( VEC_OBJ_T(TgDISK,CPCU) NONULL ARG );

                                                /** @brief Determine the point on the geometry object (disk) that is furthest along the direction of ARG1
                                                    @param[in] ARG0 Pointer to a geometry object (disk)
                                                    @param[in] ARG1 Direction vector
                                                    @return The point on the geometry object (disk) that is furthest along the direction of ARG1 */
TgEXTN VEC_T(1)                                 FCN_VO(tgGM_DK_Support_Point)( VEC_OBJ_T(TgDISK,CPCU) NONULL ARG0, VEC_T(1,C) ARG1 );

                                                /** @brief Calculate the surface area of the geometry object (disk)
                                                    @param[in] ARG Pointer to a geometry object (disk)
                                                    @return The surface area of the geometry object (disk) */
TgINLINE VAR_T()                                FCN_VO(tgGM_DK_Area)( VEC_OBJ_T(TgDISK,CPCU) NONULL ARG );

                                                /** @brief Calculate the minimum necessary Axis-Aligned Bounding Box to contain the geometry object (disk)
                                                    @param[out] ARG0 Pointer to an axis-aligned bounding box object
                                                    @param[in] ARG1 Pointer to a geometry object (disk) */
TgEXTN TgVOID                                   FCN_VO(tgGM_DK_BA)( VEC_OBJ_T(TgBOXAA,PCU) NONULL ARG0, VEC_OBJ_T(TgDISK,CPCU) NONULL ARG1 );

                                                /** @brief Calculate the minimum necessary Axis-Aligned Bounding Box to contain the swept geometry object (disk)
                                                    @param[out] ARG0 Pointer to an axis-aligned bounding box object
                                                    @param[in] ARG1 Pointer to a geometry object (disk)
                                                    @param[in] ARG2 Pointer to a vector describing the swept direction and magnitude */
TgINLINE TgVOID                                 FCN_VO(tgGM_DK_Sweep_BA)( VEC_OBJ_T(TgBOXAA,PCU) NONULL ARG0, VEC_OBJ_T(TgDISK,CPCU) NONULL ARG1, VEC_T(1,C) ARG2 );

                                                /** @brief Project the geometry object (disk) along the direction vector
                                                    @param[out] OUT0 Pointer to a scalar value to hold the lower bound of the projection
                                                    @param[out] OUT1 Pointer to a scalar value to hold the upper bound of the projection
                                                    @param[in] ARG2 Pointer to a geometry object (disk)
                                                    @param[in] ARG3 Direction vector */
TgEXTN TgVOID                                   FCN_VO(tgGM_DK_Project)( VEC_T(1,PCU) NONULL ARG0, VEC_T(1,PCU) NONULL ARG1, VEC_OBJ_T(TgDISK,CPCU) NONULL ARG2, VEC_T(1,C) ARG3 );

                                                /** @brief Test to see if a point is either on or in the geometry object (disk)
                                                    @param[in] ARG0 Pointer to a geometry object (disk)
                                                    @param[in] ARG1 Position vector
                                                    @return True if the position is either on or in the geometry object (disk) and false otherwise */
TgINLINE TgBOOL                                 FCN_VO(tgGM_DK_Is_Contained)( VEC_OBJ_T(TgDISK,CPCU) NONULL ARG0, VEC_T(1,C) ARG1 );

                                                /** @brief Transform the geometry object (disk) at ARG0 by the matrix at ARG1
                                                    @param[in,out] ARG0 Pointer to a geometry object
                                                    @param[in] ARG1 Column-Major matrix (3x4) containing rotation and translation */
TgINLINE TgVOID                                 FCN_VO(tgGM_DK_TX)( VEC_OBJ_T(TgDISK,PCU) NONULL ARG0, VEC_T(3,CPCU) NONULL ARG1 );

                                                /** @brief Transform the geometry object (disk) at ARG1 by the matrix at ARG2 and store it in ARG0
                                                    @param[out] ARG0 Pointer to a geometry object (disk)
                                                    @param[in] ARG1 Pointer to a geometry object (disk)
                                                    @param[in] ARG2 Column-Major matrix (3x4) containing rotation and translation */
TgINLINE TgVOID                                 FCN_VO(tgGM_DK_Copy_TX)( VEC_OBJ_T(TgDISK,PCU) NONULL ARG0, VEC_OBJ_T(TgDISK,CPCU) NONULL ARG1, VEC_T(3,CPCU) NONULL ARG2 );


                                                /** @brief Initialize a new geometry object (disk) with the function arguments
                                                    @param[out] ARG0 Pointer to a geometry object (disk)
                                                    @param[in] ARG1  Column-Major matrix (3x4) containing rotation (basis vectors) and origin
                                                    @param[in] ARG2 Scalar Value for the radius */
TgINLINE TgVOID                                 FCN_VO(tgGM_DK_Init)( VEC_OBJ_T(TgDISK,PCU) NONULL ARG0, VEC_T(3,CPCU) NONULL ARG1, VAR_T(C) ARG2 );

                                                /** @brief Copy the one geometry object (disk) to another of the same type
                                                    @param[out] ARG0 Pointer to a geometry object (disk)
                                                    @param[in] ARG1 Pointer to a geometry object (disk) */
TgINLINE TgVOID                                 FCN_VO(tgGM_DK_Copy)( VEC_OBJ_T(TgDISK,PCU) NONULL ARG0, VEC_OBJ_T(TgDISK,CPCU) NONULL ARG1 );


                                                /** @brief Set all three of the basis vectors and the origin
                                                    @note Orthogonality of the basis vectors is the responsibility of the caller
                                                    @param[in,out] ARG0 Pointer to a geometry object (disk)
                                                    @param[in] ARG1 Column-Major matrix (3x4) containing rotation (basis vectors) and origin */
TgINLINE TgVOID                                 FCN_VO(tgGM_DK_Set_Reference_Frame)( VEC_OBJ_T(TgDISK,PCU) NONULL ARG0, VEC_T(3,CPCU) NONULL ARG1 );

                                                /** @brief Set the origin
                                                    @param[in,out] ARG0 Pointer to a geometry object (disk)
                                                    @param[in] ARG1 Position vector */
TgINLINE TgVOID                                 FCN_VO(tgGM_DK_Set_Origin)( VEC_OBJ_T(TgDISK,PCU) NONULL ARG0, VEC_T(1,C) ARG1 );

                                                /** @brief Set the radius
                                                    @param[in,out] ARG0 Pointer to a geometry object (disk)
                                                    @param[in] ARG1 Scalar Value */
TgINLINE TgVOID                                 FCN_VO(tgGM_DK_Set_Radius)( VEC_OBJ_T(TgDISK,PCU) NONULL ARG0, VAR_T(C) ARG1 );


                                                /** @brief Return the origin
                                                    @param[in] ARG Pointer to a geometry object (disk)
                                                    @return The origin */
TgINLINE VEC_T(1)                               FCN_VO(tgGM_DK_Query_Origin)( VEC_OBJ_T(TgDISK,CPCU) NONULL ARG );

                                                /** @brief Return the first basis vector on the plane
                                                    @param[in] ARG Pointer to a geometry object (disk)
                                                    @return The first basis vector of the plane */
TgINLINE VEC_T(1)                               FCN_VO(tgGM_DK_Query_U)( VEC_OBJ_T(TgDISK,CPCU) NONULL ARG );

                                                /** @brief Return the normal of the plane
                                                    @param[in] ARG Pointer to a geometry object (disk)
                                                    @return The normal of the plane */
TgINLINE VEC_T(1)                               FCN_VO(tgGM_DK_Query_Normal)( VEC_OBJ_T(TgDISK,CPCU) NONULL ARG );

                                                /** @brief Return the second basis vector on the plane
                                                    @param[in] ARG Pointer to a geometry object (disk)
                                                    @return The second basis vector of the plane */
TgINLINE VEC_T(1)                               FCN_VO(tgGM_DK_Query_V)( VEC_OBJ_T(TgDISK,CPCU) NONULL ARG );

                                                /** @brief Return the radius
                                                    @param[in] ARG Pointer to a geometry object (disk)
                                                    @return The radius */
TgINLINE VAR_T()                                FCN_VO(tgGM_DK_Query_Radius)( VEC_OBJ_T(TgDISK,CPCU) NONULL ARG );

                                                /** @brief Return the radius squared
                                                    @param[in] ARG Pointer to a geometry object (disk)
                                                    @return The radius squared */
TgINLINE VAR_T()                                FCN_VO(tgGM_DK_Query_Radius_Sq)( VEC_OBJ_T(TgDISK,CPCU) NONULL ARG );
