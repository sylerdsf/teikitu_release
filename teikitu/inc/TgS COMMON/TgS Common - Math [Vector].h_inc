/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common - Math API [Vector].h_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Common ===================================================================================================================================================================== */

/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*  DOXYGEN                                                                                                                                                                        */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

/** @defgroup TGS_COMMON_MATH_VECTOR_LOAD Load | Set Operations
    @ingroup TGS_COMMON_MATH_VECTOR_API
*/

/** @defgroup TGS_COMMON_MATH_VECTOR_BOUNDS Bounds
    @ingroup TGS_COMMON_MATH_VECTOR_API
*/

/** @defgroup TGS_COMMON_MATH_VECTOR_LOGICAL Logical
    @ingroup TGS_COMMON_MATH_VECTOR_API
*/

/** @defgroup TGS_COMMON_MATH_VECTOR_PERM Permute and Select
    @ingroup TGS_COMMON_MATH_VECTOR_API
*/

/** @defgroup TGS_COMMON_MATH_VECTOR_CMP Comparison Operators
    @ingroup TGS_COMMON_MATH_VECTOR_API
*/

/** @defgroup TGS_COMMON_MATH_VECTOR_INT Arithmetic Operations
    @ingroup TGS_COMMON_MATH_VECTOR_API
*/


/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*  Public Functions                                                                                                                                                               */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_LOAD
                                                @brief Return a vector with the data at the unaligned location at ARG
                                                @param[in] ARG Pointer to a possibly unaligned region of memory holding enough data to completely initialize a new vector
                                                @return A vector initialized from the data at ARG*/
TgINLINE VEC_T(1)                           FCN_V(tgMH_SETU)( VAR_T(CPCU) ARG );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_LOAD
                                                @brief Return a vector with the data at the aligned location at ARG
                                                @param[in] ARG Pointer to an aligned region of memory holding enough data to completely initialize a new vector
                                                @return A vector initialized from the data at ARG*/
TgINLINE VEC_T(1)                           FCN_V(tgMH_SETA)( VAR_T(CPCU) ARG );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_LOAD
                                                @brief Return a vector where each element is assigned the same value as ARG
                                                @param[in] ARG Scalar value
                                                @return A vector where each element is assigned the same value as ARG */
TgINLINE VEC_T(1)                           FCN_V(tgMH_SET1)( VAR_T(C) ARG );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_LOAD
                                                @brief Return a vector where each element is assigned a random value
                                                @return A vector where each element is assigned a random value */
TgINLINE VEC_T(1)                           FCN_V(tgMH_RAND)( TgVOID );




                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_PERM
                                                @brief Return the result of a bit-wise select where 0 selects the bit from ARG0 and the bit from ARG1 otherwise
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @param[in] ARG1 Vector, Mask [0,0x7F] uses the first vector, [0x80,0xFF] second
                                                @return A bit-wise select where 0 selects the bit from ARG0 and the bit from ARG1 otherwise */
TgINLINE VEC_T(1)                           FCN_V(tgMH_PERM)( VEC_T(1,CPCU) ARG0, VEC_T(1,CPCU) ARG1, TgUINT_F08_CPCU ARG2 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_PERM
                                                @brief Return the result of a bit-wise select where 0 selects the bit from ARG0 and the bit from ARG1 otherwise
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @param[in] ARG1 Vector, Mask
                                                @return A bit-wise select where 0 selects the bit from ARG0 and the bit from ARG1 otherwise */
TgINLINE VEC_T(1)                           FCN_V(tgMH_SEL)( VEC_T(1,CPCU) ARG0, VEC_T(1,CPCU) ARG1, TgUINT_F32_CPCU ARG2 );




                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_LOGICAL
                                                @brief Return the result of a bit-wise and between both arguments
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @return A result of a bit-wise and between both arguments */
TgINLINE VEC_T(1)                           FCN_V(tgMH_AND)( VEC_T(1,CPCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_LOGICAL
                                                @brief Return the result of a bit-wise or between both arguments
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @return A result of a bit-wise or between both arguments */
TgINLINE VEC_T(1)                           FCN_V(tgMH_OR)( VEC_T(1,CPCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_LOGICAL
                                                @brief Return the result of a bit-wise xor between both arguments
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @return A result of a bit-wise xor between both arguments */
TgINLINE VEC_T(1)                           FCN_V(tgMH_XOR)( VEC_T(1,CPCU) ARG0, VEC_T(1,CPCU) ARG1 );




                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_BOUNDS
                                                @brief Return a vector where each element is the maximum of the corresponding elements in the argument vectors
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @return A vector where each element is the maximum of the corresponding elements in the argument vectors */
TgINLINE VEC_T(1)                           FCN_V(tgMH_MAX)( VEC_T(1,CPCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_BOUNDS
                                                @brief Return a vector where each element is the minimum of the corresponding elements in the argument vectors
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @return A vector where each element is the minimum of the corresponding elements in the argument vectors */
TgINLINE VEC_T(1)                           FCN_V(tgMH_MIN)( VEC_T(1,CPCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_BOUNDS
                                                @brief Return a new vector whose elements are the absolute value of the argument elements
                                                @param[in] ARG Vector
                                                @return A new vector whose elements are the absolute value of the argument elements */
TgINLINE VEC_T(1)                           FCN_V(tgMH_ABS)( VEC_T(1,CPCU) ARG );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_BOUNDS
                                                @brief Return a new vector whose element value are (-1,0,+1) based on the sign of the argument elements
                                                @param[in] ARG Vector
                                                @return A new vector whose element value are (-1,0,+1) based on the sign of the argument elements */
TgINLINE VEC_T(1)                           FCN_V(tgMH_SGN)( VEC_T(1,CPCU) ARG );




                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CMP
                                                @brief Return a vector encoding the result of ARG0 equal to ARG1, where a set bit is true, and false otherwise
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @return A vector encoding the result of ARG0 equal to ARG1, where a set bit is true, and false otherwise */
TgINLINE VEC_T(1)                           FCN_V(tgMH_CMP_EQ)( VEC_T(1,CPCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CMP
                                                @brief Return a vector encoding the result of ARG0 not equal to ARG1, where a set bit is true, and false otherwise
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @return A vector encoding the result of ARG0 not equal to ARG1, where a set bit is true, and false otherwise */
TgINLINE VEC_T(1)                           FCN_V(tgMH_CMP_VE)( VEC_T(1,CPCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CMP
                                                @brief Return a vector encoding the result of ARG0 greater than or equal to ARG1, where a set bit is true, and false otherwise
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @return A vector encoding the result of ARG0 greater than or equal to ARG1, where a set bit is true, and false otherwise */
TgINLINE VEC_T(1)                           FCN_V(tgMH_CMP_GE)( VEC_T(1,CPCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CMP
                                                @brief Return a vector encoding the result of ARG0 greater than ARG1, where a set bit is true, and false otherwise
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @return A vector encoding the result of ARG0 greater than ARG1, where a set bit is true, and false otherwise */
TgINLINE VEC_T(1)                           FCN_V(tgMH_CMP_GT)( VEC_T(1,CPCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CMP
                                                @brief Return a vector encoding the result of ARG0 less than or equal to ARG1, where a set bit is true, and false otherwise
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @return A vector encoding the result of ARG0 less than or equal to ARG1, where a set bit is true, and false otherwise */
TgINLINE VEC_T(1)                           FCN_V(tgMH_CMP_LE)( VEC_T(1,CPCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CMP
                                                @brief Return a vector encoding the result of ARG0 less than ARG1, where a set bit is true, and false otherwise
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @return A vector encoding the result of ARG0 less than ARG1, where a set bit is true, and false otherwise */
TgINLINE VEC_T(1)                           FCN_V(tgMH_CMP_LT)( VEC_T(1,CPCU) ARG0, VEC_T(1,CPCU) ARG1 );




                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CMP
                                                @brief Return a vector encoding the result of ARG0 equal to ARG1, where a set bit is true, and false otherwise
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @return True if the all elements pass the comparison and false otherwise */
TgINLINE TgBOOL                             FCN_V(tgMH_CMP_EQ_BOOL)( VEC_T(1,CPCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CMP
                                                @brief Return a vector encoding the result of ARG0 not equal to ARG1, where a set bit is true, and false otherwise
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @return True if the all elements pass the comparison and false otherwise */
TgINLINE TgBOOL                             FCN_V(tgMH_CMP_NE_BOOL)( VEC_T(1,CPCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CMP
                                                @brief Return a vector encoding the result of ARG0 greater than or equal to ARG1, where a set bit is true, and false otherwise
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @return True if the all elements pass the comparison and false otherwise */
TgINLINE TgBOOL                             FCN_V(tgMH_CMP_GE_BOOL)( VEC_T(1,CPCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CMP
                                                @brief Return a vector encoding the result of ARG0 greater than ARG1, where a set bit is true, and false otherwise
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @return True if the all elements pass the comparison and false otherwise */
TgINLINE TgBOOL                             FCN_V(tgMH_CMP_GT_BOOL)( VEC_T(1,CPCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CMP
                                                @brief Return a vector encoding the result of ARG0 less than or equal to ARG1, where a set bit is true, and false otherwise
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @return True if the all elements pass the comparison and false otherwise */
TgINLINE TgBOOL                             FCN_V(tgMH_CMP_LE_BOOL)( VEC_T(1,CPCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CMP
                                                @brief Return a vector encoding the result of ARG0 less than ARG1, where a set bit is true, and false otherwise
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @return True if the all elements pass the comparison and false otherwise */
TgINLINE TgBOOL                             FCN_V(tgMH_CMP_LT_BOOL)( VEC_T(1,CPCU) ARG0, VEC_T(1,CPCU) ARG1 );
