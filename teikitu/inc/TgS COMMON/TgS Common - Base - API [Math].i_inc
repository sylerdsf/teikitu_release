/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common - Base - API [Math].i_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */

#if defined(TGS_COMMON_BASE_API_MATH_IINC)
    #error This file should be include by TGS_COMMON_BASE_API_MATH_INK
#endif

#if defined(TEMPLATE__ENABLE_INTEGER)

    #if !defined (ENABLE_RELOAD_GUARD)
        #define ENABLE_RELOAD_GUARD
        #define TEMPLATE__ENABLE_UNSIGNED
        #include __FILE__
        #undef TEMPLATE__ENABLE_UNSIGNED
        #undef ENABLE_RELOAD_GUARD
    #endif

#else

    #if !defined (ENABLE_RELOAD_GUARD)
        #define ENABLE_RELOAD_GUARD
        #if !defined(TEMPLATE__TYPE_SIZE)
            #define TEMPLATE__TYPE_SIZE 32
            #include __FILE__
            #undef TEMPLATE__TYPE_SIZE
            #define TEMPLATE__TYPE_SIZE 64
        #endif
        #undef ENABLE_RELOAD_GUARD
    #endif

#endif

#include "TgS COMMON/TgS Common - Base - Defines [Template] [Math].h_inc"

#define FCM(A) TgMACRO_CONCAT5(tgCM_, A, _, GENERATE__TYPE_SYMBOL, GENERATE__TYPE_SIZE_TEXT)
#define FPM(A) TgMACRO_CONCAT5(tgPM_, A, _, GENERATE__TYPE_SYMBOL, GENERATE__TYPE_SIZE_TEXT)


/* == Common ===================================================================================================================================================================== */

/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*  Public Functions                                                                                                                                                               */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

/* ---- FCM(SWP) ----------------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCM(SWP)( VAR_T(PCU) OUT0, VAR_T(PCU) OUT1 )
{
    VAR_T() const uiTemp = *OUT0;
    *OUT0 = *OUT1;
    *OUT1 = uiTemp;
}


/* ---- FCM(SGN) ----------------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCM(SGN)( VAR_T(C) ARG )
{
#if !defined(TEMPLATE__ENABLE_UNSIGNED)
    return ((ARG > TYPE_K(0)) ? TYPE_K(1) : ((ARG < TYPE_K(0)) ? -TYPE_K(1) : TYPE_K(0)));
#else
    return ((ARG > TYPE_K(0)) ? TYPE_K(1) : TYPE_K(0));
#endif
}


/* ---- FCM(MAX) ----------------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCM(MAX)( VAR_T(C) ARG0, VAR_T(C) ARG1 )
{
    return (ARG0 >= ARG1 ? ARG0 : ARG1);

}


/* ---- FCM(MIN) ----------------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCM(MIN)( VAR_T(C) ARG0, VAR_T(C) ARG1 )
{
    return (ARG1 >= ARG0 ? ARG0 : ARG1);
}


/* ---- FCM(CLP) ----------------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCM(CLP)( VAR_T(C) ARG0, VAR_T(C) MIN, VAR_T(C) MAX )
{
    TgPARAM_CHECK(MIN <= MAX);
    return (ARG0 <= MIN ? MIN : (ARG0 >= MAX ? MAX : ARG0));
}

            
/* ---- FCM(CLP_MIN) ------------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCM(CLP_MIN)( VAR_T(C) ARG0, VAR_T(C) ARG1 )
{
    return (ARG0 <= ARG1 ? ARG1 : ARG0);
}

            
/* ---- FCM(CLP_MAX) ------------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCM(CLP_MAX)( VAR_T(C) ARG0, VAR_T(C) ARG1 )
{
    return (ARG0 >= ARG1 ? ARG1 : ARG0);
}




/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
#if defined(TEMPLATE__ENABLE_INTEGER)
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

/* ---- FCM(FLR_ALGN_PW2) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCM(FLR_ALGN_PW2)( VAR_T(C) ARG0, VAR_T(C) ARG1 )
{
    TgPARAM_CHECK(ARG1 > 0 && FCM(IS_PW2)( ARG1 ));

#if !defined(TEMPLATE__ENABLE_UNSIGNED)
    {
        VAR_T()                             fVal;
        
        fVal = FPM(ABS)( ARG0 ) & ~(ARG1 - 1 );
        return (ARG0 > 0 ? fVal : -fVal);
    }
#else
    return ((ARG0)& ~(ARG1 - 1u));
/*# defined(TEMPLATE__ENABLE_UNSIGNED) */
#endif
}


/* ---- FCM(CEL_ALGN_PW2) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCM(CEL_ALGN_PW2)( VAR_T(C) ARG0, VAR_T(C) ARG1 )
{
    TgPARAM_CHECK(ARG1 > 0 && FCM(IS_PW2)( ARG1 ));

#if !defined(TEMPLATE__ENABLE_UNSIGNED)
    {
        VAR_T()                             fVal;

        fVal = (FPM(ABS)( ARG0 ) + ARG1 - 1) & ~(ARG1 - 1 );
        return (ARG0 > 0 ? fVal : -fVal);
    }
#else
    return ((ARG0 + ARG1 - 1u) & ~(ARG1 - 1u));
/*# defined(TEMPLATE__ENABLE_UNSIGNED) */
#endif
}


/* ---- FCM(PRV_PW2) ------------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCM(PRV_PW2)( VAR_T(C) ARG0 )
{
#if !defined(TEMPLATE__ENABLE_UNSIGNED)
    VAR_T()                             fABS_A;
    VAR_T()                             fSCAN;
    VAR_T()                             fPW2;

    fABS_A = FPM(ABS)( ARG0 );
    fSCAN = (ARG0 == 0) ? 0 : ( VAR_T() ) ( (UVAR_T())1 << UFCN_F(tgPM_BSR)( (UVAR_T())fABS_A ) );
    fPW2 = FCM(IS_PW2)( fABS_A ) ? fABS_A : fSCAN;

    return (ARG0 > 0 ? fPW2 : -fPW2);
#else
    return ((FCM(IS_PW2)( ARG0 )) ? ARG0 : (VAR_T())((ARG0 == 0) ? 0 : (1 << FPM(BSR)( ARG0 ))) );
/*# defined(TEMPLATE__ENABLE_UNSIGNED) */
#endif
}


/* ---- FCM(NXT_PW2) ------------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCM(NXT_PW2)( VAR_T(C) ARG0 )
{
#if !defined(TEMPLATE__ENABLE_UNSIGNED)
    VAR_T()                             fABS_A;
    VAR_T()                             fSCAN;
    VAR_T()                             fPW2;

    fABS_A = FPM(ABS)( ARG0 );
    fSCAN = (VAR_T())((ARG0 == 0) ? 1 : (2 << UFCN_F(tgPM_BSR)( (UVAR_T())fABS_A )));
    fPW2 = (FCM(IS_PW2)( fABS_A )) ? fABS_A : fSCAN;

    return (ARG0 > 0 ? fPW2 : -fPW2);
#else
    return ((FCM(IS_PW2)( ARG0 )) ? ARG0 : (VAR_T())((ARG0 == 0) ? 1 : (2 << FPM(BSR)( ARG0 ))) );
/*# defined(TEMPLATE__ENABLE_UNSIGNED) */
#endif
}


/* ---- FCM(IS_PW2) -------------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgBOOL FCM(IS_PW2)( VAR_T(C) ARG0 )
{
#if !defined(TEMPLATE__ENABLE_UNSIGNED)
    UVAR_T()                    fABS_A;

    fABS_A = (UVAR_T())FPM(ABS)( ARG0 );
    return (fABS_A && ((fABS_A & (fABS_A - 1)) == 0));
#else
    return (ARG0 && ((ARG0 & (ARG0 - 1u)) == 0u));
/*# defined(TEMPLATE__ENABLE_UNSIGNED) */
#endif
}


/* ---- FCM(RAND) ---------------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCM(RAND)( TgVOID )
{
#if defined(TEMPLATE__OVERRIDE_INT_TYPE)
    TgCOMPILER_ASSERT(sizeof(VAR_T()) == 8,);
    #if !defined(TEMPLATE__ENABLE_UNSIGNED)
        return ((VAR_T())( (tgCM_RAND_U64() & UVAR_K(KTgMAX)) - (UVAR_K(KTgMAX) >> 1)) );
    #else
        return (tgCM_RAND_U64() & VAR_K(KTgMAX));
    /*# defined(TEMPLATE__ENABLE_UNSIGNED) */
    #endif
    
#elif TEMPLATE__TYPE_SIZE < 16
    #if !defined(TEMPLATE__ENABLE_UNSIGNED)
        return ( (VAR_T())(tgCM_RAND_U16() & KTgMAX_U08) - (KTgMAX_U08>> 1) );
    #else
        return (tgCM_RAND_U16() & KTgMAX_U08);
    /*# defined(TEMPLATE__ENABLE_UNSIGNED) */
    #endif
    
#else

    #if !defined(TEMPLATE__ENABLE_UNSIGNED)
        UVAR_T()                            RAND;
    #else
        VAR_T()                             RAND;
    /*# defined(TEMPLATE__ENABLE_UNSIGNED) */
    #endif

    #if defined(TgCOMPILE__HARDWARE__RAND)
        if (0 == TgMACRO_CONCAT3(tgPM__HARDWARE__RAND_, U, GENERATE__TYPE_SIZE_TEXT)( &RAND ))
    /*# defined((TgCOMPILE__HARDWARE__RAND)) */
    #endif
        {
        #if 64 == TEMPLATE__TYPE_SIZE
            RAND = (UVAR_T())tgCM_RAND_MT_U32() | ((UVAR_T())tgCM_RAND_MT_U32() << 32);
        #else
            #if !defined(TEMPLATE__ENABLE_UNSIGNED)
                return ((VAR_T())( (tgCM_RAND_MT_U32() & UVAR_K(KTgMAX)) - (UVAR_K(KTgMAX) >> 1)) );
            #else
                return (tgCM_RAND_MT_U32() & VAR_K(KTgMAX));
            /*# defined(TEMPLATE__ENABLE_UNSIGNED) */
            #endif
        #endif
        }

    #if !defined(TEMPLATE__ENABLE_UNSIGNED)
        return ((VAR_T())( (RAND & UVAR_K(KTgMAX)) - (UVAR_K(KTgMAX) >> 1)) );
    #else
        return (RAND & VAR_K(KTgMAX));
    /*# defined(TEMPLATE__ENABLE_UNSIGNED) */
    #endif

/*# TEMPLATE__TYPE_SIZE < 16 */
#endif
}


#if defined(TEMPLATE__ENABLE_UNSIGNED)

/* ---- FPM(BSF) ----------------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgSINT_F08 FPM(BSF)( VAR_T() ARG )
{
    if (0 == ARG)
    {
        return (-1);
    }

#if defined(TgCOMPILE__HARDWARE__LZCNT)
    #if 64 == TEMPLATE__TYPE_SIZE
        return (tgPM__HARDWARE__LZCNT_U64(ARG));
    #elif 64 > TEMPLATE__TYPE_SIZE
        return (tgPM__HARDWARE__LZCNT_U32(ARG));
    #endif
#else
    for (TgSINT_F08 TRAILING_ZERO = 0; ARG != 0; ++TRAILING_ZERO, ARG >>= 1)
    {
        if (ARG & 1)
        {
            return (TRAILING_ZERO);
        };
    }
    return -1;
/*# defined(TgCOMPILE__HARDWARE__BSR) */
#endif
}


/* ---- FPM(BSR) ----------------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgSINT_F08 FPM(BSR)( VAR_T() ARG )
{
    if (0 == ARG)
    {
        return (-1);
    }

#if defined(TgCOMPILE__HARDWARE__BSR)
    #if 64 == TEMPLATE__TYPE_SIZE
        return (63 - (TgSINT_F08)tgPM__HARDWARE__BSR_U64(ARG));
    #elif 64 > TEMPLATE__TYPE_SIZE
        return (31 - (TgSINT_F08)tgPM__HARDWARE__BSR_U32(ARG));
    #endif
#else
    UVAR_T()                            MASK;

    MASK = ~(UTYPE_K(KTgMAX) >> 1);
    for (TgSINT_F32 iIndex = 0; ARG != 0; ++iIndex, ARG <<= 1)
    {
        if (ARG & MASK)
        {
            return ((TgSINT_F08)(sizeof(VAR_T())*8 - 1 - iIndex));
        };
    }
    return -1;
/*# defined(TgCOMPILE__HARDWARE__BSR) */
#endif
}


/*# defined(TEMPLATE__ENABLE_UNSIGNED) */
#endif


/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*# defined(TEMPLATE__ENABLE_INTEGER) */
#else
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */


/* ---- FCM(NR0) ----------------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgBOOL FCM(NR0)( VAR_T(C) ARG0 )
{
    return (FPM(ABS)( ARG0 ) <= VAR_K(KTgROOT_EPS));
}


/* ---- FCM(NR1) ----------------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgBOOL FCM(NR1)( VAR_T(C) ARG0 )
{
    return (FPM(ABS)( FPM(ABS)( ARG0 ) - TYPE_K(1) ) <= VAR_K(KTgROOT_EPS));
}


/* ---- FCM(CLP_FRC) ------------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCM(CLP_FRC)( VAR_T(C) ARG0, VAR_T(C) ARG1 )
{
    return (FPM(FSEL)( ARG0, FPM(FSEL)(ARG0 - ARG1, TYPE_K(1), ARG0 / ARG1), TYPE_K(0)) );
}


/* ---- FCM(LRP) ----------------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCM(LRP)( VAR_T(C) ARG0, VAR_T(C) ARG1, VAR_T(C) ARG2 )
{
    return (ARG0 + ARG2*(ARG1 - ARG0));
}


/* ---- FCM(EQ) ------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgBOOL FCM(EQ)( VAR_T(C) ARG0, VAR_T(C) ARG1, VAR_T(C) ARG2 )
{
    VAR_T(C)                        ARG0_ABS = FPM(ABS)( ARG0 );
    VAR_T(C)                        ARG1_ABS = FPM(ABS)( ARG1 );
    VAR_T(C)                        TOL = FCM(MAX)( ARG2, VAR_K(KTgEPS) );

    if (ARG1_ABS > VAR_K(KTgEPS))
    {
        return (FPM(ABS)( (ARG0_ABS / ARG1_ABS) - TYPE_K(1)) < TOL);
    }
    else if (ARG0_ABS > VAR_K(KTgEPS))
    {
        return (FPM(ABS)( (ARG1_ABS / ARG0_ABS) - TYPE_K(1)) < TOL);
    }
    else
    {
        return (true);
    };
}


/* ---- FPM(NAN) ----------------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgBOOL FPM(NAN)( VAR_T(C) ARG0 )
{
    return (ARG0 != ARG0);
}


/* ---- FPM(SINCOS) -------------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FPM(SINCOS)( VAR_T(PCU) OUT0, VAR_T(PCU) OUT1, VAR_T(C) ARG0 )
{
    TgERROR(0 != OUT0 && 0 != OUT1);
    *OUT0 = FPM(SIN)( ARG0 );
    *OUT1 = FPM(COS)( ARG0 );
}


/* ---- FPM(FSEL) ---------------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FPM(FSEL)( VAR_T(C) ARG0, VAR_T(C) ARG1, VAR_T(C) ARG2 )
{
    return ((ARG0 >= TYPE_K(0)) ? ARG1 : ARG2);
}



/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*# defined(TEMPLATE__ENABLE_INTEGER) */
#endif
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */


/* =============================================================================================================================================================================== */

#undef FCM
#undef FPM

#include "TgS COMMON/TgS Common - Base - Defines [Template] [Math].h_inc"
