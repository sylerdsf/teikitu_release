/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common - Geometry 3D - Cylinder.h_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Common ===================================================================================================================================================================== */

/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*  Public Functions                                                                                                                                                               */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

                                                /** @brief Determine the point on the geometry object (cylinder) that is furthest along the direction of ARG1
                                                    @param[in] ARG0 Pointer to a geometry object (cylinder)
                                                    @param[in] ARG1 Pointer to a direction vector
                                                    @return The point on the geometry object (cylinder) that is furthest along the direction of ARG1 */
TgEXTN VEC_T(1)                                 FCN_VO(tgGM_CY_Support_Point)( VEC_OBJ_T(TgTUBE,CPCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                                /** @brief Calculate the volume of the geometry object (cylinder)
                                                    @param[in] ARG Pointer to a geometry object (cylinder)
                                                    @return The volume of the geometry object (cylinder) */
TgINLINE VAR_T()                                FCN_VO(tgGM_CY_Volume)( VEC_OBJ_T(TgTUBE,CPCU) ARG );

                                                /** @brief Calculate the surface area of the geometry object (cylinder)
                                                    @param[in] ARG Pointer to a geometry object (cylinder)
                                                    @return The surface area of the geometry object (cylinder) */
TgINLINE VAR_T()                                FCN_VO(tgGM_CY_Area)( VEC_OBJ_T(TgTUBE,CPCU) ARG );

                                                /** @brief Calculate the minimum necessary Axis-Aligned Bounding Box to contain the geometry object (cylinder)
                                                    @param[out] ARG0 Pointer to an axis-aligned bounding box object
                                                    @param[in] ARG1 Pointer to a geometry object (cylinder) */
TgINLINE TgVOID                                 FCN_VO(tgGM_CY_BA)( VEC_OBJ_T(TgBOXAA,PCU) ARG0, VEC_OBJ_T(TgTUBE,CPCU) ARG1 );

                                                /** @brief Calculate the minimum necessary Axis-Aligned Bounding Box to contain the swept geometry object (cylinder)
                                                    @param[out] ARG0 Pointer to an axis-aligned bounding box object
                                                    @param[in] ARG1 Pointer to a geometry object (cylinder)
                                                    @param[in] ARG2 Pointer to a vector describing the swept direction and magnitude */
TgINLINE TgVOID                                 FCN_VO(tgGM_CY_Sweep_BA)( VEC_OBJ_T(TgBOXAA,PCU) ARG0, VEC_OBJ_T(TgTUBE,CPCU) ARG1, VEC_T(1,CPCU) ARG2 );

                                                /** @brief Project the geometry object (cylinder) along the direction vector
                                                    @param[out] OUT0 Pointer to a scalar value to hold the lower bound of the projection
                                                    @param[out] OUT1 Pointer to a scalar value to hold the upper bound of the projection
                                                    @param[in] ARG2 Pointer to a geometry object (cylinder)
                                                    @param[in] ARG3 Pointer to a direction vector */
TgINLINE TgVOID                                 FCN_VO(tgGM_CY_Project)( VAR_T(PCU) ARG0, VAR_T(PCU) ARG1, VEC_OBJ_T(TgTUBE,CPCU) ARG2, VEC_T(1,CPCU) ARG3 );

                                                /** @brief Test to see if a point is either on or in the geometry object (cylinder)
                                                    @param[in] ARG0 Pointer to a geometry object (cylinder)
                                                    @param[in] ARG1 Pointer to a position vector
                                                    @return True if the position is either on or in the geometry object (cylinder) and false otherwise */
TgINLINE TgBOOL                                 FCN_VO(tgGM_CY_Is_Contained)( VEC_OBJ_T(TgTUBE,CPCU) ARG0, VEC_T(1,CPCU) ARG1 );
