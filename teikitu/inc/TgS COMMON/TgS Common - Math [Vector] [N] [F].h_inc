/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common - Math API [Vector] [N] [F].h_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Common ===================================================================================================================================================================== */

/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*  DOXYGEN                                                                                                                                                                        */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

/** @defgroup TGS_COMMON_MATH_VECTOR_N_CALC SIMD - Calculations
    @ingroup TGS_COMMON_MATH_VECTOR_N_API
*/


/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*  Public Functions                                                                                                                                                               */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_N_ART
                                                @brief Return a vector that is assigned the per-element operation ARG0 + ARG1
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @return A vector that is assigned the per-element operation ARG0 + ARG1 */
TgINLINE VEC_N_T(1)                         FCN_V(tgMH_ADD_N)( VEC_N_T(1,C) ARG0, VEC_N_T(1,C) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_N_ART
                                                @brief Return a vector that is assigned the per-element operation ARG0 * (ARG1 + ARG2)
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @param[in] ARG2 Vector
                                                @return A vector that is assigned the per-element operation ARG0 * (ARG1 + ARG2) */
TgINLINE VEC_N_T(1)                         FCN_V(tgMH_MAD_N)( VEC_N_T(1,C) ARG0, VEC_N_T(1,C) ARG1, VEC_N_T(1,C) ARG2 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_N_ART
                                                @brief Return a vector that is assigned the per-element operation -ARG0 * (ARG1 - ARG2)
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @param[in] ARG2 Vector
                                                @return A vector that is assigned the per-element operation -ARG0 * (ARG1 - ARG2) */
TgINLINE VEC_N_T(1)                         FCN_V(tgMH_NMS_N)( VEC_N_T(1,C) ARG0, VEC_N_T(1,C) ARG1, VEC_N_T(1,C) ARG2 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_N_ART
                                                @brief Return a vector where each element contains the result of the dot product between the two vectors
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @return A vector where each element contains the result of the dot product between the two vectors */
TgINLINE VEC_N_T(1)                         FCN_V(tgMH_DOT_N)( VEC_N_T(1,C) ARG0, VEC_N_T(1,C) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_N_ART
                                                @brief Return a vector that is assigned the per-element operation ARG0 * ARG1
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @return A vector that is assigned the per-element operation ARG0 * ARG1 */
TgINLINE VEC_N_T(1)                         FCN_V(tgMH_MUL_N)( VEC_N_T(1,C) ARG0, VEC_N_T(1,C) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_N_ART
                                                @brief Return a vector that is assigned the per-element operation ARG0 / ARG1
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @return A vector that is assigned the per-element operation ARG0 / ARG1 */
TgINLINE VEC_N_T(1)                         FCN_V(tgMH_DIV_N)( VEC_N_T(1,C) ARG0, VEC_N_T(1,C) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_N_ART
                                                @brief Return a vector that is assigned the per-element operation ARG0 - ARG1
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @return A vector that is assigned the per-element operation ARG0 - ARG1 */
TgINLINE VEC_N_T(1)                         FCN_V(tgMH_SUB_N)( VEC_N_T(1,C) ARG0, VEC_N_T(1,C) ARG1 );




                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_N_CALC
                                                @brief Return a vector where each element contains the the squared-length of the vector
                                                @param[in] ARG0 Vector
                                                @return A vector where each element contains the the squared-length of the vector */
TgINLINE VEC_N_T(1)                         FCN_V(tgMH_LSQ_N)( VEC_N_T(1,C) ARG );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_N_CALC
                                                @brief Return a vector where each element contains the the length of the vector
                                                @param[in] ARG0 Vector
                                                @return A vector where each element contains the the length of the vector */
TgINLINE VEC_N_T(1)                         FCN_V(tgMH_LEN_N)( VEC_N_T(1,C) ARG );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_N_CALC
                                                @brief Return a vector that is the negative of the argument
                                                @param[in] ARG0 Vector
                                                @return A vector that is the negative of the argument */
TgINLINE VEC_N_T(1)                         FCN_V(tgMH_NEG_N)( VEC_N_T(1,C) ARG );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_N_CALC
                                                @brief Return a vector that is assigned the per-element operation sqrt(ARG0)
                                                @param[in] ARG0 Vector
                                                @return A vector that is assigned the per-element operation sqrt(ARG0) */
TgINLINE VEC_N_T(1)                         FCN_V(tgMH_SQRT_N)( VEC_N_T(1,C) ARG );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_N_CALC
                                                @brief Return a vector that is assigned the per-element operation 1.0 / sqrt(ARG0)
                                                @param[in] ARG0 Vector
                                                @return A vector that is assigned the per-element operation 1.0 / sqrt(ARG0) */
TgINLINE VEC_N_T(1)                         FCN_V(tgMH_RSQRT_N)( VEC_N_T(1,C) ARG );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_N_CALC
                                                @brief Return a vector that is a normalized version of the argument
                                                @param[in] ARG0 Vector
                                                @return A vector that is a normalized version of the argument */
TgINLINE VEC_N_T(1)                         FCN_V(tgMH_NORM_N)( VEC_N_T(1,C) ARG );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_N_CALC
                                                @brief Return a vector that is a normalized version of the argument and its original length
                                                @param[out] OUT0 Destination vector to hold the original length of the vector in ARG1
                                                @param[in] ARG1 Vector
                                                @return A vector that is a normalized version of the argument and its original length */
TgINLINE VEC_N_T(1)                         FCN_V(tgMH_NORM_LEN_N)( VEC_N_T(1,PCU) OUT0, VEC_N_T(1,C) ARG1 );




                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_N_BOUNDS
                                                @brief Return a vector that is assigned the per-element operation floor(ARG0)
                                                @param[in] ARG Vector
                                                @return A vector that is assigned the per-element operation floor(ARG0) */
TgINLINE VEC_N_T(1)                         FCN_V(tgMH_FLR_N)( VEC_N_T(1,C) ARG );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_N_BOUNDS
                                                @brief Return a vector that is assigned the per-element operation ceil(ARG0)
                                                @param[in] ARG Vector
                                                @return A vector that is assigned the per-element operation ceil(ARG0) */
TgINLINE VEC_N_T(1)                         FCN_V(tgMH_CEL_N)( VEC_N_T(1,C) ARG );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_N_BOUNDS
                                                @brief Return a new vector clamping each element of ARG0 between the range of [ARG1,ARG2]
                                                @param[in] ARG Vector
                                                @param[in] ARG Vector for the minimum range
                                                @param[in] ARG Vector for the maximum range
                                                @return A new vector clamping each element of ARG0 between the range of [ARG1,ARG2]  */
TgINLINE VEC_N_T(1)                         FCN_V(tgMH_CLP_N)( VEC_N_T(1,C) ARG0, VEC_N_T(1,C) ARG1, VEC_N_T(1,C) ARG2 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_N_BOUNDS
                                                @brief Return a new vector that clamps the result to [0,1]
                                                @param[in] ARG Vector
                                                @return A new vector that clamps the result to [0,1] */
TgINLINE VEC_N_T(1)                         FCN_V(tgMH_SAT_N)( VEC_N_T(1,C) ARG );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_N_BOUNDS
                                                @brief Return a new vector whose element value is set if the argument element is NaN and zero otherwise
                                                @param[in] ARG Vector
                                                @return A new vector whose element value is set if the argument element is NaN and zero otherwise */
TgINLINE VEC_N_T(1)                         FCN_V(tgMH_NaN_N)( VEC_N_T(1,C) ARG );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_N_BOUNDS
                                                @brief Return a new vector whose element value is set if the argument element is in the range of [-ARG1,ARG1]
                                                @param[in] ARG Vector
                                                @param[in] ARG Vector whose elements representing the bounding range
                                                @return A new vector whose element value is set if the argument element is in the range of [-ARG1,ARG1] */
TgINLINE VEC_N_T(1)                         FCN_V(tgMH_BND_N)( VEC_N_T(1,C) ARG0, VEC_N_T(1,C) ARG1 );
