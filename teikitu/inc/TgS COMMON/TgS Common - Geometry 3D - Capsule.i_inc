/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common - Geometry 3D - Capsule.i_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.17 / »GUID« 3ED3C595-046B-47FB-8785-5C167178CD24 */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Common ===================================================================================================================================================================== */

/* ---- FCN_VO(tgGM_CP_Support_Point) -------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_VO(tgGM_CP_Support_Point)( VEC_OBJ_T(TgTUBE,CPCU) psCP0, VEC_T(1,C) vDN )
{
    TgGEOM_ASSERT_PARAM(FCN_VO(tgGM_TB_Is_Valid)( psCP0 )  && FCN_V(tgMH_Is_Valid_Unit_Vector)( vDN ));

    VEC_T(1,C)      vV0 = FCN_V(tgMH_SGN)( FCN_V(tgMH_DOT)( vDN, psCP0->m_vHAX ) );
    VEC_T(1,C)      vV1 = FCN_V(tgMH_MUL)( vV0, psCP0->m_vHAX );
    VEC_T(1,C)      vV2 = FCN_VO(tgGM_TB_Query_Origin)( psCP0 );
    VEC_T(1,C)      vV3 = FCN_V(tgMH_ADD)( vV2, vV1 );
    VEC_T(1,C)      vV4 = FCN_V(tgMH_MUL)( FCN_V(tgMH_SET1)( psCP0->m_fRadius ), vDN );
    VEC_T(1,C)      vV5 = FCN_V(tgMH_ADD)( vV4, vV3 );
    
    return (vV5);
}


/* ---- FCN_VO(tgGM_CP_Volume) --------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCN_VO(tgGM_CP_Volume)( VEC_OBJ_T(TgTUBE,CPCU) psCP0 )
{
    TgGEOM_ASSERT_PARAM(FCN_VO(tgGM_TB_Is_Valid)( psCP0 ));
    return (VAR_K(KTgTWO_PI)*(psCP0->m_fRadiusSq)*((psCP0->m_fExtent) + TYPE_K(2,0)*(psCP0->m_fRadius) / TYPE_K(3)));
}


/* ---- FCN_VO(tgGM_CP_Area) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCN_VO(tgGM_CP_Area)( VEC_OBJ_T(TgTUBE,CPCU) psCP0 )
{
    TgGEOM_ASSERT_PARAM(FCN_VO(tgGM_TB_Is_Valid)( psCP0 ));
    return (VAR_K(KTgTWO_PI)*(psCP0->m_fRadius)*(TYPE_K(2,0)*(psCP0->m_fExtent) + TYPE_K(2,0)*(psCP0->m_fRadius)));
}


/* ---- FCN_VO(tgGM_CP_BA) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_VO(tgGM_CP_BA)( VEC_OBJ_T(TgBOXAA,PCU) psBA0, VEC_OBJ_T(TgTUBE,CPCU) psCP0 )
{
    TgGEOM_ASSERT_PARAM(FCN_VO(tgGM_TB_Is_Valid)( psCP0 ));

    VEC_T(1,C)      vC0 = FCN_VO(tgGM_TB_Query_Origin)( psCP0 );
    VEC_T(1,C)      vV0 = FCN_V(tgMH_SUB)( vC0, psCP0->m_vHAX );
    VEC_T(1,C)      vV1 = FCN_V(tgMH_ADD)( vC0, psCP0->m_vHAX );

    FCN_VO(tgGM_BA_Init_PT)( psBA0, vV0 );
    FCN_VO(tgGM_BA_Union_PT)( psBA0, vV1 );
    FCN_VO(tgGM_BA_Expand)( psBA0, psCP0->m_fRadius );
}


/* ---- FCN_VO(tgGM_CP_Sweep_BA) ------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_VO(tgGM_CP_Sweep_BA)( VEC_OBJ_T(TgBOXAA,PCU) psBA0, VEC_OBJ_T(TgTUBE,CPCU) psCP0, VEC_T(1,C) vDT )
{
    TgGEOM_ASSERT_PARAM(FCN_VO(tgGM_TB_Is_Valid)( psCP0 ) && FCN_V(tgMH_Is_Valid_Vector)( vDT ));

    FCN_VO(tgGM_CP_BA)( psBA0, psCP0 );
    FCN_VO(tgGM_BA_Sweep)( psBA0, vDT );
}


/* ---- FCN_VO(tgGM_CP_Project) -------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_VO(tgGM_CP_Project)( VEC_T(1,PCU) pvMin, VEC_T(1,PCU) pvMax, VEC_OBJ_T(TgTUBE,CPCU) psCP0, VEC_T(1,C) vDN )
{
    TgGEOM_ASSERT_PARAM(nullptr != pvMin && nullptr != pvMax && FCN_VO(tgGM_TB_Is_Valid)( psCP0 ) && FCN_V(tgMH_Is_Valid_Unit_Vector)( vDN ));

    VEC_T(1,C)      vC0 = FCN_VO(tgGM_TB_Query_Origin)( psCP0 );
    VEC_T(1,C)      vV0 = FCN_V(tgMH_DOT)( vDN, vC0 );
    VEC_T(1,C)      vV1 = FCN_V(tgMH_ABS)( FCN_V(tgMH_DOT)( vDN, psCP0->m_vHAX ) );
    VEC_T(1,C)      vV2 = FCN_V(tgMH_ADD)( vV1, FCN_V(tgMH_SET1)( psCP0->m_fRadius ) );

    *pvMin = FCN_V(tgMH_SUB)( vV0, vV2 );
    *pvMax = FCN_V(tgMH_ADD)( vV0, vV2 );
}


/* ---- FCN_VO(tgGM_CP_Is_Contained) --------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgBOOL FCN_VO(tgGM_CP_Is_Contained)( VEC_OBJ_T(TgTUBE,CPCU) psCP0, VEC_T(1,C) vS0 )
{
    VEC_UN_T(1)                         uDS_UAX, uU0;

    TgGEOM_ASSERT_PARAM(FCN_VO(tgGM_TB_Is_Valid)( psCP0 ) && FCN_V(tgMH_Is_Valid_Point)( vS0 ));

    VEC_T(1,C)      vC0 = FCN_VO(tgGM_TB_Query_Origin)( psCP0 );
    VEC_T(1,C)      vDS = FCN_V(tgMH_SUB)( vS0, vC0 );
    VEC_T(1,C)      vUAX = FCN_V(tgMH_DIV)( psCP0->m_vHAX, FCN_V(tgMH_SET1)( psCP0->m_fExtent ) );

    VEC_UN_1_MEMBER(uDS_UAX) = FCN_V(tgMH_DOT)( vDS, vUAX );

    TgGEOM_ASSERT_PARAM(FCN_V(tgMH_Is_Valid_Unit_Vector)( vUAX ));

    VEC_T(1,C)      vV0 = FCN_V(tgMH_MUL)( FCN_V(tgMH_CLP)( VEC_UN_1_MEMBER(uDS_UAX), FCN_V(tgMH_SET1)( -TYPE_K(1) ), FCN_V(tgMH_SET1)( TYPE_K(1) ) ), vUAX );
    VEC_T(1,C)      vV1 = FCN_V(tgMH_SUB)( vS0, vV0 );

    VEC_UN_1_MEMBER(uU0) = FCN_V(tgMH_LSQ)( vV1 );
    
    return (VEC_S_UN_1_MEMBER(uU0).x <= psCP0->m_fRadiusSq);
}
