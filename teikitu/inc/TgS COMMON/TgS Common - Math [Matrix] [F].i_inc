/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common - Math [Matrix] [F].i_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Common ===================================================================================================================================================================== */

/* ---- FCN_M(tgMH_ADD) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_ADD)( MAT_T(PCU) pxRet, MAT_T(CPCU) pxM0, MAT_T(CPCU) pxM1 )
{
    #define EQN(A)                      FCN_V(tgMH_ADD)( pxM0->m_avRow + A, pxM1->m_avRow + A )

    GENERATE__MAT_ASSIGN
    #undef EQN
}


/* ---- FCN_M(tgMH_MUL) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_MUL)( MAT_T(PCU) pxRet, MAT_T(CPCU) pxM0, MAT_T(CPCU) pxM1 )
{
    #define EQN(A)                      FCN_V(tgMH_MUL)( pxM0->m_avRow + A, pxM1->m_avRow + A )

    GENERATE__MAT_ASSIGN
    #undef EQN
}


/* ---- FCN_M(tgMH_MUL_SM) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_MUL_SM)( MAT_T(PCU) pxRet, VAR_T(C) fScalar, MAT_T(CPCU) pxM1 )
{
    #define EQN(A)                      FCN_V(tgMH_MUL_SV)( fScalar, pxM1->m_avRow + A )

    GENERATE__MAT_ASSIGN
    #undef EQN
}


/* ---- FCN_M(tgMH_MUL_MS) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_MUL_MS)( MAT_T(PCU) pxRet, MAT_T(CPCU) pxM0, VAR_T(C) fScalar )
{
    #define EQN(A)                      FCN_V(tgMH_MUL_VS)( pxM0->m_avRow + A, fScalar )

    GENERATE__MAT_ASSIGN
    #undef EQN
}


/* ---- FCN_M(tgMH_DIV) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_DIV)( MAT_T(PCU) pxRet, MAT_T(CPCU) pxM0, MAT_T(CPCU) pxM1 )
{
    #define EQN(A)                      FCN_V(tgMH_DIV)( pxM0->m_avRow + A, pxM1->m_avRow + A )

    GENERATE__MAT_ASSIGN
    #undef EQN
}


/* ---- FCN_M(tgMH_DIV_SM) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_DIV_SM)( MAT_T(PCU) pxRet, VAR_T(C) fScalar, MAT_T(CPCU) pxM1 )
{
    #define EQN(A)                      FCN_V(tgMH_DIV_SV)( fScalar, pxM1->m_avRow + A )

    GENERATE__MAT_ASSIGN
    #undef EQN
}


/* ---- FCN_M(tgMH_DIV_MS) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_DIV_MS)( MAT_T(PCU) pxRet, MAT_T(CPCU) pxM0, VAR_T(C) fScalar )
{
    #define EQN(A)                      FCN_V(tgMH_DIV_VS)( pxM0->m_avRow + A, fScalar )

    GENERATE__MAT_ASSIGN
    #undef EQN
}


/* ---- FCN_M(tgMH_SUB) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_SUB)( MAT_T(PCU) pxRet, MAT_T(CPCU) pxM0, MAT_T(CPCU) pxM1 )
{
    #define EQN(A)                      FCN_V(tgMH_SUB)( pxM0->m_avRow + A, pxM1->m_avRow + A )

    GENERATE__MAT_ASSIGN
    #undef EQN
}


/* ---- FCN_M(tgMH_NEG) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_NEG)( MAT_T(PCU) pxRet, MAT_T(CPCU) pxM0 )
{
    #define EQN(A)                      FCN_V(tgMH_NEG)( pxM0->m_avRow + A )

    GENERATE__MAT_ASSIGN
    #undef EQN
}


/* ---- FCN_M(tgMH_Set_Euler) ---------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_Set_Euler)( MAT_T(PCU) pxM0, VEC_T(1,CPCU) pvEul )
{
    FCN_M(tgMH_Set_Euler_S)( pxM0, pvEul->x, pvEul->y, pvEul->z );
}


/* ---- M(tgMH_Set_Euler_S) ------------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_Set_Euler_S)( MAT_T(PCU) pxM0, VAR_T(C) fX, VAR_T(C) fY, VAR_T(C) fZ )
{
    VAR_T()                             fSinZ, fCosZ, fSinX, fCosX, fSinY, fCosY;

    FCN_F(tgPM_SINCOS)( &fSinX, &fCosX, fX ); /**< Roll */
    FCN_F(tgPM_SINCOS)( &fSinY, &fCosY, fY ); /**< Pitch */
    FCN_F(tgPM_SINCOS)( &fSinZ, &fCosZ, fZ ); /**< Yaw */

    pxM0->_11 = fCosY*fCosZ;
    pxM0->_12 = fCosY*fSinZ;
    pxM0->_13 = -fSinY;

    pxM0->_21 = fSinX*fSinY*fCosZ - fCosX*fSinZ;
    pxM0->_22 = fSinX*fSinY*fSinZ + fCosX*fCosZ;
    pxM0->_23 = fSinX*fCosY;

    pxM0->_31 = fCosX*fSinY*fCosZ + fSinX*fSinZ;
    pxM0->_32 = fCosX*fSinY*fSinZ - fSinX*fCosZ;
    pxM0->_33 = fCosX*fCosY;
}


/* ---- M(tgMH_Set_EulerX) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_Set_EulerX)( MAT_T(PCU) pxM0, VAR_T(C) fX )
{
    VAR_T()                             fSinX, fCosX;

    FCN_F(tgPM_SINCOS)( &fSinX, &fCosX, fX );

    pxM0->_11 = TYPE_K(1);  pxM0->_12 = TYPE_K(0);      pxM0->_13 = TYPE_K(0);
    pxM0->_21 = TYPE_K(0);  pxM0->_22 = fCosX;          pxM0->_23 = fSinX;
    pxM0->_31 = TYPE_K(0);  pxM0->_32 = -fSinX;         pxM0->_33 = fCosX;
}


/* ---- M(tgMH_Set_EulerY) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_Set_EulerY)( MAT_T(PCU) pxM0, VAR_T(C) fY )
{
    VAR_T()                             fSinY, fCosY;

    FCN_F(tgPM_SINCOS)( &fSinY, &fCosY, fY );

    pxM0->_11 = fCosY;      pxM0->_12 = TYPE_K(0);      pxM0->_13 = -fSinY;
    pxM0->_21 = TYPE_K(0);  pxM0->_22 = TYPE_K(1);      pxM0->_23 = TYPE_K(0);
    pxM0->_31 = fSinY;      pxM0->_32 = TYPE_K(0);      pxM0->_33 = fCosY;
}


/* ---- M(tgMH_Set_EulerZ) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_Set_EulerZ)( MAT_T(PCU) pxM0, VAR_T(C) fZ )
{
    VAR_T()                             fSinZ, fCosZ;

    FCN_F(tgPM_SINCOS)( &fSinZ, &fCosZ, fZ );

    pxM0->_11 = fCosZ;      pxM0->_12 = fSinZ;          pxM0->_13 = TYPE_K(0);
    pxM0->_21 = -fSinZ;     pxM0->_22 = fCosZ;          pxM0->_23 = TYPE_K(0);
    pxM0->_31 = TYPE_K(0);  pxM0->_32 = TYPE_K(0);      pxM0->_33 = TYPE_K(1);
}


/* ---- FCN_M(tgMH_Set_Quat) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_Set_Quat)( MAT_T(PCU) pxM0, VEC_T(1,CPCU) pqR0 )
{
    VAR_T(C)                            fXS = TYPE_K(2,0) * pqR0->x;
    VAR_T(C)                            fYS = TYPE_K(2,0) * pqR0->y;
    VAR_T(C)                            fZS = TYPE_K(2,0) * pqR0->z;

    VAR_T(C)                            fXX = fXS * pqR0->x;
    VAR_T(C)                            fXY = fXS * pqR0->y;
    VAR_T(C)                            fXZ = fXS * pqR0->z;
    VAR_T(C)                            fXW = fXS * pqR0->w;

    VAR_T(C)                            fYY = fYS * pqR0->y;
    VAR_T(C)                            fYZ = fYS * pqR0->z;
    VAR_T(C)                            fYW = fYS * pqR0->w;

    VAR_T(C)                            fZZ = fZS * pqR0->z;
    VAR_T(C)                            fZW = fZS * pqR0->w;

    pxM0->_11 = TYPE_K(1) - (fYY + fZZ);
    pxM0->_12 = fXY + fZW;
    pxM0->_13 = fXZ - fYW;

    pxM0->_21 = fXY - fZW;
    pxM0->_22 = TYPE_K(1) - (fXX + fZZ);
    pxM0->_23 = fYZ + fXW;

    pxM0->_31 = fXZ + fYW;
    pxM0->_32 = fYZ - fXW;
    pxM0->_33 = TYPE_K(1) - (fXX + fYY);
}


/* ---- FCN_M(tgMH_NaN) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgBOOL FCN_M(tgMH_NaN)( MAT_T(CPCU) pxM0 )
{
    TgUINT_F32                          uiIndex;

    for (uiIndex = 0; uiIndex < TEMPLATE__VECTOR_ROW * TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        if (FCN_F(tgPM_NAN)(pxM0->m_aElement[uiIndex]))
        {
            return (true);
        };
    };

    return (false);
}


/* ---- FCN_M(tgMH_CLI) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_CLI)( MAT_T(PCU) pxM0 )
{
    TgSINT_F32                          iIndex;

    for (iIndex = 0; iIndex < TEMPLATE__VECTOR_ROW * TEMPLATE__VECTOR_DIM; ++iIndex)
    {
        pxM0->m_aElement[iIndex] = ((iIndex % TEMPLATE__VECTOR_DIM) == (iIndex / TEMPLATE__VECTOR_DIM)) ? TYPE_K(1) : TYPE_K(0);
    };
}


/* ---- FCN_M(tgMH_SET_ROT) ------------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_SET_ROT)( MAT_T(PCU) pxM0, MAT_T(CPCU) pxM1 )
{
    pxM0->_11 = pxM1->_11; pxM0->_12 = pxM1->_12; pxM0->_13 = pxM1->_13;
    pxM0->_21 = pxM1->_21; pxM0->_22 = pxM1->_22; pxM0->_23 = pxM1->_23;
    pxM0->_31 = pxM1->_31; pxM0->_32 = pxM1->_32; pxM0->_33 = pxM1->_33;
}


/* ---- FCN_M(tgMH_SET_T) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_SET_T)( MAT_T(PCU) pxM0, VEC_T(1,CPCU) pvS0 )
{
    pxM0->_14 = pvS0->m_aData[0];
    pxM0->_24 = pvS0->m_aData[1];
    pxM0->_34 = pvS0->m_aData[2];
}


/* ---- FCN_M(tgMH_SET_S_T) ------------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_SET_S_T)( MAT_T(PCU) pxM0, VAR_T(C) fX, VAR_T(C) fY, VAR_T(C) fZ )
{
    pxM0->_14 = fX;
    pxM0->_24 = fY;
    pxM0->_34 = fZ;
}
