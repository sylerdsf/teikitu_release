/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common - Math [Vector].i_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Common ===================================================================================================================================================================== */

/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*  Public Functions                                                                                                                                                               */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

/* ---- FCN_V(tgMH_SETU) --------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_SETU)( VAR_T(CPCU) pty )
{
    VEC_T(1)                            vResult;

    tgMM_Copy( &vResult, sizeof(vResult), pty, TEMPLATE__VECTOR_DIM*sizeof( VAR_T() ) );

    MSVC_WARN_SUPPRESS( 6001 )
    return (vResult);
}


/* ---- FCN_V(tgMH_SETA) --------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_SETA)( VAR_T(CPCU) pty )
{
    VEC_T(1)                            vResult;

    tgMM_Copy( &vResult, sizeof(vResult), pty, TEMPLATE__VECTOR_DIM*sizeof( VAR_T() ) );

    MSVC_WARN_SUPPRESS( 6001 )
    return (vResult);
}


/* ---- FCN_V(tgMH_SET1) --------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_SET1)( VAR_T(C) fX )
{
    #define EQN(A) fX
    GENERATE__VEC_ASSIGN_EQN
    #undef EQN
}


/* ---- FCN_V(tgMH_RAND) --------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_RAND)( TgVOID )
{
    #define EQN(A) FCN_F(tgCM_RAND)()
    GENERATE__VEC_ASSIGN_EQN
    #undef EQN
}


/* ---- FCN_V(tgMH_PERM) --------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_PERM)( VEC_T(1,CPC) pv0, VEC_T(1,CPC) pv1, TgUINT_F08_CPCU puiMask )
{
    union FCN_V(tgMH_PERM_DATA_ALIAS_OUTPUT)
    {
        VEC_T(1)                                    v;
        TgUINT_F08                                  i[sizeof( VEC_T(1) )];
    }                                   uOut0;

    union FCN_V(tgMH_PERM_DATA_ALIAS_INPUT)
    {
        VEC_T(1,CP)                                 pv;
        TgUINT_F08_CP                               pi;
    }                                   uIn0, uIn1;

    TgUINT_F32                          uiIndex, uiIndex_Element;

    uIn0.pv = pv0;
    uIn1.pv = pv1;

    for (uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        TgUINT_F08_C                        byMask = puiMask[uiIndex];
        TgUINT_F08_C                        uiData_Index = sizeof( VAR_T() ) * (byMask & (KTgPERM_PARAM_SELECT_BIT - 1));
        TgUINT_F08_CP                       pvData = (0 == (byMask & KTgPERM_PARAM_SELECT_BIT)) ? uIn0.pi : uIn1.pi;

        for (uiIndex_Element = 0; uiIndex_Element < sizeof( VAR_T() ); ++uiIndex_Element)
        {
            uOut0.i[uiIndex_Element + uiIndex * sizeof( VAR_T() )] = pvData[uiData_Index + uiIndex_Element];
        };
    };

    return (uOut0.v);
}


/* ---- FCN_V(tgMH_SEL) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_SEL)( VEC_T(1,CPC) pv0, VEC_T(1,CPC) pv1, TgUINT_F32_CPCU puiMask )
{
    union FCN_V(tgMH_SEL_DATA_ALIAS_OUTPUT)
    {
        VEC_T(1)                                    v;
        TgUINT_F32                                  i[sizeof( VEC_T(1) ) / sizeof( TgUINT_F32  )];
    }                                   uOut0;

    union FCN_V(tgMH_SEL_DATA_ALIAS_INPUT)
    {
        VEC_T(1,CP)                                 pv;
        TgUINT_F32_CP                               pi;
    }                                   uIn0, uIn1;

    TgUINT_F32                          uiIndex;

    uIn0.pv = pv0;
    uIn1.pv = pv1;

    for (uiIndex = 0; uiIndex*sizeof( TgUINT_F32  ) < TEMPLATE__VECTOR_DIM*sizeof( VAR_T() ); ++uiIndex)
    {
        uOut0.i[uiIndex] = (uIn0.pi[uiIndex] & ~(puiMask[uiIndex])) | (uIn1.pi[uiIndex] & puiMask[uiIndex]);
    };

    return (uOut0.v);
}


/* ---- FCN_V(tgMH_AND) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_AND)( VEC_T(1,CPC) pv0, VEC_T(1,CPC) pv1 )
{
    union FCN_V(tgMH_AND_DATA_ALIAS_OUTPUT)
    {
        VEC_T(1)                                    v;
        TgUINT_F32                                  i[sizeof( VEC_T(1) ) / sizeof( TgUINT_F32  )];
    }                                   uOut0;

    TgCOMPILER_ASSERT( sizeof( uOut0.v ) == sizeof( uOut0.i ), 0 );

    union FCN_V(tgMH_AND_DATA_ALIAS_INPUT)
    {
        VEC_T(1,CP)                                 pv;
        TgUINT_F32_CP                               pi;
    }                                   uIn0, uIn1;

    TgUINT_F32                          uiIndex;

    uIn0.pv = pv0;
    uIn1.pv = pv1;

    for (uiIndex = 0; uiIndex < sizeof( uOut0.i ) / sizeof( uOut0.i[0] ); ++uiIndex)
    {
        uOut0.i[uiIndex] = uIn0.pi[uiIndex] & uIn1.pi[uiIndex];
    };

    return (uOut0.v);
}


/* ---- FCN_V(tgMH_OR) ----------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_OR)( VEC_T(1,CPC) pv0, VEC_T(1,CPC) pv1 )
{
    union FCN_V(tgMH_OR_DATA_ALIAS_OUTPUT)
    {
        VEC_T(1)                                    v;
        TgUINT_F32                                  i[sizeof( VEC_T(1) ) / sizeof( TgUINT_F32  )];
    }                                   uOut0;

    TgCOMPILER_ASSERT( sizeof( uOut0.v ) == sizeof( uOut0.i ), 0 );

    union FCN_V(tgMH_OR_DATA_ALIAS_INPUT)
    {
        VEC_T(1,CP)                                 pv;
        TgUINT_F32_CP                               pi;
    }                                   uIn0, uIn1;

    TgUINT_F32                          uiIndex;

    uIn0.pv = pv0;
    uIn1.pv = pv1;

    for (uiIndex = 0; uiIndex < sizeof( uOut0.i ) / sizeof( uOut0.i[0] ); ++uiIndex)
    {
        uOut0.i[uiIndex] = uIn0.pi[uiIndex] | uIn1.pi[uiIndex];
    };

    return (uOut0.v);
}


/* ---- FCN_V(tgMH_XOR) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_XOR)( VEC_T(1,CPC) pv0, VEC_T(1,CPC) pv1 )
{
    union FCN_V(tgMH_XOR_DATA_ALIAS_OUTPUT)
    {
        VEC_T(1)                                    v;
        TgUINT_F32                                  i[sizeof( VEC_T(1) ) / sizeof( TgUINT_F32  )];
    }                                   uOut0;

    TgCOMPILER_ASSERT( sizeof( uOut0.v ) == sizeof( uOut0.i ), 0 );

    union FCN_V(tgMH_XOR_DATA_ALIAS_INPUT)
    {
        VEC_T(1,CP)                                 pv;
        TgUINT_F32_CP                               pi;
    }                                   uIn0, uIn1;

    TgUINT_F32                          uiIndex;

    uIn0.pv = pv0;
    uIn1.pv = pv1;

    for (uiIndex = 0; uiIndex < sizeof( uOut0.i ) / sizeof( uOut0.i[0] ); ++uiIndex)
    {
        uOut0.i[uiIndex] = uIn0.pi[uiIndex] ^ uIn1.pi[uiIndex];
    };

    return (uOut0.v);
}


/* ---- FCN_V(tgMH_MAX) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_MAX)( VEC_T(1,CPCU) pv0, VEC_T(1,CPCU) pv1 )
{
    #define EQN(A) FCN_F(tgCM_MAX)( pv0->m_aData[A], pv1->m_aData[A] )
    GENERATE__VEC_ASSIGN_EQN
    #undef EQN
}


/* ---- FCN_V(tgMH_MIN) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_MIN)( VEC_T(1,CPCU) pv0, VEC_T(1,CPCU) pv1 )
{
    #define EQN(A) FCN_F(tgCM_MIN)( pv0->m_aData[A], pv1->m_aData[A] )
    GENERATE__VEC_ASSIGN_EQN
    #undef EQN
}


/* ---- FCN_V(tgMH_ABS) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_ABS)( VEC_T(1,CPCU) pv0 )
{
    #define EQN(A) FCN_F(tgPM_ABS)( pv0->m_aData[A] )
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_SGN) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_SGN)( VEC_T(1,CPCU) pv0 )
{
    #define EQN(A) FCN_F(tgCM_SGN)( pv0->m_aData[A] )
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_CMP_EQ) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
CLANG_WARN_DISABLE_PUSH(float-equal)
TgINLINE VEC_T(1) FCN_V(tgMH_CMP_EQ)( VEC_T(1,CPCU) pv0, VEC_T(1,CPCU) pv1 )
{
    #define EQN(A) (VAR_T())((pv0->m_aData[A] == pv1->m_aData[A]) ? UVAR_MASK : 0)
    GENERATE__VEC_ASSIGN_EQN
    #undef EQN
}
CLANG_WARN_DISABLE_POP(float-equal)


/* ---- FCN_V(tgMH_CMP_NE) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
CLANG_WARN_DISABLE_PUSH(float-equal)
TgINLINE VEC_T(1) FCN_V(tgMH_CMP_NE)( VEC_T(1,CPCU) pv0, VEC_T(1,CPCU) pv1 )
{
    #define EQN(A) (VAR_T())((pv0->m_aData[A] != pv1->m_aData[A]) ? UVAR_MASK : 0)
    GENERATE__VEC_ASSIGN_EQN
    #undef EQN
}
CLANG_WARN_DISABLE_POP(float-equal)


/* ---- FCN_V(tgMH_CMP_GE) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_CMP_GE)( VEC_T(1,CPCU) pv0, VEC_T(1,CPCU) pv1 )
{
    #define EQN(A) (VAR_T())((pv0->m_aData[A] >= pv1->m_aData[A]) ? UVAR_MASK : 0)
    GENERATE__VEC_ASSIGN_EQN
    #undef EQN
}


/* ---- FCN_V(tgMH_CMP_GT) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_CMP_GT)( VEC_T(1,CPCU) pv0, VEC_T(1,CPCU) pv1 )
{
    #define EQN(A) (VAR_T())((pv0->m_aData[A] >  pv1->m_aData[A]) ? UVAR_MASK : 0)
    GENERATE__VEC_ASSIGN_EQN
    #undef EQN
}


/* ---- FCN_V(tgMH_CMP_LE) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_CMP_LE)( VEC_T(1,CPCU) pv0, VEC_T(1,CPCU) pv1 )
{
    #define EQN(A) (VAR_T())((pv0->m_aData[A] <= pv1->m_aData[A]) ? UVAR_MASK : 0)
    GENERATE__VEC_ASSIGN_EQN
    #undef EQN
}


/* ---- FCN_V(tgMH_CMP_LT) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_CMP_LT)( VEC_T(1,CPCU) pv0, VEC_T(1,CPCU) pv1 )
{
    #define EQN(A) (VAR_T())(pv0->m_aData[A] <  pv1->m_aData[A] ? UVAR_MASK : 0)
    GENERATE__VEC_ASSIGN_EQN
    #undef EQN
}


/* ---- FCN_V(tgMH_CMP_EQ_BOOL) -------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
CLANG_WARN_DISABLE_PUSH(float-equal)
TgINLINE TgBOOL FCN_V(tgMH_CMP_EQ_BOOL)( VEC_T(1,CPCU) pv0, VEC_T(1,CPCU) pv1 )
{
    TgUINT_F32                          uiIndex;

    for (uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        if (!(pv0->m_aData[uiIndex] == pv1->m_aData[uiIndex]))
        {
            return (false);
        };
    };

    return (true);
}
CLANG_WARN_DISABLE_POP(float-equal)


/* ---- FCN_V(tgMH_CMP_NE_BOOL) -------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
CLANG_WARN_DISABLE_PUSH(float-equal)
TgINLINE TgBOOL FCN_V(tgMH_CMP_NE_BOOL)( VEC_T(1,CPCU) pv0, VEC_T(1,CPCU) pv1 )
{
    TgUINT_F32                          uiIndex;

    for (uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        if (!(pv0->m_aData[uiIndex] != pv1->m_aData[uiIndex]))
        {
            return (false);
        };
    };

    return (true);
}
CLANG_WARN_DISABLE_POP(float-equal)


/* ---- FCN_V(tgMH_CMP_GE_BOOL) -------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgBOOL FCN_V(tgMH_CMP_GE_BOOL)( VEC_T(1,CPCU) pv0, VEC_T(1,CPCU) pv1 )
{
    TgUINT_F32                          uiIndex;

    for (uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        if (!(pv0->m_aData[uiIndex] >= pv1->m_aData[uiIndex]))
        {
            return (false);
        };
    };

    return (true);
}


/* ---- FCN_V(tgMH_CMP_GT_BOOL) -------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgBOOL FCN_V(tgMH_CMP_GT_BOOL)( VEC_T(1,CPCU) pv0, VEC_T(1,CPCU) pv1 )
{
    TgUINT_F32                          uiIndex;

    for (uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        if (!(pv0->m_aData[uiIndex] > pv1->m_aData[uiIndex]))
        {
            return (false);
        };
    };

    return (true);
}


/* ---- FCN_V(tgMH_CMP_LE_BOOL) -------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgBOOL FCN_V(tgMH_CMP_LE_BOOL)( VEC_T(1,CPCU) pv0, VEC_T(1,CPCU) pv1 )
{
    TgUINT_F32                          uiIndex;

    for (uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        if (!(pv0->m_aData[uiIndex] <= pv1->m_aData[uiIndex]))
        {
            return (false);
        };
    };

    return (true);
}


/* ---- FCN_V(tgMH_CMP_LT_BOOL) -------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgBOOL FCN_V(tgMH_CMP_LT_BOOL)( VEC_T(1,CPCU) pv0, VEC_T(1,CPCU) pv1 )
{
    TgUINT_F32                          uiIndex;

    for (uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        if (!(pv0->m_aData[uiIndex] < pv1->m_aData[uiIndex]))
        {
            return (false);
        };
    };

    return (true);
}
