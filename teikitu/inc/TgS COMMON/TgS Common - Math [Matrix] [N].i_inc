/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common - Math [Matrix] [N].i_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Common ===================================================================================================================================================================== */

/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*  Public Functions                                                                                                                                                               */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

/* ---- FCN_M(tgMH_CLR_N) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_CLR_N)( MAT_N_T(PCU) pxM0 )
{
    tgMM_Set_U08_0x00( pxM0, sizeof( MAT_N_T() ) );
}


/* ---- FCN_M(tgMH_MAX_N) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_MAX_N)( MAT_N_T(PCU) pxRet, MAT_N_T(CPCU) pxM0, MAT_N_T(CPCU) pxM1 )
{
    #define EQN(A)                      FCN_V(tgMH_MAX_N)( pxM0->m_avRow[A], pxM1->m_avRow[A] )

    GENERATE__MAT_ASSIGN
    #undef EQN
}


/* ---- FCN_M(tgMH_MIN_N) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_MIN_N)( MAT_N_T(PCU) pxRet, MAT_N_T(CPCU) pxM0, MAT_N_T(CPCU) pxM1 )
{
    #define EQN(A)                      FCN_V(tgMH_MIN_N)( pxM0->m_avRow[A], pxM1->m_avRow[A] )

    GENERATE__MAT_ASSIGN
    #undef EQN
}


/* ---- FCN_M(tgMH_AND_N) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_AND_N)( MAT_N_T(PCU) pxRet, MAT_N_T(CPCU) pxM0, MAT_N_T(CPCU) pxM1 )
{
    #define EQN(A)                      FCN_V(tgMH_AND_N)( pxM0->m_avRow[A], pxM1->m_avRow[A] )

    GENERATE__MAT_ASSIGN
    #undef EQN
}


/* ---- FCN_M(tgMH_OR_N) --------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_OR_N)( MAT_N_T(PCU) pxRet, MAT_N_T(CPCU) pxM0, MAT_N_T(CPCU) pxM1 )
{
    #define EQN(A)                      FCN_V(tgMH_OR_N)( pxM0->m_avRow[A], pxM1->m_avRow[A] )

    GENERATE__MAT_ASSIGN
    #undef EQN
}


/* ---- FCN_M(tgMH_XOR_N) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_XOR_N)( MAT_N_T(PCU) pxRet, MAT_N_T(CPCU) pxM0, MAT_N_T(CPCU) pxM1 )
{
    #define EQN(A)                      FCN_V(tgMH_XOR_N)( pxM0->m_avRow[A], pxM1->m_avRow[A] )

    GENERATE__MAT_ASSIGN
    #undef EQN
}
