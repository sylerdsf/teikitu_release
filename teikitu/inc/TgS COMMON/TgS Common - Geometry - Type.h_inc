/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common - Geometry - Type.h_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.17 / »GUID« 3ED3C595-046B-47FB-8785-5C167178CD24 */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */

#if defined(TGS_COMMON_GEOMETRY_TYPE_HINC)
    #error This file should be included by TGS_COMMON_GEOMETRY_TYPE_H
#endif

#if defined(TEMPLATE__ENABLE_INTEGER)

    #error Geometry is assumed to be floating point

#else

    #if !defined (ENABLE_RELOAD_GUARD)
        #define ENABLE_RELOAD_GUARD
        #if !defined(TEMPLATE__TYPE_SIZE)
            #if TgCOMPILE__NON_NATIVE_VECTOR_AS_NATIVE
                #define TEMPLATE__TYPE_SIZE 64
                #include __FILE__
                #undef TEMPLATE__TYPE_SIZE
            #endif
            #define TEMPLATE__TYPE_SIZE 32
        #endif
        #undef ENABLE_RELOAD_GUARD
    #endif

#endif

#include "TgS COMMON/TgS Common - Base - Defines [Template] [Math].h_inc"


/* == Common ===================================================================================================================================================================== */

/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*  Public Types                                                                                                                                                                   */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

TgTYPE_STRUCT( VEC_OBJ_T(TgDELTA), )
{
    VEC_T(1)                                    m_vUDT; /* Unit Displacement */
    VEC_T(1)                                    m_vDT; /* Displacement */
    VEC_T(1)                                    m_vMag_DT; /* Displacement Magnitude */
    VEC_T(1)                                    m_vDT_DT; /* Displacement Magnitude Squared */
    VEC_T(1)                                    m_vInv_Mag_DT; /* Inverse Magnitude of Displacement */
};


TgTYPE_STRUCT( VEC_OBJ_T(TgRECT2D), )
{
    VEC_UN_T(1)                                 m_uRect;
};


TgTYPE_STRUCT( VEC_OBJ_T(TgBOXAA), )
{
    VEC_UN_T(1)                                 m_uMin, m_uMax;
};


TgTYPE_STRUCT( VEC_OBJ_T(TgBOX), )
{
    VEC_T(3)                                    m_mReference_Frame; /**< Full reference frame (ortho-normal basis and position) */
    VEC_UN_T(1)                                 m_uExtent;
};


TgTYPE_STRUCT( VEC_OBJ_T(TgCIRCLE), )
{
    VEC_T(3)                                    m_mReference_Frame; /**< Full reference frame (ortho-normal basis and position) */
    VAR_T()                                     m_fRadius; /**< Radius of the circle. */
    VAR_T()                                     m_fRadiusSq;/**< Radius Squared of the circle. */
#if 0 != STRUCT_PAD(8,0)
    TgUINT_E08                                  m_iPad[STRUCT_PAD(8,0)];
#endif
};


TgTYPE_STRUCT( VEC_OBJ_T(TgDISK), )
{
    VEC_T(3)                                    m_mReference_Frame; /**< Full reference frame (ortho-normal basis and position) */
    VAR_T()                                     m_fRadius; /**< Radius of the disk. */
    VAR_T()                                     m_fRadiusSq;/**< Radius Squared of the disk. */
#if 0 != STRUCT_PAD(8,0)
    TgUINT_E08                                  m_iPad[STRUCT_PAD(8,0)];
#endif
};


TgTYPE_STRUCT( VEC_OBJ_T(TgELLIPSE), )
{
    VEC_T(3)                                    m_mReference_Frame; /**< Full reference frame (ortho-normal basis and position) */
    VAR_T()                                     m_fMajor; /**< Major radius. */
    VAR_T()                                     m_fMinor; /**< Minor radius. */
#if 0 != STRUCT_PAD(8,0)
    TgUINT_E08                                  m_iPad[STRUCT_PAD(8,0)];
#endif
};


TgTYPE_STRUCT( VEC_OBJ_T(TgLINE), )
{
    VEC_T(1)                                    m_vOrigin; /**< Origin of the line segment (start point). */
    VEC_T(1)                                    m_vDirN; /**< The line direction. */
};


TgTYPE_STRUCT( VEC_OBJ_T(TgMESH_SIMPLE), )
{
    VEC_T(1,P)                                  m_pvVert_List;
    TgUINT_E16_P                                m_puiIndx_List;
    TgRSIZE                                     m_nuiVert; /**< Number of vertices in the mesh */
    TgRSIZE                                     m_nuiIndx; /**< Number of indices in the mesh, can be zero depending on primitive expectations */
};


TgTYPE_STRUCT( VEC_OBJ_T(TgMESH_BA), )
{
    VEC_OBJ_T(TgMESH_SIMPLE)                    m_sMS; /**< Vertex and Face Data */

    VEC_T(1,P)                                  m_pvVert_DT; /**< Vertex delta for a swept mesh */
    VEC_OBJ_T(TgBOXAA,P)                        m_psBA; /**< Bounding box per face */
    VEC_OBJ_T(TgDELTA)                          m_sDT; /**< Linear displacement vector, valid only for linear sweep. */
    VEC_T(1)                                    m_vCG[2]; /**< Centre of gravity at sweep interval. */
    TgUINT_E32_P                                m_puiFlags; /**< Collision flags per face */
    TgUINT_E32                                  m_nuiFace; /**< Number of faces */
    ETgSWEEP_TYPE                               m_enSweep; /**< Static, Linear or Rotational test indicator. */
};


TgTYPE_STRUCT( VEC_OBJ_T(TgMESH_BVT), )
{
    VEC_OBJ_T(TgMESH_SIMPLE)                    m_sMS; /**< Vertex and Face Data */
};


TgTYPE_STRUCT( VEC_OBJ_T(TgPARALLELOGRAM), )
{
    VEC_T(1)                                    m_vOrigin; /**< Common point of two of the parallelogram's edges. */
    VEC_T(1)                                    m_avEdge[2]; /**< The two edge's sourced at the origin point. */
    VEC_T(1)                                    m_vNormal; /**< The normal for the plane defined by the two edges. */
    VEC_T(1)                                    m_avEdge_Normal[2]; /**< The normal of the plane defined by an edge and normal. */
};


TgTYPE_STRUCT( VEC_OBJ_T(TgPARTICLE), )
{
    VEC_T(1)                                    m_vPos; /**< Initial position. */
    VEC_T(1)                                    m_vVel; /**< Initial velocity. */
    VEC_T(1)                                    m_vAccel; /**< Initial acceleration. */
};


TgTYPE_STRUCT( VEC_OBJ_T(TgPLANE), )
{
    VEC_UN_T(1)                                 m_uPlnEqN; /**< Store the plane constant in the last element of the vector. */
    VEC_T(1)                                    m_vNormal; /**< Plane unit-normal. */
    VEC_UN_T(1)                                 m_uD; /**< Plane constant. */
};


TgTYPE_STRUCT( VEC_OBJ_T(TgRAY), )
{
    VEC_T(1)                                    m_vOrigin; /**< Origin of the line segment (start point). */
    VEC_T(1)                                    m_vDirN; /**< The line direction. */
};


TgTYPE_STRUCT( VEC_OBJ_T(TgRECTANGLE), )
{
    VEC_T(1)                                    m_vOrigin; /**< Common point of two of the rectangle's edges. */
    VEC_T(1)                                    m_avEdge[2]; /**< The two edge's sourced at the origin point. */
    VEC_T(1)                                    m_vNormal; /**< The normal for the plane defined by the two edges. */
};


TgTYPE_STRUCT( VEC_OBJ_T(TgSEGMENT), )
{
    VEC_T(1)                                    m_vOrigin; /**< Origin of the line segment (start point). */
    VEC_T(1)                                    m_vDirN; /**< The line direction. */
};


TgTYPE_STRUCT( VEC_OBJ_T(TgSPHERE), )
{
    VEC_T(1)                                    m_vOrigin; /**< Origin of the sphere. */
    VEC_UN_T(1)                                 m_uRadius; /**< Radius of the sphere - [radius, radius, radius, 0]. */
    VEC_UN_T(1)                                 m_uRadiusSq; /**< Radius squared of the sphere. */
};


TgTYPE_STRUCT( VEC_OBJ_T(TgTORUS), )
{
    VEC_OBJ_T(TgCIRCLE)                         m_sCI;
    VAR_T()                                     m_fRI; /**< Radius of the tube. */
#if 0 != STRUCT_PAD(12,8)
    TgUINT_E08                                  m_iPad[STRUCT_PAD(12,8)];
#endif
};


TgTYPE_STRUCT( VEC_OBJ_T(TgPTRI), )
{
    VEC_T(1)                                    m_avPoint[3]; /**< Three vertices defining the triangle */
    VEC_T(1)                                    m_vNormal; /**< Triangle normal, not necessarily valid. */
};


TgTYPE_STRUCT( VEC_OBJ_T(TgETRI), )
{
    VEC_OBJ_T(TgPTRI)                           m_sPT;
    VEC_T(1)                                    m_avEdge[3]; /**< [0-1], [1-2], [2-0] segments between vertices */
};


TgTYPE_STRUCT( VEC_OBJ_T(TgCTRI), )
{
    VEC_OBJ_T(TgETRI)                           m_sET;
    TgUINT_E32                                  m_bfFlags; /**< Bitfield container for a collection of booleans. */
#if 0 != STRUCT_PAD(12,12)
    TgUINT_E08                                  m_iPad[STRUCT_PAD(12,12)];
#endif
};


TgTYPE_STRUCT( VEC_OBJ_T(TgSTRI), )
{
    VEC_OBJ_T(TgCTRI)                           m_sCT;
    VEC_OBJ_T(TgPLANE)                          m_avPlane[3];
};


/* Tube definition - centre point and the vector such that its sum and difference with the origin are the two end points. */
TgTYPE_STRUCT( VEC_OBJ_T(TgTUBE), )
{
    VEC_T(3)                                    m_mReference_Frame; /**< Full reference frame (ortho-normal basis and position) */
    VEC_T(1)                                    m_vHAX; /**< Primary half-axis of the tube */
    VEC_OBJ_T(TgSEGMENT)                        m_sAX; /**< Segment from end-to-end of the tube */
    VAR_T()                                     m_fRadius; /**< Radius of the tube */
    VAR_T()                                     m_fExtent; /**< Half-height of the tube */
    VAR_T()                                     m_fRadiusSq; /**< Radius Squared */
#if 0 != STRUCT_PAD(4,8)
    TgUINT_E08                                  m_iPad[STRUCT_PAD(4,8)];
#endif
};



/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*  Public Functions                                                                                                                                                               */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

TgINLINE TgVOID                             FCN_VO(tgGM_DT_Reset)( VEC_OBJ_T(TgDELTA,PCU) NONULL );
TgINLINE TgBOOL                             FCN_VO(tgGM_DT_Is_Valid)( VEC_OBJ_T(TgDELTA,CPCU) );
TgINLINE TgVOID                             FCN_VO(tgGM_DT_TX)( VEC_OBJ_T(TgDELTA,PCU), VEC_T(3,CPCU) );
TgINLINE TgVOID                             FCN_VO(tgGM_DT_Copy_TX)( VEC_OBJ_T(TgDELTA,PCU), VEC_OBJ_T(TgDELTA,CPCU), VEC_T(3,CPCU) );
TgINLINE TgVOID                             FCN_VO(tgGM_DT_Set)( VEC_OBJ_T(TgDELTA,PCU), VEC_T(1,C) );


/* =============================================================================================================================================================================== */

#include "TgS COMMON/TgS Common - Base - Defines [Template] [Math].h_inc"
