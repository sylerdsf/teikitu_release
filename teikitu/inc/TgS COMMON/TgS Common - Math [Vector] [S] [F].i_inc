/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common - Math [Vector] [S] [F].i_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.17 / »GUID« 3ED3C595-046B-47FB-8785-5C167178CD24 */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Common ===================================================================================================================================================================== */

/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*  Public Functions                                                                                                                                                               */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

/* ---- FCN_V(tgMH_Is_Valid_S) --------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgBOOL FCN_V(tgMH_Is_Valid_S)( VEC_S_T(1,C) vARG_0 )
{
    return (
          !FCN_F(tgPM_NAN)( vARG_0.m_aData[0] )
    #if (TEMPLATE__VECTOR_DIM > 1)
       && !FCN_F(tgPM_NAN)( vARG_0.m_aData[1] )
    #endif
    #if (TEMPLATE__VECTOR_DIM > 2)
       && !FCN_F(tgPM_NAN)( vARG_0.m_aData[2] )
    #endif
    #if (TEMPLATE__VECTOR_DIM > 3)
       && !FCN_F(tgPM_NAN)( vARG_0.m_aData[3] )
    #endif
    #if (TEMPLATE__VECTOR_DIM > 4)
       && !FCN_F(tgPM_NAN)( vARG_0.m_aData[4] )
    #endif
    #if (TEMPLATE__VECTOR_DIM > 5)
       && !FCN_F(tgPM_NAN)( vARG_0.m_aData[5] )
    #endif
    #if (TEMPLATE__VECTOR_DIM > 6)
       && !FCN_F(tgPM_NAN)( vARG_0.m_aData[6] )
    #endif
    #if (TEMPLATE__VECTOR_DIM > 7)
       && !FCN_F(tgPM_NAN)( vARG_0.m_aData[7] )
    #endif
    #if (TEMPLATE__VECTOR_DIM > 8)
       && !FCN_F(tgPM_NAN)( vARG_0.m_aData[8] )
    #endif
    #if (TEMPLATE__VECTOR_DIM > 9)
       && !FCN_F(tgPM_NAN)( vARG_0.m_aData[9] )
    #endif
    #if (TEMPLATE__VECTOR_DIM > 10)
       && !FCN_F(tgPM_NAN)( vARG_0.m_aData[10] )
    #endif
    #if (TEMPLATE__VECTOR_DIM > 11)
       && !FCN_F(tgPM_NAN)( vARG_0.m_aData[11] )
    #endif
    #if (TEMPLATE__VECTOR_DIM > 12)
       && !FCN_F(tgPM_NAN)( vARG_0.m_aData[12] )
    #endif
    #if (TEMPLATE__VECTOR_DIM > 13)
       && !FCN_F(tgPM_NAN)( vARG_0.m_aData[13] )
    #endif
    #if (TEMPLATE__VECTOR_DIM > 14)
       && !FCN_F(tgPM_NAN)( vARG_0.m_aData[14] )
    #endif
    #if (TEMPLATE__VECTOR_DIM > 15)
       && !FCN_F(tgPM_NAN)( vARG_0.m_aData[15] )
    #endif
    #if (TEMPLATE__VECTOR_DIM > 16)
        #error DIM Exceeds expectations
    #endif
    );
}


/* ---- FCN_V(tgMH_MAD_S) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_S_T(1) FCN_V(tgMH_MAD_S)( VEC_S_T(1,C) vARG_0, VEC_S_T(1,C) vARG_1, VEC_S_T(1,C) vARG_2 )
{
    #define EQN(A) vARG_0.m_aData[A]*vARG_1.m_aData[A] + vARG_2.m_aData[A]
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_NMS_S) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_S_T(1) FCN_V(tgMH_NMS_S)( VEC_S_T(1,C) vARG_0, VEC_S_T(1,C) vARG_1, VEC_S_T(1,C) vARG_2 )
{
    #define EQN(A) -(vARG_0.m_aData[A]*vARG_1.m_aData[A] - vARG_2.m_aData[A])
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_DOT_S) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCN_V(tgMH_DOT_S)( VEC_S_T(1,C) vARG_0, VEC_S_T(1,C) vARG_1 )
{
    return (
          vARG_0.m_aData[0] * vARG_1.m_aData[0]
    #if (TEMPLATE__VECTOR_DIM > 1)
        + vARG_0.m_aData[1] * vARG_1.m_aData[1]
    #endif
    #if (TEMPLATE__VECTOR_DIM > 2)
        + vARG_0.m_aData[2] * vARG_1.m_aData[2]
    #endif
    #if (TEMPLATE__VECTOR_DIM > 3)
        + vARG_0.m_aData[3] * vARG_1.m_aData[3]
    #endif
    #if (TEMPLATE__VECTOR_DIM > 4)
        + vARG_0.m_aData[4] * vARG_1.m_aData[4]
    #endif
    #if (TEMPLATE__VECTOR_DIM > 5)
        + vARG_0.m_aData[5] * vARG_1.m_aData[5]
    #endif
    #if (TEMPLATE__VECTOR_DIM > 6)
        + vARG_0.m_aData[6] * vARG_1.m_aData[6]
    #endif
    #if (TEMPLATE__VECTOR_DIM > 7)
        + vARG_0.m_aData[7] * vARG_1.m_aData[7]
    #endif
    #if (TEMPLATE__VECTOR_DIM > 8)
        + vARG_0.m_aData[8] * vARG_1.m_aData[8]
    #endif
    #if (TEMPLATE__VECTOR_DIM > 9)
        + vARG_0.m_aData[9] * vARG_1.m_aData[9]
    #endif
    #if (TEMPLATE__VECTOR_DIM > 10)
        + vARG_0.m_aData[10] * vARG_1.m_aData[10]
    #endif
    #if (TEMPLATE__VECTOR_DIM > 11)
        + vARG_0.m_aData[11] * vARG_1.m_aData[11]
    #endif
    #if (TEMPLATE__VECTOR_DIM > 12)
        + vARG_0.m_aData[12] * vARG_1.m_aData[12]
    #endif
    #if (TEMPLATE__VECTOR_DIM > 13)
        + vARG_0.m_aData[13] * vARG_1.m_aData[13]
    #endif
    #if (TEMPLATE__VECTOR_DIM > 14)
        + vARG_0.m_aData[14] * vARG_1.m_aData[14]
    #endif
    #if (TEMPLATE__VECTOR_DIM > 15)
        + vARG_0.m_aData[15] * vARG_1.m_aData[15]
    #endif
    #if (TEMPLATE__VECTOR_DIM > 16)
        #error DIM Exceeds expectations
    #endif
    );
}


/* ---- FCN_V(tgMH_MUL_S) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_S_T(1) FCN_V(tgMH_MUL_S)( VEC_S_T(1,C) vARG_0, VEC_S_T(1,C) vARG_1 )
{
    #define EQN(A) vARG_0.m_aData[A] * vARG_1.m_aData[A]
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_DIV_S) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_S_T(1) FCN_V(tgMH_DIV_S)( VEC_S_T(1,C) vARG_0, VEC_S_T(1,C) vARG_1 )
{
    #define EQN(A) vARG_0.m_aData[A] / vARG_1.m_aData[A]
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_RCP_S) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_S_T(1) FCN_V(tgMH_RCP_S)( VEC_S_T(1,C) vARG_0 )
{
    #define EQN(A) TYPE_K(1) / vARG_0.m_aData[A]
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_LRP_S) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_S_T(1) FCN_V(tgMH_LRP_S)( VEC_S_T(1,C) vARG_0, VEC_S_T(1,C) vARG_1, VEC_S_T(1,C) vARG_T )
{
    return (FCN_V(tgMH_ADD_S)( vARG_0, FCN_V(tgMH_MUL_S)( FCN_V(tgMH_SUB_S)( vARG_1, vARG_0 ), vARG_T ) ));
}


/* ---- FCN_V(tgMH_LSQ_S) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCN_V(tgMH_LSQ_S)( VEC_S_T(1,C) vARG_0 )
{
    return (FCN_V(tgMH_DOT_S)( vARG_0, vARG_0 ) );
}


/* ---- FCN_V(tgMH_LEN_S) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCN_V(tgMH_LEN_S)( VEC_S_T(1,C) vARG_0 )
{
    return (FCN_F(tgPM_SQRT)( FCN_V(tgMH_LSQ_S)( vARG_0 )) );
}


/* ---- FCN_V(tgMH_NEG_S) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_S_T(1) FCN_V(tgMH_NEG_S)( VEC_S_T(1,C) vARG_0 )
{
    #define EQN(A) vARG_0.m_aData[A] * -TYPE_K(1)
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_SQRT_S) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_S_T(1) FCN_V(tgMH_SQRT_S)( VEC_S_T(1,C) vARG_0 )
{
    #define EQN(A) FCN_F(tgPM_SQRT)( vARG_0.m_aData[A] )
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_RSQRT_S) ------------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_S_T(1) FCN_V(tgMH_RSQRT_S)( VEC_S_T(1,C) vARG_0 )
{
    #define EQN(A) TYPE_K(1) / FCN_F(tgPM_SQRT)( vARG_0.m_aData[A] )
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


#if (TEMPLATE__VECTOR_DIM==3)
/* ---- FCN_V(tgMH_NORM_LEN_S) --------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_S_T(1) FCN_V(tgMH_NORM_LEN_S)( VAR_T(P) pfLength, VEC_S_T(1,C) vS0 )
{
    VEC_S_T(1)                          vRet;

    VAR_T(C)        fa0 = FCN_F(tgPM_ABS)( vS0.m_aData[0] );
    VAR_T(C)        fa1 = FCN_F(tgPM_ABS)( vS0.m_aData[1] );
    VAR_T(C)        fa2 = FCN_F(tgPM_ABS)( vS0.m_aData[2] );
    VAR_T(C)        fM0 = FCN_F(tgCM_MAX)( fa0, fa1 );
    VAR_T(C)        fM1 = FCN_F(tgCM_MAX)( fa1, fa2 );
    VAR_T(C)        fMX = FCN_F(tgCM_MAX)( fM0, fM1 );
    VAR_T(C)        f0 = vS0.m_aData[0] / fMX;
    VAR_T(C)        f1 = vS0.m_aData[1] / fMX;
    VAR_T(C)        f2 = vS0.m_aData[2] / fMX;
    VAR_T(C)        fLength = FCN_F(tgPM_SQRT)( f0*f0 + f1*f1 + f2*f2 );
    VAR_T(C)        fInvLength = fLength > VAR_K(KTgEPS) ? TYPE_K(1) / fLength : TYPE_K(0);

    *pfLength = fLength*fMX;

    vRet.x = f0*fInvLength;
    vRet.y = f1*fInvLength;
    vRet.z = f2*fInvLength;

    return (vRet);
}
#elif (TEMPLATE__VECTOR_DIM==4)
/* ---- FCN_V(tgMH_NORM_LEN_S) --------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_S_T(1) FCN_V(tgMH_NORM_LEN_S)( VAR_T(P) pfLength, VEC_S_T(1,C) vS0 )
{
    VAR_T(C)        fa0 = FCN_F(tgPM_ABS)( vS0.m_aData[0] );
    VAR_T(C)        fa1 = FCN_F(tgPM_ABS)( vS0.m_aData[1] );
    VAR_T(C)        fa2 = FCN_F(tgPM_ABS)( vS0.m_aData[2] );
    VAR_T(C)        fa3 = FCN_F(tgPM_ABS)( vS0.m_aData[3] );
    VAR_T(C)        fM0 = FCN_F(tgCM_MAX)( fa0, fa1 );
    VAR_T(C)        fM1 = FCN_F(tgCM_MAX)( fa2, fa3 );
    VAR_T(C)        fMX = FCN_F(tgCM_MAX)( fM0, fM1 );
    VAR_T(C)        f0 = vS0.m_aData[0] / fMX;
    VAR_T(C)        f1 = vS0.m_aData[1] / fMX;
    VAR_T(C)        f2 = vS0.m_aData[2] / fMX;
    VAR_T(C)        f3 = vS0.m_aData[3] / fMX;
    VAR_T(C)        fLength = FCN_F(tgPM_SQRT)( f0*f0 + f1*f1 + f2*f2 + f3*f3 );
    VAR_T(C)        fInvLength = fLength > VAR_K(KTgEPS) ? TYPE_K(1) / fLength : TYPE_K(0);

    *pfLength = fLength*fMX;

    return (FCN_V(tgMH_Init_ELEM_S)( f0*fInvLength, f1*fInvLength, f2*fInvLength, f3*fInvLength) );
}
#else
/* ---- FCN_V(tgMH_NORM_LEN_S) --------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_S_T(1) FCN_V(tgMH_NORM_LEN_S)( VAR_T(P) pfLength, VEC_S_T(1,C) vARG_0 )
{
    *pfLength = FCN_V(tgMH_LEN_S)( vARG_0 );
    return (FCN_V(tgMH_DIV_VS_S)( vARG_0, *pfLength ) );
}
#endif


/* ---- FCN_V(tgMH_NORM_S) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_S_T(1) FCN_V(tgMH_NORM_S)( VEC_S_T(1,C) vARG_0 )
{
    VAR_T()                         fLength;

    return (FCN_V(tgMH_NORM_LEN_S)( &fLength, vARG_0 ) );
}


/* ---- FCN_V(tgMH_CP_SGN_S) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_S_T(1) FCN_V(tgMH_CP_SGN_S)( VEC_S_T(1,C) vARG_0, VEC_S_T(1,C) vARG_1 )
{
    #define EQN(A) FCN_F(tgPM_COPY_SIGN)( vARG_0.m_aData[A], vARG_1.m_aData[A] )
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_PRX_SGN_S) ---------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_S_T(1) FCN_V(tgMH_PRX_SGN_S)( VEC_S_T(1,C) vARG_0 )
{
    #define EQN(A) FCN_F(tgCM_NR0)( vARG_0.m_aData[A] ) ? TYPE_K(0) : FCN_F(tgCM_SGN)( vARG_0.m_aData[A] )
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_FLR_S) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_S_T(1) FCN_V(tgMH_FLR_S)( VEC_S_T(1,C) vARG_0 )
{
    #define EQN(A) FCN_F(tgPM_FLOOR)( vARG_0.m_aData[A] )
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_CEL_S) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_S_T(1) FCN_V(tgMH_CEL_S)( VEC_S_T(1,C) vARG_0 )
{
    #define EQN(A) FCN_F(tgPM_CEIL)( vARG_0.m_aData[A] )
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_CLP_S) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_S_T(1) FCN_V(tgMH_CLP_S)( VEC_S_T(1,C) vARG_0, VEC_S_T(1,C) vMin, VEC_S_T(1,C) vMax )
{
    #define EQN(A) FCN_F(tgCM_CLP)( vARG_0.m_aData[A], vMin.m_aData[A], vMax.m_aData[A] )
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_SAT_S) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_S_T(1) FCN_V(tgMH_SAT_S)( VEC_S_T(1,C) vARG_0 )
{
    #define EQN(A) FCN_F(tgCM_CLP)( vARG_0.m_aData[A], TYPE_K(0), TYPE_K(1) )
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_NAN_S) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgBOOL FCN_V(tgMH_NAN_S)( VEC_S_T(1,C) vARG_0 )
{
    TgUINT_F32                          uiIndex = 0;

    for (uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        if (FCN_F(tgPM_NAN)( vARG_0.m_aData[uiIndex] ))
        {
            return (true);
        };
    };

    return (false);
}


/* ---- FCN_V(tgMH_BND_S) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgBOOL FCN_V(tgMH_BND_S)( VEC_S_T(1,C) vARG_0, VEC_S_T(1,C) vBound )
{
    for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        if ((-vBound.m_aData[uiIndex] > vARG_0.m_aData[uiIndex]) || (vARG_0.m_aData[uiIndex] > vBound.m_aData[uiIndex]))
        {
            return (false);
        };
    };

    return (true);
}


/* ---- FCN_V(tgMH_Test_Interval_S) ---------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgBOOL FCN_V(tgMH_Test_Interval_S)( VEC_S_T(1,C) vARG_0, VEC_S_T(1,C) vMin, VEC_S_T(1,C) vMax )
{
    for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        if ((vMin.m_aData[uiIndex] > vARG_0.m_aData[uiIndex]) || (vARG_0.m_aData[uiIndex] > vMax.m_aData[uiIndex]))
        {
            return (false);
        };
    };

    return (true);
}


/* ---- FCN_V(tgMH_PRX_CMP_EQ_S) ------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgBOOL FCN_V(tgMH_PRX_CMP_EQ_S)( VEC_S_T(1,C) vARG_0, VEC_S_T(1,C) vARG_1 )
{
    VEC_S_T(1)                          vDiff;

    vDiff = FCN_V(tgMH_SUB_S)( vARG_0, vARG_1 );

    for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        if (!FCN_F(tgCM_NR0)( vDiff.m_aData[uiIndex] ))
        {
            return (false);
        };
    };

    return (true);
}


/* ---- FCN_V(tgMH_NR0_S) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgBOOL FCN_V(tgMH_NR0_S)( VEC_S_T(1,C) vARG_0 )
{
    for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        if (!FCN_F(tgCM_NR0)( vARG_0.m_aData[uiIndex] ))
        {
            return (false);
        };
    };

    return (true);
}


/* ---- FCN_V(tgMH_NR1_S) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgBOOL FCN_V(tgMH_NR1_S)( VEC_S_T(1,C) vARG_0 )
{
    for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        if (!FCN_F(tgCM_NR1)( vARG_0.m_aData[uiIndex] ))
        {
            return (false);
        };
    };

    return (true);
}


/* ---- FCN_V(tgMH_MAD_SVV_S) ---------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_S_T(1) FCN_V(tgMH_MAD_SVV_S)( VAR_T(C) fScalar, VEC_S_T(1,C) vARG_1, VEC_S_T(1,C) vARG_2 )
{
    #define EQN(A) fScalar*vARG_1.m_aData[A] + vARG_2.m_aData[A]
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_MAD_VSV_S) ---------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_S_T(1) FCN_V(tgMH_MAD_VSV_S)( VEC_S_T(1,C) vARG_0, VAR_T(C) fScalar, VEC_S_T(1,C) vARG_2 )
{
    #define EQN(A) vARG_0.m_aData[A]*fScalar + vARG_2.m_aData[A]
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_NMS_SVV_S) ---------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_S_T(1) FCN_V(tgMH_NMS_SVV_S)( VAR_T(C) fScalar, VEC_S_T(1,C) vARG_1, VEC_S_T(1,C) vARG_2 )
{
    #define EQN(A) -(fScalar*vARG_1.m_aData[A] - vARG_2.m_aData[A])
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_NMS_VSV_S) ---------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_S_T(1) FCN_V(tgMH_NMS_VSV_S)( VEC_S_T(1,C) vARG_0, VAR_T(C) fScalar, VEC_S_T(1,C) vARG_2 )
{
    #define EQN(A) -(vARG_0.m_aData[A]*fScalar - vARG_2.m_aData[A])
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_MUL_SV_S) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_S_T(1) FCN_V(tgMH_MUL_SV_S)( VAR_T(C) fScalar, VEC_S_T(1,C) vARG_1 )
{
    #define EQN(A) fScalar * vARG_1.m_aData[A]
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_MUL_VS_S) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_S_T(1) FCN_V(tgMH_MUL_VS_S)( VEC_S_T(1,C) vARG_0, VAR_T(C) fScalar )
{
    #define EQN(A) vARG_0.m_aData[A] * fScalar
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_DIV_SV_S) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_S_T(1) FCN_V(tgMH_DIV_SV_S)( VAR_T(C) fScalar, VEC_S_T(1,C) vARG_1 )
{
    #define EQN(A) fScalar / vARG_1.m_aData[A]
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_DIV_VS_S) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_S_T(1) FCN_V(tgMH_DIV_VS_S)( VEC_S_T(1,C) vARG_0, VAR_T(C) fScalar )
{
    VAR_T(C) fInvScalar = TYPE_K(1) / fScalar;
    #define EQN(A) vARG_0.m_aData[A] * fInvScalar
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}
