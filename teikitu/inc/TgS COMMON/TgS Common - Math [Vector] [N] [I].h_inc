/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common - Math API [Vector] [N] [I].h_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Common ===================================================================================================================================================================== */

/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*  Public Functions                                                                                                                                                               */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_N_ART
                                                @brief Return a vector that is assigned the per-element operation ARG0 + ARG1, clamped to an unsigned maximum
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @return A vector where each element is the corresponding sum from the arguments, clamped to an unsigned maximum */
TgINLINE VEC_N_T(1)                         FCN_V(tgMH_ADD_S_N)( VEC_N_T(1,C) ARG0, VEC_N_T(1,C) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_N_ART
                                                @brief Return a vector that is assigned the per-element operation ARG0 + ARG1, wrapping on overflow
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @return A vector where each element is the corresponding sum from the arguments, wrapping on overflow */
TgINLINE VEC_N_T(1)                         FCN_V(tgMH_ADD_N)( VEC_N_T(1,C) ARG0, VEC_N_T(1,C) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_N_ART
                                                @brief Return a vector that is assigned the per-element operation ARG0 - ARG1, clamped to zero
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @return A vector where each element is the corresponding subtract of the arguments, clamped to zero */
TgINLINE VEC_N_T(1)                         FCN_V(tgMH_SUB_S_N)( VEC_N_T(1,C) ARG0, VEC_N_T(1,C) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_N_ART
                                                @brief Return a vector that is assigned the per-element operation ARG0 - ARG1, wrapping on underflow
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @return A vector where each element is the corresponding sum from the arguments, wrapping on underflow */
TgINLINE VEC_N_T(1)                         FCN_V(tgMH_SUB_N)( VEC_N_T(1,C) ARG0, VEC_N_T(1,C) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_N_ART
                                                @brief Return a vector where each element is the corresponding average of the arguments
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @return A vector where each element is the corresponding average of the arguments */
TgINLINE VEC_N_T(1)                         FCN_V(tgMH_AVG_N)( VEC_N_T(1,C) ARG0, VEC_N_T(1,C) ARG1 );
