/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common - Geometry 3D - Cylinder.i_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Common ===================================================================================================================================================================== */

/* ---- FCN_VO(tgGM_CY_Volume) --------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCN_VO(tgGM_CY_Volume)( VEC_OBJ_T(TgTUBE,CPCU) psCY0 )
{
    TgGEOM_ASSERT_PARAM(FCN_VO(tgGM_TB_Is_Valid)(psCY0));
    return (VAR_K(KTgTWO_PI)*(psCY0->m_fRadiusSq)*(psCY0->m_fExtent));
}


/* ---- FCN_VO(tgGM_CY_Area) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCN_VO(tgGM_CY_Area)( VEC_OBJ_T(TgTUBE,CPCU) psCY0 )
{
    TgGEOM_ASSERT_PARAM(FCN_VO(tgGM_TB_Is_Valid)(psCY0));
    return (VAR_K(KTgTWO_PI)*(psCY0->m_fRadius)*(TYPE_K(2,0)*(psCY0->m_fExtent) + (psCY0->m_fRadius)));
}


/* ---- FCN_VO(tgGM_CY_BA) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_VO(tgGM_CY_BA)( VEC_OBJ_T(TgBOXAA,PCU) psBA0, VEC_OBJ_T(TgTUBE,CPCU) psCY0 )
{
    VEC_T(1,C)                          vX0 = FCN_V(tgMH_SUB)( &psCY0->m_vOrigin, &psCY0->m_vHAX );
    VEC_T(1,C)                          vX1 = FCN_V(tgMH_ADD)( &psCY0->m_vOrigin, &psCY0->m_vHAX );

    TgGEOM_ASSERT_PARAM(FCN_VO(tgGM_TB_Is_Valid)(psCY0));

    FCN_VO(tgGM_BA_Init_PT)( psBA0, &vX0 );
    FCN_VO(tgGM_BA_Union_PT)( psBA0, &vX1 );
    FCN_VO(tgGM_BA_Expand)( psBA0, psCY0->m_fRadius );
}


/* ---- FCN_VO(tgGM_CY_Sweep_BA) ------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_VO(tgGM_CY_Sweep_BA)( VEC_OBJ_T(TgBOXAA,PCU) psBA0, VEC_OBJ_T(TgTUBE,CPCU) psCY0, VEC_T(1,CPCU) pvDT )
{
    TgGEOM_ASSERT_PARAM(FCN_VO(tgGM_TB_Is_Valid)(psCY0) && FCN_V(tgMH_Is_Vector_Valid)(pvDT));

    FCN_VO(tgGM_CY_BA)( psBA0, psCY0 );
    FCN_VO(tgGM_BA_Sweep)( psBA0, pvDT );
}


/* ---- FCN_VO(tgGM_CY_Project) -------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_VO(tgGM_CY_Project)( VAR_T(PCU) ptyMin, VAR_T(PCU) ptyMax, VEC_OBJ_T(TgTUBE,CPCU) psCY0, VEC_T(1,CPCU) pvDN )
{
    VAR_T(C)                            fUAX_N = FCN_V(tgMH_DOT)( pvDN, &psCY0->m_vU_HAX );
    VAR_T(C)                            fDist = FCN_V(tgMH_DOT)( pvDN, &psCY0->m_vOrigin );
    VAR_T(C)                            fE2 = psCY0->m_fExtent * FCN_F(tgPM_ABS)( fUAX_N );
    VAR_T(C)                            fE3 = psCY0->m_fRadius * FCN_F(tgPM_SQRT)( FCN_F(tgPM_ABS)(TYPE_K(1) - fUAX_N*fUAX_N) );

    TgGEOM_ASSERT_PARAM(nullptr != ptyMin && nullptr != ptyMax && FCN_VO(tgGM_TB_Is_Valid)(psCY0) && FCN_V(tgMH_Is_Vector_Valid)(pvDN));

    *ptyMin = fDist - fE2 - fE3;
    *ptyMax = fDist + fE2 + fE3;
}


/* ---- FCN_VO(tgGM_CY_Is_Contained) --------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgBOOL FCN_VO(tgGM_CY_Is_Contained)( VEC_OBJ_T(TgTUBE,CPCU) psCY0, VEC_T(1,CPCU) pvS0 )
{
    VEC_T(1,C)                          vDS = FCN_V(tgMH_SUB)( pvS0, &psCY0->m_vOrigin );
    VAR_T(C)                            fDS_AX = FCN_V(tgMH_DOT)( &vDS, &psCY0->m_vU_HAX );

    TgGEOM_ASSERT_PARAM(FCN_VO(tgGM_TB_Is_Valid)(psCY0) && FCN_V(tgMH_Is_Point_Valid)( pvS0 ));

    if ((fDS_AX > psCY0->m_fExtent) || (fDS_AX < -(psCY0->m_fExtent)))
    {
        return (false);
    }
    else
    {
        VEC_T(1,C)                          vX0 = FCN_V(tgMH_MUL_SV)( fDS_AX, &psCY0->m_vU_HAX );
        VEC_T(1,C)                          vX1 = FCN_V(tgMH_SUB)( &vDS, &vX0 );

        return (FCN_V(tgMH_LSQ)( &vX1) <= psCY0->m_fRadiusSq);
    };
}
