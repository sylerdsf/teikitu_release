/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common - Base - API [Text].h_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */

#if defined(TGS_COMMON_BASE_API_TEXT_HINC)
    #error This file should be included by TGS_COMMON_BASE_API_TEXT_H
#endif

#if !defined (ENABLE_RELOAD_GUARD)
    #define ENABLE_RELOAD_GUARD

    #define GENERATE__MBZ
    #include __FILE__

    #define GENERATE__WCZ
    #include __FILE__

    #define GENERATE__NCZ

    #undef ENABLE_RELOAD_GUARD
#endif

#include "TgS COMMON/TgS Common - Base - Defines [Template] [Text].h_inc"


/* == Common ===================================================================================================================================================================== */

/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*  Public Functions                                                                                                                                                               */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

/* ---- Character ---------------------------------------------------------------------------------------------------------------------------------------------------------------- */

                                            /** @brief Test to see if a character is considered to be in the set of a printable characters
                                                @param[in] ARG Character to be processed
                                                @return True if the character is considered to be part of the functions criteria, and false otherwise */
TgEXTN TgBOOL                               FCN_CHAR(Is_Print)( CHAR(CP) ARG );

                                            /** @brief Test to see if a character is considered to be in the set white space*/
                                            /** @param[in] ARG Character to be processed
                                                @return True if the character is considered to be part of the functions criteria, and false otherwise */
TgEXTN TgBOOL                               FCN_CHAR(Is_Space)( CHAR(CP) ARG );

                                            /** @brief Convert a string to lower case
                                                @param[out] OUT0 Output location for the converted string (assumed to be large enough for the operation)
                                                @param[in] ARG1 String to be processed */
TgEXTN TgVOID                               FCN_CHAR(To_Lower)( CHAR(P) OUT0, CHAR(CP) ARG1 );

                                            /** @brief Convert a string to upper case
                                                @param[out] OUT0 Output location for the converted string (assumed to be large enough for the operation)
                                                @param[in] ARG1 String to be processed */
TgEXTN TgVOID                               FCN_CHAR(To_Upper)( CHAR(P) OUT0, CHAR(CP) ARG1 );


/* ---- String ------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

                                            /** @brief Generate a consistent hash for the string in ARG0
                                                @param[out] OUT0 Destination pointer to hold the hash value on success
                                                @param[in] ARG1 String to be processed
                                                @param[in] ARG2 Maximum capacity in \b bytes of the string in ARG0
                                                @return KTgS_OK on success and KTgE_FAIL (or other failure error code) otherwise */
TgEXTN TgRESULT                             FCN(Hash)( TgUINT_MAX_P OUT0, CHAR(CPC) ARG1, TgRSIZE_C ARG2 );

                                            /** @brief Output a string representation of the value in ARG2
                                                @param[out] OUT0 Destination for resulting output
                                                @param[in] ARG1 Maximum capacity in \b bytes of the string in OUT0
                                                @param[in] ARG2 Numeric value to be converted
                                                @return KTgS_OK on success and KTgE_FAIL (or other failure error code) otherwise */
TgEXTN TgRESULT                             FCN(From_U08)( CHAR(PC) OUT0, TgRSIZE_C ARG1, TgUINT_F08_C ARG2 );
TgEXTN TgRESULT                             FCN(From_U16)( CHAR(PC) OUT0, TgRSIZE_C ARG1, TgUINT_F16_C ARG2 );
TgEXTN TgRESULT                             FCN(From_U32)( CHAR(PC) OUT0, TgRSIZE_C ARG1, TgUINT_F32_C ARG2 );
TgEXTN TgRESULT                             FCN(From_U64)( CHAR(PC) OUT0, TgRSIZE_C ARG1, TgUINT_F64_C ARG2 );
TgEXTN TgRESULT                             FCN(From_S08)( CHAR(PC) OUT0, TgRSIZE_C ARG1, TgSINT_F08_C ARG2 );
TgEXTN TgRESULT                             FCN(From_S16)( CHAR(PC) OUT0, TgRSIZE_C ARG1, TgSINT_F16_C ARG2 );
TgEXTN TgRESULT                             FCN(From_S32)( CHAR(PC) OUT0, TgRSIZE_C ARG1, TgSINT_F32_C ARG2 );
TgEXTN TgRESULT                             FCN(From_S64)( CHAR(PC) OUT0, TgRSIZE_C ARG1, TgSINT_F64_C ARG2 );

TgEXTN TgRESULT                             FCN(From_F32)( CHAR(PC) OUT0, TgRSIZE_C ARG1, TgFLOAT32_C ARG2 );
TgEXTN TgRESULT                             FCN(From_F64)( CHAR(PC) OUT0, TgRSIZE_C ARG1, TgFLOAT64_C ARG2 );

TgEXTN TgRESULT                             FCN(Formatted_From_U32)( CHAR(PC) OUT0, TgRSIZE_C ARG1, TgUINT_F32_C ARG2 );
TgEXTN TgRESULT                             FCN(Formatted_From_U64)( CHAR(PC) OUT0, TgRSIZE_C ARG1, TgUINT_F64_C ARG2 );
TgEXTN TgRESULT                             FCN(Formatted_From_S32)( CHAR(PC) OUT0, TgRSIZE_C ARG1, TgSINT_F32_C ARG2 );
TgEXTN TgRESULT                             FCN(Formatted_From_S64)( CHAR(PC) OUT0, TgRSIZE_C ARG1, TgSINT_F64_C ARG2 );

                                            /** @brief Convert a string representation of a number into its numeric value
                                                @param[in] ARG0 String containing the number to be converted
                                                @param[in] ARG1 Maximum capacity in \b bytes of the string in OUT0
                                                @return KTgS_OK on success and KTgE_FAIL (or other failure error code) otherwise */
TgINLINE TgBOOL                             FCN(To_Bool)( CHAR(CPC) ARG0, TgRSIZE_C ARG1 );
TgINLINE TgUINT_F08                         FCN(To_U08)( CHAR(CPC) ARG0, TgRSIZE_C ARG1 );
TgINLINE TgUINT_F16                         FCN(To_U16)( CHAR(CPC) ARG0, TgRSIZE_C ARG1 );
TgEXTN TgUINT_F32                           FCN(To_U32)( CHAR(CPC) ARG0, TgRSIZE_C ARG1 );
TgEXTN TgUINT_F64                           FCN(To_U64)( CHAR(CPC) ARG0, TgRSIZE_C ARG1 );
TgINLINE TgSINT_F08                         FCN(To_S08)( CHAR(CPC) ARG0, TgRSIZE_C ARG1 );
TgINLINE TgSINT_F16                         FCN(To_S16)( CHAR(CPC) ARG0, TgRSIZE_C ARG1 );
TgEXTN TgSINT_F32                           FCN(To_S32)( CHAR(CPC) ARG0, TgRSIZE_C ARG1 );
TgEXTN TgSINT_F64                           FCN(To_S64)( CHAR(CPC) ARG0, TgRSIZE_C ARG1 );

TgEXTN TgFLOAT32                            FCN(To_F32)( CHAR(CPC) ARG0, TgRSIZE_C ARG1 );
TgEXTN TgFLOAT64                            FCN(To_F64)( CHAR(CPC) ARG0, TgRSIZE_C ARG1 );



                                            /** @brief Output the number of characters in the string at ARG0
                                                @param[out] OUT0 Destination for function result on success, the number of characters in the string at ARG0
                                                @param[in] ARG1 String to be processed
                                                @param[in] ARG2 Maximum capacity in \b bytes of the string in ARG1
                                                @return KTgS_OK on success and KTgE_FAIL (or other failure error code) otherwise */
TgEXTN TgRESULT                             FCN(Length_Count)( TgRSIZE_P OUT0, CHAR(CP) ARG1, TgRSIZE ARG2 );

                                            /** @return The number of bytes in the string at ARG0
                                                @param[in] ARG0 String to be processed
                                                @param[in] ARG1 Maximum capacity in \b bytes of the string in ARG0 */
TgEXTN TgRSIZE                              FCN(Length_U08)( CHAR(CPC) ARG0, TgRSIZE_C ARG1 );

                                            /** @brief Output the number of bytes and the count of characters in the string at ARG0
                                                @param[out] OUT0 Destination structure that holds both the count of characters and size in bytes
                                                @param[in] ARG1 String to be processed
                                                @param[in] ARG2 Maximum capacity in \b bytes of the string in ARG1
                                                @return KTgS_OK on success and KTgE_FAIL (or other failure error code) otherwise */
TgEXTN TgRESULT                             FCN(Length)( STg1_Text_Length_P OUT0, CHAR(CP) ARG1, TgRSIZE ARG2 );



                                            /** Comparison Table                Function Result                 Lexical Result                 
                                                        As          Aster       Zero                            Negative (Aster is longer)     
                                                        Apple       apple       Negative Result (A < a)         Negative                        */

                                            /** @brief Perform a lexicographical comparison of two strings up to the minimum of ARG3 and ARG6
                                                @param[out] OUT0 Negative if ARG0 appears before ARG2 in lexicographical order, zero if they compare equal, and negative otherwise
                                                @param[in] ARG1 String parameter
                                                @param[in] ARG2 Maximum number of \b >bytes< to read from ARG1, including the data leading to ARG3
                                                @param[in] ARG3 Starting offset in \b >characters< for ARG1
                                                @param[in] ARG4 String parameter
                                                @param[in] ARG5 Maximum number of \b >bytes< to read from ARG5, including the data leading to ARG6
                                                @param[in] ARG6 Starting offset in \b >characters< for ARG5
                                                @return KTgS_OK on success and KTgE_FAIL or other error code otherwise */
TgINLINE TgRESULT                           FCN(Compare)( TgSINT_F08_P OUT0, CHAR(CPC) ARG1, TgRSIZE_C ARG2, TgRSIZE_C ARG3, CHAR(CPC) ARG4, TgRSIZE_C ARG5, TgRSIZE_C ARG6 );

                                            /** @brief Perform a case insensitive lexicographical comparison of two strings up to the minimum of ARG3 and ARG6
                                                @param[out] OUT0 Negative if ARG0 appears before ARG2 in lexicographical order, zero if they compare equal, and negative otherwise
                                                @param[in] ARG1 String parameter
                                                @param[in] ARG2 Maximum number of \b >bytes< to read from ARG1, including the data leading to ARG3
                                                @param[in] ARG3 Starting offset in \b >characters< for ARG1
                                                @param[in] ARG4 String parameter
                                                @param[in] ARG5 Maximum number of \b >bytes< to read from ARG5, including the data leading to ARG6
                                                @param[in] ARG6 Starting offset in \b >characters< for ARG5
                                                @return KTgS_OK on success and KTgE_FAIL or other error code otherwise */
TgINLINE TgRESULT                           FCN(Compare_NoCase)( TgSINT_F08_P OUT0, CHAR(CPC) ARG1, TgRSIZE_C ARG2, TgRSIZE_C ARG3, CHAR(CPC) ARG4, TgRSIZE_C ARG5, TgRSIZE_C ARG6 );

                                            /** @brief Perform a lexicographical comparison of two strings up to ARG5 number of bytes
                                                @param[out] OUT0 Negative if ARG0 appears before ARG2 in lexicographical order, zero if they compare equal, and negative otherwise
                                                @param[in] ARG1 String parameter
                                                @param[in] ARG2 Maximum number of \b >bytes< to read from ARG1, including the data leading to ARG3
                                                @param[in] ARG3 Starting offset in \b >characters< for ARG1
                                                @param[in] ARG4 String parameter
                                                @param[in] ARG5 Maximum number of \b >bytes< to read from ARG5, including the data leading to ARG6
                                                @param[in] ARG6 Starting offset in \b >characters< for ARG5
                                                @param[in] ARG7 Maximum number of \b >characters< to read from ARG1 and ARG3, starting from ARG2 and ARG4
                                                @return KTgS_OK on success and KTgE_FAIL or other error code otherwise */
TgINLINE TgRESULT                           FCN(CompareN)( TgSINT_F08_P OUT0,
                                                CHAR(CPC) ARG1, TgRSIZE_C ARG2, TgRSIZE_C ARG3, CHAR(CPC) ARG4, TgRSIZE_C ARG5, TgRSIZE_C ARG6, TgRSIZE_C ARG7 );

                                            /** @brief Perform a case insensitive lexicographical comparison of two strings up to ARG5 number of bytes
                                                @param[out] OUT0 Negative if ARG0 appears before ARG2 in lexicographical order, zero if they compare equal, and negative otherwise
                                                @param[in] ARG1 String parameter
                                                @param[in] ARG2 Maximum number of \b >bytes< to read from ARG1, including the data leading to ARG3
                                                @param[in] ARG3 Starting offset in \b >characters< for ARG1
                                                @param[in] ARG4 String parameter
                                                @param[in] ARG5 Maximum number of \b >bytes< to read from ARG5, including the data leading to ARG6
                                                @param[in] ARG6 Starting offset in \b >characters< for ARG5
                                                @param[in] ARG7 Maximum number of \b >characters< to read from ARG1 and ARG3, starting from ARG2 and ARG4
                                                @return KTgS_OK on success and KTgE_FAIL or other error code otherwise */
TgINLINE TgRESULT                           FCN(CompareN_NoCase)( TgSINT_F08_P OUT0,
                                                CHAR(CPC) ARG1, TgRSIZE_C ARG2, TgRSIZE_C ARG3, CHAR(CPC) ARG4, TgRSIZE_C ARG5, TgRSIZE_C ARG6, TgRSIZE_C ARG7 );



                                            /** @brief Convert the string in ARG2 to upper case and outputs it into ARG0
                                                @param[out] OUT0 Destination for resulting output
                                                @param[in] ARG1 Maximum capacity in \b bytes of the string in OUT0
                                                @param[in] ARG2 Source string for processing
                                                @param[in] ARG3 Maximum capacity in \b bytes of the string in ARG2
                                                @return KTgS_OK on success and KTgE_FAIL (or other failure error code) otherwise */
TgEXTN TgRESULT                             FCN(To_Upper)( CHAR(P) OUT0, TgRSIZE ARG1, CHAR(CP) ARG2, TgRSIZE ARG3 );

                                            /** @brief Convert the string in ARG2 to lower case and outputs it into ARG0
                                                @param[out] OUT0 Destination for resulting output
                                                @param[in] ARG1 Maximum capacity in \b bytes of the string in OUT0
                                                @param[in] ARG2 Source string for processing
                                                @param[in] ARG3 Maximum capacity in \b bytes of the string in ARG2
                                                @return KTgS_OK on success and KTgE_FAIL (or other failure error code) otherwise */
TgEXTN TgRESULT                             FCN(To_Lower)( CHAR(P) OUT0, TgRSIZE ARG1, CHAR(CP) ARG2, TgRSIZE ARG3 );



                                            /** @brief Copy the string in ARG2 to ARG0
                                                @param[out] OUT0 Destination for resulting output
                                                @param[in] ARG1 Maximum capacity in \b bytes of the string in OUT0
                                                @param[in] ARG2 Source string
                                                @param[in] ARG3 Maximum capacity in \b bytes of the string in ARG2
                                                @return KTgS_OK on success and KTgE_FAIL (or other failure error code) otherwise */
TgEXTN TgRESULT                             FCN(Copy)( CHAR(PC) OUT0, TgRSIZE_C ARG1, CHAR(CPC) ARG2, TgRSIZE_C ARG3 );

                                            /** @brief Append the string at ARG2 to the string at ARG0
                                                @param[in,out] OUT0 Destination for resulting output
                                                @param[in] ARG1 Maximum capacity in \b bytes of the string in OUT0
                                                @param[in] ARG2 Source string
                                                @param[in] ARG3 Maximum capacity in \b bytes of the string in ARG2
                                                @return KTgS_OK on success and KTgE_FAIL (or other failure error code) otherwise */
TgEXTN TgRESULT                             FCN(Append)( CHAR(PC) OUT0, TgRSIZE_C ARG1, CHAR(CPC) ARG2, TgRSIZE_C ARG3 );

                                            /** @brief Copy the string in ARG2 to ARG0, up to a maximum of ARG4 characters
                                                @param[out] OUT0 Destination for resulting output
                                                @param[in] ARG1 Maximum capacity in \b bytes of the string in OUT0
                                                @param[in] ARG2 Source string
                                                @param[in] ARG3 Maximum capacity in \b bytes of the string in ARG2
                                                @param[in] ARG4 Number of \b characters to be copied (not including null-term)
                                                @return KTgS_OK on success and KTgE_FAIL (or other failure error code) otherwise */
TgEXTN TgRESULT                             FCN(CopyN)( CHAR(PC) OUT0, TgRSIZE_C ARG1, CHAR(CPC) ARG2, TgRSIZE_C ARG3, TgRSIZE_C ARG4 );

                                            /** @brief Append the string in ARG2 to ARG0, up to a maximum of ARG4 characters
                                                @param[in,out] OUT0 Destination for resulting output
                                                @param[in] ARG1 Maximum capacity in \b bytes of the string in OUT0
                                                @param[in] ARG2 Source string
                                                @param[in] ARG3 Maximum capacity in \b bytes of the string in ARG2
                                                @param[in] ARG4 Number of \b characters to be copied (not including null-term)
                                                @return KTgS_OK on success and KTgE_FAIL (or other failure error code) otherwise */
TgEXTN TgRESULT                             FCN(AppendN)( CHAR(PC) OUT0, TgRSIZE_C ARG1, CHAR(CPC) ARG2, TgRSIZE_C ARG3, TgRSIZE_C ARG4 );



                                            /** @brief Find the next token in ARG1 separated by characters in ARG2 and output it in ARG0
                                                @param[out] OUT0 Used to store a pointer to the next token or nullptr otherwise
                                                @param[in,out] ARG1 String to tokenize (will be modified)
                                                @param[in] ARG2 Remaining size of the string in ARG0 to evaluate, updated as an output of the function call
                                                @param[in] ARG3 A string containing a list of delimiters
                                                @param[in,out] ARG4 Used by the function to store internal state
                                                @return KTgS_OK on success and KTgE_FAIL (or other failure error code) otherwise */
TgEXTN TgRESULT                             FCN(Token)( CHAR(PP) OUT0, CHAR(PC) ARG1, TgRSIZE_P ARG2, CHAR(CPC) ARG3, CHAR(PP) ARG4 );

                                            /** @brief Finds the first occurrence of the character ARG1 in the string at ARG0
                                                @param[out] OUT0 Offset in ARG1 to the first instance of the string in ARG3
                                                @param[in] ARG1 Source string
                                                @param[in] ARG2 Maximum capacity in \b bytes of the string in ARG1
                                                @param[in] ARG3 Character used for matching
                                                @return KTgS_OK on success and KTgE_FAIL (or other failure error code) otherwise */
TgEXTN TgRESULT                             FCN(StrChr)( TgRSIZE_P OUT0, CHAR(CPC) ARG1, TgRSIZE_C ARG2, CHAR(C) ARG3 );

                                            /** @brief Finds the first occurrence of the string pointed at ARG1 in the string at ARG0
                                                @param[out] OUT0 Offset in ARG1 to the first instance of the string in ARG3
                                                @param[in] ARG1 Source string
                                                @param[in] ARG2 Maximum capacity in \b bytes of the string in ARG1
                                                @param[in] ARG3 String used for matching
                                                @param[in] ARG4 Maximum capacity in \b bytes of the string in ARG3
                                                @return KTgS_OK on success and KTgE_FAIL (or other failure error code) otherwise */
TgEXTN TgRESULT                             FCN(StrStr)( TgRSIZE_P OUT0, CHAR(CPC) ARG1, TgRSIZE_C ARG2, CHAR(CPC) ARG3, TgRSIZE_C ARG4 );

                                            /** @brief Parse the source string taking into account c-style comments, and quotations
                                                @param[out] OUT0 Array of token pointers
                                                @param[in] ARG1 Max count of token pointers in ARG1
                                                @param[in] ARG2 Source string to tokenize (will be modified)
                                                @param[in] ARG3 Maximum capacity in \b bytes of the string in ARG2
                                                @return Number of tokens written into the array at ARG1 */
TgEXTN TgSINT_F32                           FCN(Token_List)( CHAR(PP) OUT0, TgSINT_F32_C ARG1, CHAR(PC) ARG2, TgRSIZE_C ARG3 );



                                            /** @brief Process a printf-style string and return the resultant length of it 
                                                @param[out] OUT0 Contains the resultant length of the string
                                                @param[in] ARG1 String optionally containing printf markers
                                                @param[in] ARG2 Variable argument list
                                                @return KTgS_OK on success and KTgE_FAIL (or other failure error code) otherwise */
TgEXTN TgRESULT                             FCN(LengthVF_Count)( TgRSIZE_P OUT0, CHAR(CPC) ARG1, va_list ARG2 );

                                            /** @brief Outputs the result of processing ARG2 into the string at ARG0
                                                @param[out] OUT0 Destination for resulting output
                                                @param[in] ARG1 Maximum capacity in \b bytes of the string in OUT0
                                                @param[in] ARG2 Source string for processing using printf notation
                                                @param[in] ARG3 Variable argument list
                                                @return KTgS_OK on success and KTgE_FAIL (or other failure error code) otherwise */
TgEXTN TgRESULT                             FCN(PrintVF)( CHAR(PC) OUT0, TgRSIZE_C ARG1, CHAR(CPC) ARG2, va_list ARG3 );

                                            /** @brief Appends the resultant output of processing ARG2 to the end of the string in ARG0
                                                @param[in,out] OUT0 Destination for resulting output
                                                @param[in] ARG1 Maximum capacity in \b bytes of the string in OUT0
                                                @param[in] ARG2 Source string for processing using printf notation
                                                @param[in] ARG3 Variable argument list
                                                @return KTgS_OK on success and KTgE_FAIL (or other failure error code) otherwise */
TgEXTN TgRESULT                             FCN(AppendVF)( CHAR(PC) OUT0, TgRSIZE_C ARG1, CHAR(CPC) ARG2, va_list ARG3 );

                                            /** @brief Outputs the result of processing ARG2 into the string at ARG0
                                                @param[out] OUT0 Destination for resulting output
                                                @param[in] ARG1 Maximum capacity in \b bytes of the string in OUT0
                                                @param[in] ARG2 Source string for processing using printf notation
                                                @param[in] ARG3 Optional list of arguments for use in ARG2 processing
                                                @return KTgS_OK on success and KTgE_FAIL (or other failure error code) otherwise */
TgEXTN TgRESULT                             FCN(PrintF)( CHAR(PC) OUT0, TgRSIZE_C ARG1, CHAR(CPC) ARG2, ... );

                                            /** @brief Appends the resultant output of processing ARG2 to the end of the string in ARG0
                                                @param[in,out] OUT0 Destination for resulting output
                                                @param[in] ARG1 Maximum capacity in \b bytes of the string in OUT0
                                                @param[in] ARG2 Source string for processing using printf notation
                                                @param[in] ARG3 Optional list of arguments for use in ARG2 processing
                                                @return KTgS_OK on success and KTgE_FAIL (or other failure error code) otherwise */
TgEXTN TgRESULT                             FCN(AppendF)( CHAR(PC) OUT0, TgRSIZE_C ARG1, CHAR(CPC) ARG2, ... );



                                            /** @brief Converts the string in ARG2 into the format for OUT0
                                                @param[out] OUT0 Destination for resulting output
                                                @param[in] ARG1 Maximum capacity in \b bytes of the string in OUT0
                                                @param[in] ARG2 Source string 
                                                @param[in] ARG3 Maximum capacity in \b bytes of the string in ARG2
                                                @return KTgS_OK on success and KTgE_FAIL (or other failure error code) otherwise */
TgEXTN TgRESULT                             FCN(Convert_NCZ)( CHAR(PC) OUT0, TgRSIZE_C ARG1, TgCHAR_NC_CPC ARG2, TgRSIZE_C ARG3 );

                                            /** @brief Converts the string in ARG2 into the format for OUT0
                                                @param[out] OUT0 Destination for resulting output
                                                @param[in] ARG1 Maximum capacity in \b bytes of the string in OUT0
                                                @param[in] ARG2 Source string 
                                                @param[in] ARG3 Maximum capacity in \b bytes of the string in ARG2
                                                @return KTgS_OK on success and KTgE_FAIL (or other failure error code) otherwise */
TgEXTN TgRESULT                             FCN(Convert_WCZ)( CHAR(PC) OUT0, TgRSIZE_C ARG1, TgCHAR_WC_CPC ARG2, TgRSIZE_C ARG3 );

                                            /** @brief Converts the string in ARG2 into the format for OUT0
                                                @param[out] OUT0 Destination for resulting output
                                                @param[in] ARG1 Maximum capacity in \b bytes of the string in OUT0
                                                @param[in] ARG2 Source string 
                                                @param[in] ARG3 Maximum capacity in \b bytes of the string in ARG2
                                                @return KTgS_OK on success and KTgE_FAIL (or other failure error code) otherwise */
TgEXTN TgRESULT                             FCN(Convert_MBZ)( CHAR(PC) OUT0, TgRSIZE_C ARG1, TgCHAR_MB_CPC ARG2, TgRSIZE_C ARG3 );


/* =============================================================================================================================================================================== */

#include "TgS COMMON/TgS Common - Base - Defines [Template] [Text].h_inc"
