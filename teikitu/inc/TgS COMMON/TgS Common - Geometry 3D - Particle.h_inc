/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common - Geometry 3D - Particle.h_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Common ===================================================================================================================================================================== */

/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*  Public Functions                                                                                                                                                               */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

                                                /** @brief Invalidate the geometry object (particle)
                                                    @param[out] OUT Pointer to the geometry object (particle) */
TgINLINE TgVOID                                 FCN_VO(tgGM_PC_Reset)( VEC_OBJ_T(TgPARTICLE,PCU) OUT );

                                                /** @brief Validate the integrity of the geometry object (particle)
                                                    @param[in,out] ARG0 Pointer to a geometry object (particle)
                                                    @return True if the geometry object (particle) is valid and false otherwise */
TgINLINE TgBOOL                                 FCN_VO(tgGM_PC_Is_Valid)( VEC_OBJ_T(TgPARTICLE,CPCU) ARG );

                                                /** @brief Calculate the minimum necessary Axis-Aligned Bounding Box to contain the geometry object (particle)
                                                    @param[out] ARG0 Pointer to an axis-aligned bounding box object
                                                    @param[in] ARG1 Pointer to a geometry object (particle) */
TgEXTN TgVOID                                   FCN_VO(tgGM_PC_BA)( VEC_OBJ_T(TgBOXAA,PCU) ARG0, VEC_OBJ_T(TgPARTICLE,CPCU) ARG1, VAR_T(C) ARG2 );

                                                /** @brief Project the geometry object (particle) along the direction vector
                                                    @param[out] OUT0 Pointer to a scalar value to hold the lower bound of the projection
                                                    @param[out] OUT1 Pointer to a scalar value to hold the upper bound of the projection
                                                    @param[in] ARG2 Pointer to a geometry object (particle)
                                                    @param[in] ARG3 Pointer to a direction vector */
TgEXTN TgVOID                                   FCN_VO(tgGM_PC_Project)( VAR_T(PCU) ARG0, VAR_T(PCU) ARG1, VEC_OBJ_T(TgPARTICLE,CPCU) ARG2, VEC_T(1,CPCU) ARG3 );

                                                /** @brief Transform the geometry object (particle) at ARG0 by the matrix at ARG1
                                                    @param[in,out] ARG0 Pointer to a geometry object (particle)
                                                    @param[in] ARG1 Column-Major matrix (3x4) containing rotation and translation */
TgINLINE TgVOID                                 FCN_VO(tgGM_PC_TX)( VEC_OBJ_T(TgPARTICLE,PCU) ARG0, VEC_04_3_T(CPCU) ARG1 );

                                                /** @brief Transform the geometry object (particle) at ARG1 by the matrix at ARG2 and store it in ARG0
                                                    @param[out] ARG0 Pointer to a geometry object (particle)
                                                    @param[in] ARG1 Pointer to a geometry object (particle)
                                                    @param[in] ARG2 Column-Major matrix (3x4) containing rotation and translation */
TgINLINE TgVOID                                 FCN_VO(tgGM_PC_Copy_TX)( VEC_OBJ_T(TgPARTICLE,PCU) ARG0, VEC_OBJ_T(TgPARTICLE,CPCU) ARG1, VEC_04_3_T(CPCU) ARG2 );


                                                /** @brief Initialize a new geometry object (disk) with the function arguments
                                                    @param[out] ARG0 Pointer to a geometry object (disk)
                                                    @param[in] ARG1 Pointer to a position vector - origin of the particle
                                                    @param[in] ARG2 Pointer to a direction vector - velocity at time 0
                                                    @param[in] ARG3 Pointer to a direction vector - constant acceleration term */
TgINLINE TgVOID                                 FCN_VO(tgGM_PC_Init)( VEC_OBJ_T(TgPARTICLE,PCU) ARG0, VEC_T(1,CPCU) ARG1, VEC_T(1,CPCU) ARG2, VEC_T(1,CPCU) ARG3 );

                                                /** @brief Copy the one geometry object (particle) to another of the same type
                                                    @param[out] ARG0 Pointer to a geometry object (particle)
                                                    @param[in] ARG1 Pointer to a geometry object (particle) */
TgINLINE TgVOID                                 FCN_VO(tgGM_PC_Copy)( VEC_OBJ_T(TgPARTICLE,PCU) ARG0, VEC_OBJ_T(TgPARTICLE,CPCU) ARG1 );


                                                /** @brief Set the position
                                                    @param[in,out] ARG0 Pointer to a geometry object (particle)
                                                    @param[in] ARG1 Pointer to a position vector */
TgINLINE TgVOID                                 FCN_VO(tgGM_PC_Set_Position)( VEC_OBJ_T(TgPARTICLE,PCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                                /** @brief Set the velocity
                                                    @param[in,out] ARG0 Pointer to a geometry object (particle)
                                                    @param[in] ARG1 Pointer to a direction vector */
TgINLINE TgVOID                                 FCN_VO(tgGM_PC_Set_Velocity)( VEC_OBJ_T(TgPARTICLE,PCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                                /** @brief Set the acceleration
                                                    @param[in,out] ARG0 Pointer to a geometry object (particle)
                                                    @param[in] ARG1 Pointer to a direction vector */
TgINLINE TgVOID                                 FCN_VO(tgGM_PC_Set_Acceleration)( VEC_OBJ_T(TgPARTICLE,PCU) ARG0, VEC_T(1,CPCU) ARG1 );


                                                /** @brief Return the position of the particle
                                                    @param[in] ARG Pointer to a geometry object (particle)
                                                    @return The position of the particle */
TgINLINE VEC_T(1,CP)                            FCN_VO(tgGM_PC_Query_Position)( VEC_OBJ_T(TgPARTICLE,CPCU) ARG );

                                                /** @brief Return the velocity of the particle
                                                    @param[in] ARG Pointer to a geometry object (particle)
                                                    @return The velocity of the particle */
TgINLINE VEC_T(1,CP)                            FCN_VO(tgGM_PC_Query_Velocity)( VEC_OBJ_T(TgPARTICLE,CPCU) ARG );

                                                /** @brief Return the acceleration of the particle
                                                    @param[in] ARG Pointer to a geometry object (particle)
                                                    @return The acceleration of the particle */
TgINLINE VEC_T(1,CP)                            FCN_VO(tgGM_PC_Query_Acceleration)( VEC_OBJ_T(TgPARTICLE,CPCU) ARG );

                                                /** @brief Return the position of the particle at time ARG1
                                                    @param[in] ARG Pointer to a geometry object (particle)
                                                    @return The position of the particle at time ARG1 */
TgINLINE VEC_T(1)                               FCN_VO(tgGM_PC_Query_Position_Time)( VEC_OBJ_T(TgPARTICLE,CPCU) ARG0, VAR_T(C) ARG1 );

                                                /** @brief Return the velocity of the particle at time ARG1
                                                    @param[in] ARG Pointer to a geometry object (particle)
                                                    @return The velocity of the particle at time ARG1 */
TgINLINE VEC_T(1)                               FCN_VO(tgGM_PC_Query_Velocity_Time)( VEC_OBJ_T(TgPARTICLE,CPCU) ARG0, VAR_T(C) ARG1 );
