/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common - Math [Scalar] [F].h_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */

#if defined(TGS_COMMON_MATH_API_HINC)
    #error This file should be included by TGS_COMMON_MATH_H
#endif

#if defined(TEMPLATE__ENABLE_INTEGER)

    #if !defined (ENABLE_RELOAD_GUARD)
        #define ENABLE_RELOAD_GUARD
        #define TEMPLATE__ENABLE_UNSIGNED
        #include __FILE__
        #undef TEMPLATE__ENABLE_UNSIGNED
        #undef ENABLE_RELOAD_GUARD
    #endif

#else

    #if !defined (ENABLE_RELOAD_GUARD)
        #define ENABLE_RELOAD_GUARD
        #if !defined(TEMPLATE__TYPE_SIZE)
            #define TEMPLATE__TYPE_SIZE 32
            #include __FILE__
            #undef TEMPLATE__TYPE_SIZE
            #define TEMPLATE__TYPE_SIZE 64
        #endif
        #undef ENABLE_RELOAD_GUARD
    #endif

#endif

#include "TgS COMMON/TgS Common - Base - Defines [Template] [Math].h_inc"

/* == Common ===================================================================================================================================================================== */

/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*  DOXYGEN                                                                                                                                                                        */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

/** @defgroup TGS_COMMON_MATH_SCALAR Scalar Functions
    @ingroup TGS_COMMON_MATH
*/

    /** @defgroup TGS_COMMON_MATH_SCALAR_ALG Algorithm
        @ingroup TGS_COMMON_MATH_SCALAR
    */

    /** @defgroup TGS_COMMON_MATH_SCALAR_ROOT Calculate Root of Polynomial
        @ingroup TGS_COMMON_MATH_SCALAR
    */


/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*  Public Functions                                                                                                                                                               */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

                                            /** @addtogroup TGS_COMMON_MATH_SCALAR_ALG
                                                @brief Calculate the root of a first degree equation*/
                                            /** @param[in] ARG0 Pointer to an array to hold the root
                                                @param[in] ARG1 Parameter to be used with the function in ARG2
                                                @param[in] ARG2 Function pointer
                                                @param[in] ARG3 Parameter to use for the first evaluation of the function
                                                @param[in] ARG4 Parameter to use for the second evaluation of the function
                                                @return True if a root is found, and false otherwise */
TgEXTN TgBOOL                               FCN_F(tgMH_BrentZ)( VAR_T(PCU) NONULL ARG0, TgVOID_PCU ARG1, VAR_T()(*ARG2)( TgVOID_PCU, VAR_T(C) ), VAR_T() ARG3, VAR_T() ARG4 );

                                            /** @addtogroup TGS_COMMON_MATH_SCALAR_ALG
                                                @brief Calculate the root of a first degree equation*/
                                            /** @param[in] ARG0 Pointer to an array to hold the root
                                                @param[in] ARG1 Pointer to hold a value of the first function at the root
                                                @param[in] ARG2 Parameter to be used with the functions in ARG3, ARG4
                                                @param[in] ARG3 Function pointer
                                                @param[in] ARG4 Function pointer
                                                @param[in] ARG5 Minimum of range
                                                @param[in] ARG6 Value inside of range
                                                @param[in] ARG7 Maximum of range
                                                @return True if a root is found, and false otherwise */
TgEXTN TgBOOL                               FCN_F(tgMH_BrentD)(
                                                VAR_T(PCU) NONULL ARG0, VAR_T(PCU) NONULL ARG1, TgVOID_PCU ARG2, VAR_T()(*ARG3)( TgVOID_PCU, VAR_T(C) ),
                                                VAR_T()(*ARG4)( TgVOID_PCU, VAR_T(C) ), VAR_T() ARG5, VAR_T() ARG6, VAR_T() ARG7 );




                                            /** @addtogroup TGS_COMMON_MATH_SCALAR_ROOT
                                                @brief Calculate the root of a first degree equation*/
                                            /** @param[in] ARG0 Pointer to an array to hold the found roots (maximum of one)
                                                @param[in] ARG1 Pointer to an integer to hold the number of roots found
                                                @param[in] ARG2 Scalar value for the zero degree coefficient
                                                @param[in] ARG3 Scalar value for the first degree coefficient
                                                @return True if a root is found, and false otherwise */
TgEXTN TgBOOL                               FCN_F(tgMH_Calc_Root_1)( VAR_T(PCU) NONULL ARG0, TgSINT_F32_PCU ARG1, VAR_T() ARG2, VAR_T() ARG3 );

                                            /** @addtogroup TGS_COMMON_MATH_SCALAR_ROOT
                                                @brief Calculate the root of a second degree equation*/
                                            /** @param[in] ARG0 Pointer to an array to hold the found roots (maximum of second)
                                                @param[in] ARG1 Pointer to an integer to hold the number of roots found
                                                @param[in] ARG2 Scalar value for the zero degree coefficient
                                                @param[in] ARG3 Scalar value for the first degree coefficient
                                                @param[in] ARG4 Scalar value for the second degree coefficient
                                                @return True if a root is found, and false otherwise */
TgEXTN TgBOOL                               FCN_F(tgMH_Calc_Root_2)( VAR_T(PCU) NONULL ARG0, TgSINT_F32_PCU ARG1, VAR_T() ARG2, VAR_T() ARG3, VAR_T() ARG4 );

                                            /** @addtogroup TGS_COMMON_MATH_SCALAR_ROOT
                                                @brief Calculate the root of a third degree equation*/
                                            /** @param[in] ARG0 Pointer to an array to hold the found roots (maximum of three)
                                                @param[in] ARG1 Pointer to an integer to hold the number of roots found
                                                @param[in] ARG2 Scalar value for the zero degree coefficient
                                                @param[in] ARG3 Scalar value for the first degree coefficient
                                                @param[in] ARG4 Scalar value for the second degree coefficient
                                                @param[in] ARG5 Scalar value for the third degree coefficient
                                                @return True if a root is found, and false otherwise */
TgEXTN TgBOOL                               FCN_F(tgMH_Calc_Root_3)( VAR_T(PCU) NONULL ARG0, TgSINT_F32_PCU ARG1, VAR_T() ARG2, VAR_T() ARG3, VAR_T() ARG4, VAR_T() ARG5 );

                                            /** @addtogroup TGS_COMMON_MATH_SCALAR_ROOT
                                                @brief Calculate the root of a fourth degree equation*/
                                            /** @param[in] ARG0 Pointer to an array to hold the found roots (maximum of four)
                                                @param[in] ARG1 Pointer to an integer to hold the number of roots found
                                                @param[in] ARG2 Scalar value for the zero degree coefficient
                                                @param[in] ARG3 Scalar value for the first degree coefficient
                                                @param[in] ARG4 Scalar value for the second degree coefficient
                                                @param[in] ARG5 Scalar value for the third degree coefficient
                                                @param[in] ARG6 Scalar value for the fourth degree coefficient
                                                @return True if a root is found, and false otherwise */
TgEXTN TgBOOL                               FCN_F(tgMH_Calc_Root_4)( VAR_T(PCU) NONULL ARG0,TgSINT_F32_PCU ARG1,VAR_T() ARG2,VAR_T() ARG3,VAR_T() ARG4,VAR_T() ARG5,VAR_T() ARG6 );


/* =============================================================================================================================================================================== */

#include "TgS COMMON/TgS Common - Base - Defines [Template] [Math].h_inc"
