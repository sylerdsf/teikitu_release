/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common - Geometry 3D - Tube.h_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Common ===================================================================================================================================================================== */

/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*  Public Functions                                                                                                                                                               */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

                                                /** @brief Invalidate the geometry object (tube)
                                                    @param[out] OUT Pointer to the geometry object (tube) */
TgINLINE TgVOID                                 FCN_VO(tgGM_TB_Reset)( VEC_OBJ_T(TgTUBE,PCU) OUT );

                                                /** @brief Validate the integrity of the geometry object (tube)
                                                    @param[in] ARG Pointer to a geometry object (tube)
                                                    @return True if the geometry object (tube) is valid and false otherwise */
TgINLINE TgBOOL                                 FCN_VO(tgGM_TB_Is_Valid)( VEC_OBJ_T(TgTUBE,CPCU) ARG );

                                                /** @brief Transform the geometry object (tube) at ARG0 by the matrix at ARG1
                                                    @param[in,out] ARG0 Pointer to a geometry object (tube)
                                                    @param[in] ARG1 Column-Major matrix (3x4) containing rotation and translation */
TgINLINE TgVOID                                 FCN_VO(tgGM_TB_TX)( VEC_OBJ_T(TgTUBE,PCU) ARG0, VEC_04_3_T(CPCU) ARG1 );

                                                /** @brief Transform the geometry object (tube) at ARG1 by the matrix at ARG2 and store it in ARG0
                                                    @param[out] ARG0 Pointer to a geometry object (tube)
                                                    @param[in] ARG1 Pointer to a geometry object (tube)
                                                    @param[in] ARG2 Column-Major matrix (3x4) containing rotation and translation */
TgINLINE TgVOID                                 FCN_VO(tgGM_TB_Copy_TX)( VEC_OBJ_T(TgTUBE,PCU) ARG0, VEC_OBJ_T(TgTUBE,CPCU) ARG1, VEC_04_3_T(CPCU) ARG2 );


                                                /** @brief Initialize a new geometry object (tube) with the function arguments
                                                    @param[out] ARG0 Pointer to a geometry object (tube)
                                                    @param[in] ARG1 Pointer to a direction vector - first basis vector
                                                    @param[in] ARG2 Pointer to a direction vector - normalized direction of the axis
                                                    @param[in] ARG3 Pointer to a direction vector - second basis vector
                                                    @param[in] ARG4 Pointer to a position vector - origin
                                                    @param[in] ARG5 Scalar value - extent of the axis from origin to the end of the axis
                                                    @param[in] ARG6 Scalar value - radius */
TgINLINE TgVOID                                 FCN_VO(tgGM_TB_Init)( VEC_OBJ_T(TgTUBE,PCU) ARG0, VEC_T(1,CPCU) ARG1, VEC_T(1,CPCU) ARG2, VEC_T(1,CPCU) ARG3, VEC_T(1,CPCU) ARG4,
                                                                     VAR_T(C) ARG5, VAR_T(C) ARG6 );

                                                /** @brief Initialize a new geometry object (tube) with the function arguments
                                                    @param[out] ARG0 Pointer to a geometry object (tube)
                                                    @param[in] ARG1 Column-Major matrix (3x4) containing rotation (basis vectors) and origin
                                                    @param[in] ARG2 Scalar value - extent of the axis from origin to the end of the axis
                                                    @param[in] ARG3 Scalar value - radius */
TgINLINE TgVOID                                 FCN_VO(tgGM_TB_Init_3D)( VEC_OBJ_T(TgTUBE,PCU) ARG0, VEC_04_3_T(CPCU) ARG1, VAR_T(C) ARG2, VAR_T(C) ARG3 );

                                                /** @brief Copy the one geometry object (tube) to another of the same type
                                                    @param[out] ARG0 Pointer to a geometry object (tube)
                                                    @param[in] ARG1 Pointer to a geometry object (tube) */
TgINLINE TgVOID                                 FCN_VO(tgGM_TB_Copy)( VEC_OBJ_T(TgTUBE,PCU) ARG0, VEC_OBJ_T(TgTUBE,CPCU) ARG1 );


                                                /** @brief Set the origin
                                                    @param[in,out] ARG0 Pointer to a geometry object (tube)
                                                    @param[in] ARG1 Pointer to a position vector */
TgINLINE TgVOID                                 FCN_VO(tgGM_TB_Set_Origin)( VEC_OBJ_T(TgTUBE,PCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                                /** @brief Set all three of the basis vectors and the origin
                                                    @note Orthogonality of the basis vectors is the responsibility of the caller
                                                    @param[in,out] ARG0 Pointer to a geometry object (tube)
                                                    @param[in] ARG1 Pointer to a direction vector - first basis vector
                                                    @param[in] ARG2 Segment - Half segment of the axis
                                                    @param[in] ARG3 Pointer to a direction vector - second basis vector */
TgINLINE TgVOID                                 FCN_VO(tgGM_TB_Set_Axes_Unit)( VEC_OBJ_T(TgTUBE,PCU) ARG0, VEC_T(1,CPCU) ARG1, VEC_T(1,CPCU) ARG2, VEC_T(1,CPCU) ARG3 );

                                                /** @brief Set all three of the basis vectors and the origin
                                                    @note Orthogonality of the basis vectors is the responsibility of the caller
                                                    @param[in,out] ARG0 Pointer to a geometry object (tube)
                                                    @param[in] ARG1 Column-Major matrix (3x4) containing rotation (basis vectors) and origin */
TgINLINE TgVOID                                 FCN_VO(tgGM_TB_Set_Axes_Unit_3D)( VEC_OBJ_T(TgTUBE,PCU) ARG0, VEC_04_3_T(CPCU) ARG1 );

                                                /** @brief Set the segment of the axis from the origin to the tube end
                                                    @note Orthogonality of the basis vectors is the responsibility of the caller
                                                    @param[in,out] ARG0 Pointer to a geometry object (tube)
                                                    @param[in] ARG1 Pointer to a basis vector */
TgINLINE TgVOID                                 FCN_VO(tgGM_TB_Set_Half_Axis)( VEC_OBJ_T(TgTUBE,PCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                                /** @brief Set the direction (normalized) of the tube's axis
                                                    @note Orthogonality of the basis vectors is the responsibility of the caller
                                                    @param[in,out] ARG0 Pointer to a geometry object (tube)
                                                    @param[in] ARG1 Pointer to a basis vector */
TgINLINE TgVOID                                 FCN_VO(tgGM_TB_Set_Axis_Unit)( VEC_OBJ_T(TgTUBE,PCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                                /** @brief Set the first basis vector orthogonal to the tube axis
                                                    @note Orthogonality of the basis vectors is the responsibility of the caller
                                                    @param[in,out] ARG0 Pointer to a geometry object (tube)
                                                    @param[in] ARG1 Pointer to a basis vector */
TgINLINE TgVOID                                 FCN_VO(tgGM_TB_Set_Basis_Unit_0)( VEC_OBJ_T(TgTUBE,PCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                                /** @brief Set the second basis vector orthogonal to the tube axis
                                                    @note Orthogonality of the basis vectors is the responsibility of the caller
                                                    @param[in,out] ARG0 Pointer to a geometry object (tube)
                                                    @param[in] ARG1 Pointer to a basis vector */
TgINLINE TgVOID                                 FCN_VO(tgGM_TB_Set_Basis_Unit_1)( VEC_OBJ_T(TgTUBE,PCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                                /** @brief Set all three of the basis vectors and the origin
                                                    @note Orthogonality of the basis vectors is the responsibility of the caller
                                                    @param[in,out] ARG0 Pointer to a geometry object (tube)
                                                    @param[in] ARG1 Column-Major matrix (3x4) containing rotation (basis vectors) and origin */
TgINLINE TgVOID                                 FCN_VO(tgGM_TB_Set_3D)( VEC_OBJ_T(TgTUBE,PCU) ARG0, VEC_04_3_T(CPCU) ARG1 );

                                                /** @brief Set the extent (magnitude of the half axis)
                                                    @param[in,out] ARG0 Pointer to a geometry object (tube)
                                                    @param[in] ARG1 Scalar Value */
TgINLINE TgVOID                                 FCN_VO(tgGM_TB_Set_Extent)( VEC_OBJ_T(TgTUBE,PCU) ARG0, VAR_T(C) ARG1 );

                                                /** @brief Set the radius
                                                    @param[in,out] ARG0 Pointer to a geometry object (tube)
                                                    @param[in] ARG1 Scalar Value */
TgINLINE TgVOID                                 FCN_VO(tgGM_TB_Set_Radius)( VEC_OBJ_T(TgTUBE,PCU) ARG0, VAR_T(C) ARG1 );


                                                /** @brief Return the origin
                                                    @param[in] ARG Pointer to a geometry object (tube)
                                                    @return The origin */
TgINLINE VEC_T(1,CP)                            FCN_VO(tgGM_TB_Query_Origin)( VEC_OBJ_T(TgTUBE,CPCU) ARG );

                                                /** @brief Return the segment from an end of the tube to the mid point of the axis
                                                    @param[in] ARG Pointer to a geometry object (tube)
                                                    @return The segment from an end of the tube to the mid point of the axis */
TgINLINE VEC_T(1,CP)                            FCN_VO(tgGM_TB_Query_Half_Axis)( VEC_OBJ_T(TgTUBE,CPCU) ARG );

                                                /** @brief Return the segment that is the tube axis
                                                    @param[in] ARG Pointer to a geometry object (tube)
                                                    @return The segment that is the tube axis */
TgINLINE VEC_OBJ_T(TgSEGMENT,CP)                FCN_VO(tgGM_TB_Query_Segment)( VEC_OBJ_T(TgTUBE,CPCU) ARG );

                                                /** @brief Return the a normalized direction of the tube's axis
                                                    @param[in] ARG Pointer to a geometry object (tube)
                                                    @return The normalized direction of the tube's axis */
TgINLINE VEC_T(1,CP)                            FCN_VO(tgGM_TB_Query_Axis_Unit)( VEC_OBJ_T(TgTUBE,CPCU) ARG );

                                                /** @brief Return the first basis vector orthogonal to the tube axis
                                                    @param[in] ARG Pointer to a geometry object (tube)
                                                    @return The first basis vector orthogonal to the tube axis */
TgINLINE VEC_T(1,CP)                            FCN_VO(tgGM_TB_Query_Basis_Unit_0)( VEC_OBJ_T(TgTUBE,CPCU) ARG );

                                                /** @brief Return the second basis vector orthogonal to the tube axis
                                                    @param[in] ARG Pointer to a geometry object (tube)
                                                    @return The second basis vector orthogonal to the tube axis */
TgINLINE VEC_T(1,CP)                            FCN_VO(tgGM_TB_Query_Basis_Unit_1)( VEC_OBJ_T(TgTUBE,CPCU) ARG );

                                                /** @brief Return the extent (magnitude of the half axis)
                                                    @param[in,out] ARG0 Pointer to a geometry object (tube)
                                                    @return The extent (magnitude of the half axis) */
TgINLINE VAR_T()                                FCN_VO(tgGM_TB_Query_Extent)( VEC_OBJ_T(TgTUBE,CPCU) ARG );

                                                /** @brief Return the radius
                                                    @param[in] ARG Pointer to a geometry object (tube)
                                                    @return The radius */
TgINLINE VAR_T()                                FCN_VO(tgGM_TB_Query_Radius)( VEC_OBJ_T(TgTUBE,CPCU) ARG );

                                                /** @brief Return the radius squared
                                                    @param[in] ARG Pointer to a geometry object (tube)
                                                    @return The radius squared */
TgINLINE VAR_T()                                FCN_VO(tgGM_TB_Query_Radius_Sq)( VEC_OBJ_T(TgTUBE,CPCU) ARG );
