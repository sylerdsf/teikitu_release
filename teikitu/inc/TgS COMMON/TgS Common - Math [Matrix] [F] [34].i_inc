/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common - Math [Matrix] [F] [34].i_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Common ===================================================================================================================================================================== */

/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*  Public Functions                                                                                                                                                               */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

/* ---- FCN_M(tgMH_INIT_ROT) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_INIT_ROT)( MAT_T(PCU) pxM0, MAT_T(CPCU) pxM1 )
{
    pxM0->_11 = pxM1->_11; pxM0->_12 = pxM1->_12; pxM0->_13 = pxM1->_13; pxM0->_14 = TYPE_K(0);
    pxM0->_21 = pxM1->_21; pxM0->_22 = pxM1->_22; pxM0->_23 = pxM1->_23; pxM0->_24 = TYPE_K(0);
    pxM0->_31 = pxM1->_31; pxM0->_32 = pxM1->_32; pxM0->_33 = pxM1->_33; pxM0->_34 = TYPE_K(0);
}

/* ---- FCN_M(tgMH_INIT_T) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_INIT_T)( MAT_T(PCU) pxM0, VEC_T(1,CPCU) pvS0 )
{
    pxM0->_11 = TYPE_K(1); pxM0->_12 = TYPE_K(0,0); pxM0->_13 = TYPE_K(0,0); pxM0->_14 = pvS0->m_aData[0];
    pxM0->_21 = TYPE_K(0,0); pxM0->_22 = TYPE_K(1); pxM0->_23 = TYPE_K(0,0); pxM0->_24 = pvS0->m_aData[1];
    pxM0->_31 = TYPE_K(0,0); pxM0->_32 = TYPE_K(0,0); pxM0->_33 = TYPE_K(1); pxM0->_34 = pvS0->m_aData[2];
}


/* ---- FCN_M(tgMH_INIT_T_S) --------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_INIT_T_S)( MAT_T(PCU) pxM0, VAR_T(C) fX, VAR_T(C) fY, VAR_T(C) fZ )
{
    pxM0->_11 = TYPE_K(1); pxM0->_12 = TYPE_K(0); pxM0->_13 = TYPE_K(0); pxM0->_14 = fX;
    pxM0->_21 = TYPE_K(0); pxM0->_22 = TYPE_K(1); pxM0->_23 = TYPE_K(0); pxM0->_24 = fY;
    pxM0->_31 = TYPE_K(0); pxM0->_32 = TYPE_K(0); pxM0->_33 = TYPE_K(1); pxM0->_34 = fZ;
}


/* ---- FCN_M(tgMH_Init_Euler) --------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_Init_Euler)( MAT_T(PCU) pxRet, VEC_T(1,CPCU) pvEul )
{
    FCN_M(tgMH_Set_Euler_S)( pxRet, pvEul->x, pvEul->y, pvEul->z );
    pxRet->_14 = TYPE_K(0);
    pxRet->_24 = TYPE_K(0);
    pxRet->_34 = TYPE_K(0);
}


/* ---- FCN_M(tgMH_Init_Euler_S) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_Init_Euler_S)( MAT_T(PCU) pxRet, VAR_T(C) fX, VAR_T(C) fY, VAR_T(C) fZ )
{
    FCN_M(tgMH_Set_Euler_S)( pxRet, fX, fY, fZ );
    pxRet->_14 = TYPE_K(0);
    pxRet->_24 = TYPE_K(0);
    pxRet->_34 = TYPE_K(0);
}


/* ---- FCN_M(tgMH_Init_EulerX) ---------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_Init_EulerX)( MAT_T(PCU) pxRet, VAR_T(C) fX )
{
    FCN_M(tgMH_Set_EulerX)( pxRet, fX );
    pxRet->_14 = TYPE_K(0);
    pxRet->_24 = TYPE_K(0);
    pxRet->_34 = TYPE_K(0);
}


/* ---- FCN_M(tgMH_Init_EulerY) ---------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_Init_EulerY)( MAT_T(PCU) pxRet, VAR_T(C) fY )
{
    FCN_M(tgMH_Set_EulerY)( pxRet, fY );
    pxRet->_14 = TYPE_K(0);
    pxRet->_24 = TYPE_K(0);
    pxRet->_34 = TYPE_K(0);
}


/* ---- FCN_M(tgMH_Init_EulerZ) ---------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_Init_EulerZ)( MAT_T(PCU) pxRet, VAR_T(C) fZ )
{
    FCN_M(tgMH_Set_EulerZ)( pxRet, fZ );
    pxRet->_14 = TYPE_K(0);
    pxRet->_24 = TYPE_K(0);
    pxRet->_34 = TYPE_K(0);
}


/* ---- FCN_M(tgMH_Init_Quat) ---------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_Init_Quat)( MAT_T(PCU) pxRet, VEC_T(1,CPCU) pqR0 )
{
    FCN_M(tgMH_Set_Quat)( pxRet, pqR0 );
    pxRet->_14 = TYPE_K(0);
    pxRet->_24 = TYPE_K(0);
    pxRet->_34 = TYPE_K(0);
}


/* ---- FCN_M(tgMH_CAT) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_CAT)( MAT_T(PCU) pxRet, MAT_T(CPCU) pxM0, MAT_T(CPCU) pxM1 )
{
    TgUINT_F32                          ui0;

    for (ui0 = 0; ui0 < 3; ++ui0)
    {
        pxRet->m_aRowCol[ui0][0] = pxM0->m_aRowCol[ui0][0] * pxM1->m_aRowCol[0][0] 
                                 + pxM0->m_aRowCol[ui0][1] * pxM1->m_aRowCol[1][0]
                                 + pxM0->m_aRowCol[ui0][2] * pxM1->m_aRowCol[2][0];

        pxRet->m_aRowCol[ui0][1] = pxM0->m_aRowCol[ui0][0] * pxM1->m_aRowCol[0][1]
                                 + pxM0->m_aRowCol[ui0][1] * pxM1->m_aRowCol[1][1]
                                 + pxM0->m_aRowCol[ui0][2] * pxM1->m_aRowCol[2][1];

        pxRet->m_aRowCol[ui0][2] = pxM0->m_aRowCol[ui0][0] * pxM1->m_aRowCol[0][2]
                                 + pxM0->m_aRowCol[ui0][1] * pxM1->m_aRowCol[1][2]
                                 + pxM0->m_aRowCol[ui0][2] * pxM1->m_aRowCol[2][2];

        pxRet->m_aRowCol[ui0][3] = pxM0->m_aRowCol[ui0][0] * pxM1->m_aRowCol[0][3]
                                 + pxM0->m_aRowCol[ui0][1] * pxM1->m_aRowCol[1][3]
                                 + pxM0->m_aRowCol[ui0][2] * pxM1->m_aRowCol[2][3]
                                 + pxM0->m_aRowCol[ui0][3];
    };
}


/* ---- FCN_M(tgMH_INV_DET) ------------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_INV_DET)( MAT_T(PCU) pxRet, VAR_T(C) fDet, MAT_T(CPCU) pxM1 )
{
    if (FCN_F(tgCM_NR0)(fDet))
    {
        TgERROR_MSGF( 0, "%-16.16s(%-32.32s): Matrix is Singular - Zero Matrix returned.\n", "Math", "F_INV" );
        FCN_M(tgMH_CLR)( pxRet );
    }
    else
    {
        VAR_T(C)                                fInvDet = TYPE_K(1) / fDet;

        pxRet->_11 = fInvDet*(pxM1->_22 * pxM1->_33 - pxM1->_23 * pxM1->_32);
        pxRet->_12 = -fInvDet*(pxM1->_12 * pxM1->_33 - pxM1->_13 * pxM1->_32);
        pxRet->_13 = fInvDet*(pxM1->_12 * pxM1->_23 - pxM1->_13 * pxM1->_22);
        pxRet->_14 = -(pxRet->_11*pxM1->_14 + pxRet->_12*pxM1->_24 + pxRet->_13*pxM1->_34);

        pxRet->_21 = -fInvDet*(pxM1->_21 * pxM1->_33 - pxM1->_23 * pxM1->_31);
        pxRet->_22 = fInvDet*(pxM1->_11 * pxM1->_33 - pxM1->_13 * pxM1->_31);
        pxRet->_23 = -fInvDet*(pxM1->_11 * pxM1->_23 - pxM1->_13 * pxM1->_21);
        pxRet->_24 = -(pxRet->_21*pxM1->_14 + pxRet->_22*pxM1->_24 + pxRet->_23*pxM1->_34);

        pxRet->_31 = fInvDet*(pxM1->_21 * pxM1->_32 - pxM1->_22 * pxM1->_31);
        pxRet->_32 = -fInvDet*(pxM1->_11 * pxM1->_32 - pxM1->_12 * pxM1->_31);
        pxRet->_33 = fInvDet*(pxM1->_11 * pxM1->_22 - pxM1->_12 * pxM1->_21);
        pxRet->_34 = -(pxRet->_31*pxM1->_14 + pxRet->_32*pxM1->_24 + pxRet->_33*pxM1->_34);
    };
}


/* ---- FCN_M(tgMH_INV) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_INV)( MAT_T(PCU) pxRet, MAT_T(CPCU) pxM1 )
{
    FCN_M(tgMH_INV_DET)( pxRet, FCN_M(tgMH_DET)(pxM1), pxM1 );
}


/* ---- FCN_M(tgMH_DET) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCN_M(tgMH_DET)( MAT_T(CPCU) pxM1 )
{
    return (
        pxM1->_11*(pxM1->_22*pxM1->_33 - pxM1->_23*pxM1->_32) +
        pxM1->_12*(pxM1->_23*pxM1->_31 - pxM1->_21*pxM1->_33) +
        pxM1->_13*(pxM1->_21*pxM1->_32 - pxM1->_22*pxM1->_31)
    );
}


/* ---- FCN_M(tgMH_TX) ----------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_M(tgMH_TX)( MAT_T(CPCU) ptxM0, VEC_T(1,CPCU) pvX0 )
{
    VEC_T(1)                            vRet;

    vRet.x = FCN_V(tgMH_DOT)( ptxM0->m_avRow + 0, pvX0 );
    vRet.y = FCN_V(tgMH_DOT)( ptxM0->m_avRow + 1, pvX0 );
    vRet.z = FCN_V(tgMH_DOT)( ptxM0->m_avRow + 2, pvX0 );
    vRet.w = pvX0->w;

    return (vRet);
}


/* ---- FCN_M(tgMH_TX_P) --------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_M(tgMH_TX_P)( MAT_T(CPCU) pxTX, VEC_T(1,CPCU) pv3 )
{
    VEC_T(1)                            vRet;

    vRet.x = FCN_V(tgMH_DOT3)(pxTX->m_avRow + 0, pv3) + pxTX->_14;
    vRet.y = FCN_V(tgMH_DOT3)(pxTX->m_avRow + 1, pv3) + pxTX->_24;
    vRet.z = FCN_V(tgMH_DOT3)(pxTX->m_avRow + 2, pv3) + pxTX->_34;
    vRet.w = TYPE_K(1);

    return (vRet);
}


/* ---- FCN_M(tgMH_TX_V) --------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_M(tgMH_TX_V)( MAT_T(CPCU) pxTX, VEC_T(1,CPCU) pv3 )
{
    VEC_T(1)                            vRet;

    vRet.x = FCN_V(tgMH_DOT3)(pxTX->m_avRow + 0, pv3);
    vRet.y = FCN_V(tgMH_DOT3)(pxTX->m_avRow + 1, pv3);
    vRet.z = FCN_V(tgMH_DOT3)(pxTX->m_avRow + 2, pv3);
    vRet.w = TYPE_K(0);

    return (vRet);
}


/* ---- FCN_M(tgMH_Get_Col_0) ---------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_M(tgMH_Get_Col_0)( MAT_T(CPCU) pxM0 )
{
    return (FCN_V(tgMH_SET_S)(pxM0->_11, pxM0->_21, pxM0->_31, TYPE_K(0)));
}


/* ---- FCN_M(tgMH_Get_Col_1) ---------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_M(tgMH_Get_Col_1)( MAT_T(CPCU) pxM0 )
{
    return (FCN_V(tgMH_SET_S)(pxM0->_12, pxM0->_22, pxM0->_32, TYPE_K(0)));
}


/* ---- FCN_M(tgMH_Get_Col_2) ---------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_M(tgMH_Get_Col_2)( MAT_T(CPCU) pxM0 )
{
    return (FCN_V(tgMH_SET_S)(pxM0->_13, pxM0->_23, pxM0->_33, TYPE_K(0)));
}


/* ---- FCN_M(tgMH_Get_Col_3) ---------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_M(tgMH_Get_Col_3)( MAT_T(CPCU) pxM0 )
{
    return (FCN_V(tgMH_SET_S)(pxM0->_14, pxM0->_24, pxM0->_34, TYPE_K(1)));
}


/* ---- FCN_M(tgMH_Matrix2Euler_S) ----------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_Matrix2Euler_S)( VAR_T(P) pfX, VAR_T(P) pfY, VAR_T(P) pfZ, MAT_T(CPC) pxR0 )
{
    if (TYPE_K(1) - pxR0->_13 <= VAR_K(KTgEPS))
    {
        *pfX = FCN_F(tgPM_ATAN2)( pxR0->_21, pxR0->_31 );
        *pfY = -VAR_K(KTgHALF_PI);
        *pfZ = TYPE_K(0);
    }
    else if (VAR_K(KTgEPS) >= TYPE_K(1) + pxR0->_13)
    {
        *pfX = FCN_F(tgPM_ATAN2)( pxR0->_21, pxR0->_31 );
        *pfY = VAR_K(KTgHALF_PI);
        *pfZ = TYPE_K(0);
    }
    else
    {
        *pfX = FCN_F(tgPM_ATAN2)( pxR0->_23, pxR0->_33 );
        *pfY = FCN_F(tgPM_ASIN)( -pxR0->_13 );
        *pfZ = FCN_F(tgPM_ATAN2)( pxR0->_12, pxR0->_11 );
    };
}


/* ---- FCN_M(tgMH_Matrix2Euler) ------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_Matrix2Euler)( VEC_T(1,PCU) pvEul, MAT_T(CPC) pxR0 )
{
    pvEul->w = TYPE_K(0);
    FCN_M(tgMH_Matrix2Euler_S)( &pvEul->x, &pvEul->y, &pvEul->z, pxR0 );
}


/* ---- FCN_M(tgMH_Matrix2Quat) -------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_Matrix2Quat)( VEC_T(1,PCU) pqR0, MAT_T(CPC) pxR0 )
{
    VAR_T(C)                            fTrace = pxR0->_11 + pxR0->_22 + pxR0->_33;

    if (fTrace > VAR_K(KTgEPS))
    {
        VAR_T(C)                            fSqrt = FCN_F(tgPM_SQRT)( fTrace + TYPE_K(1) );
        VAR_T(C)                            fScale = TYPE_K(0,5) / fSqrt;

        pqR0->x = (pxR0->_32 - pxR0->_23)*fScale;
        pqR0->y = (pxR0->_13 - pxR0->_31)*fScale;
        pqR0->z = (pxR0->_21 - pxR0->_12)*fScale;
        pqR0->w = TYPE_K(0,5)*fSqrt;
    }
    else
    {
        if (pxR0->_11 > pxR0->_22 && pxR0->_11 > pxR0->_33)
        {
            VAR_T(C)                            fDiag = TYPE_K(1) + pxR0->_11 - pxR0->_22 - pxR0->_33;
            VAR_T(C)                            fSqrt = FCN_F(tgPM_SQRT)( fDiag );
            VAR_T(C)                            fScale = TYPE_K(0,5) / fSqrt;

            pqR0->x = TYPE_K(0,5)*fSqrt;
            pqR0->y = (pxR0->_12 + pxR0->_21)*fScale;
            pqR0->z = (pxR0->_13 + pxR0->_31)*fScale;
            pqR0->w = (pxR0->_23 - pxR0->_32)*fScale;
        }
        else if (pxR0->_22 > pxR0->_33)
        {
            VAR_T(C)                            fDiag = TYPE_K(1) + pxR0->_22 - pxR0->_11 - pxR0->_33;
            VAR_T(C)                            fSqrt = FCN_F(tgPM_SQRT)( fDiag );
            VAR_T(C)                            fScale = TYPE_K(0,5) / fSqrt;

            pqR0->x = (pxR0->_12 + pxR0->_21)*fScale;
            pqR0->y = TYPE_K(0,5)*fSqrt;
            pqR0->z = (pxR0->_23 + pxR0->_32)*fScale;
            pqR0->w = (pxR0->_13 - pxR0->_31)*fScale;
        }
        else
        {
            VAR_T(C)                            fDiag = TYPE_K(1) + pxR0->_33 - pxR0->_11 - pxR0->_22;
            VAR_T(C)                            fSqrt = FCN_F(tgPM_SQRT)( fDiag );
            VAR_T(C)                            fScale = TYPE_K(0,5) / fSqrt;

            pqR0->x = (pxR0->_13 + pxR0->_31)*fScale;
            pqR0->y = (pxR0->_23 + pxR0->_32)*fScale;
            pqR0->z = TYPE_K(0,5)*fSqrt;
            pqR0->w = (pxR0->_12 - pxR0->_21)*fScale;
        };
    };
}


/* ---- FCN_M(tgMH_Init_Basis_From_Vector) --------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_Init_Basis_From_Vector)( MAT_T(PCU) pxRet, VEC_T(1,CPCU) pvAxis )
{
    VAR_T(C) fXZ = FCN_F(tgPM_SQRT)( pvAxis->m_aData[0] * pvAxis->m_aData[0] + pvAxis->m_aData[2] * pvAxis->m_aData[2] );

    TgERROR((FCN_V(tgMH_Is_Vector_Valid)(pvAxis)) && (FCN_F(tgCM_NR1)(FCN_V(tgMH_LSQ)(pvAxis))));

    if (FCN_F(tgCM_NR0)(fXZ))
    {
        /* The parameter axis is within absolute tolerance of the standard ortho-normal definition (y-axis) It is sufficient to return the identity basis.  The identity */
        /* function can not be used since the matrix being used could include other information (like translation) which should not be destroyed. */

        FCN_M(tgMH_CLI)(pxRet);
    }
    else
    {
        VAR_T(C)                            fInvXZ = TYPE_K(1) / fXZ;

        /*  Since the axis is known to be different from the standard y-axis - it is trivial to construct another basis vector by taking the cross product of the two */
        /* vectors.  Simplified this becomes: */

        pxRet->_11 = -pvAxis->z * fInvXZ;
        pxRet->_12 = pvAxis->x;
        pxRet->_13 = -pvAxis->x*pvAxis->y;
        pxRet->_14 = TYPE_K(0);

        pxRet->_21 = TYPE_K(0);
        pxRet->_22 = pvAxis->y;
        pxRet->_23 = pvAxis->x*pvAxis->x + pvAxis->z*pvAxis->z;
        pxRet->_24 = TYPE_K(0);

        pxRet->_31 = pvAxis->x * fInvXZ;
        pxRet->_32 = pvAxis->z;
        pxRet->_33 = -pvAxis->z*pvAxis->y;
        pxRet->_34 = TYPE_K(0);
    };
}




/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
/*  TgS Common - Math API [Matrix] [F] [34] */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

/* ---- FCN_M(tgMH_TR) ----------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_TR)( VEC_04_4_T(PCU) pxTX, MAT_T(CPCU) pxM0 )
{
    pxTX->m_aRowCol[0][0] = pxM0->m_aRowCol[0][0];
    pxTX->m_aRowCol[0][1] = pxM0->m_aRowCol[1][0];
    pxTX->m_aRowCol[0][2] = pxM0->m_aRowCol[2][0];
    pxTX->m_aRowCol[0][3] = TYPE_K(0);

    pxTX->m_aRowCol[1][0] = pxM0->m_aRowCol[0][1];
    pxTX->m_aRowCol[1][1] = pxM0->m_aRowCol[1][1];
    pxTX->m_aRowCol[1][2] = pxM0->m_aRowCol[2][1];
    pxTX->m_aRowCol[1][3] = TYPE_K(0);

    pxTX->m_aRowCol[2][0] = pxM0->m_aRowCol[0][2];
    pxTX->m_aRowCol[2][1] = pxM0->m_aRowCol[1][2];
    pxTX->m_aRowCol[2][2] = pxM0->m_aRowCol[2][2];
    pxTX->m_aRowCol[2][3] = TYPE_K(0);

    pxTX->m_aRowCol[3][0] = pxM0->m_aRowCol[0][3];
    pxTX->m_aRowCol[3][1] = pxM0->m_aRowCol[1][3];
    pxTX->m_aRowCol[3][2] = pxM0->m_aRowCol[2][3];
    pxTX->m_aRowCol[3][3] = TYPE_K(1);
}


/* ---- FCN_M(tgMH_LookLH_V4) ---------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_LookLH)( MAT_T(PCU) pxRet, VEC_T(1,CPCU) pvFrom, VEC_T(1,CPCU) pvTo, VEC_T(1,CPCU) pvUp )
{
    VEC_T(1)                            vLook, vRight, vCamUp;
    VAR_T()                             fLength;

    /* VectorNorm and Build Orthonormal Camera Axis */
    vLook = FCN_V(tgMH_SUB)( pvTo, pvFrom );
    vLook = FCN_V(tgMH_NORM_LEN)( &fLength, &vLook );
    if (FCN_F(tgCM_NR0)(fLength))
    {
        FCN_M(tgMH_CLI)(pxRet);
        return;
    };

    vRight = FCN_V(tgMH_UCX_LEN)( &fLength, pvUp, &vLook );
    if (FCN_F(tgCM_NR0)(fLength))
    {
        FCN_M(tgMH_CLI)(pxRet);
        return;
    };

    vCamUp = FCN_V(tgMH_CX)( &vLook, &vRight );

    pxRet->_11 = vRight.x;  pxRet->_12 = vRight.y;  pxRet->_13 = vRight.z;  pxRet->_14 = -FCN_V(tgMH_DOT)(&vRight, pvFrom);
    pxRet->_21 = vCamUp.x;  pxRet->_22 = vCamUp.y;  pxRet->_23 = vCamUp.z;  pxRet->_24 = -FCN_V(tgMH_DOT)(&vCamUp, pvFrom);
    pxRet->_31 = vLook.x;   pxRet->_32 = vLook.y;   pxRet->_33 = vLook.z;   pxRet->_34 = -FCN_V(tgMH_DOT)(&vLook, pvFrom);
}


/* ---- FCN_M(tgMH_LookRH) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_LookRH)( MAT_T(PCU) pxRet, VEC_T(1,CPCU) pvFrom, VEC_T(1,CPCU) pvTo, VEC_T(1,CPCU) pvUp )
{
    VEC_T(1)                            vLook, vRight, vCamUp;
    VAR_T()                             fLength;

    /* VectorNorm and Build Orthonormal Camera Axis */
    vLook = FCN_V(tgMH_SUB)( pvFrom, pvTo );
    vLook = FCN_V(tgMH_NORM_LEN)( &fLength, &vLook );
    if (FCN_F(tgCM_NR0)(fLength))
    {
        FCN_M(tgMH_CLI)(pxRet);
        return;
    };

    vRight = FCN_V(tgMH_UCX_LEN)( &fLength, pvUp, &vLook );
    if (FCN_F(tgCM_NR0)(fLength))
    {
        FCN_M(tgMH_CLI)(pxRet);
        return;
    };

    vCamUp = FCN_V(tgMH_CX)( &vLook, &vRight );

    pxRet->_11 = vRight.x;  pxRet->_12 = vRight.y;  pxRet->_13 = vRight.z;  pxRet->_14 = FCN_V(tgMH_DOT)( &vRight, pvFrom );
    pxRet->_21 = vCamUp.x;  pxRet->_22 = vCamUp.y;  pxRet->_23 = vCamUp.z;  pxRet->_24 = FCN_V(tgMH_DOT)( &vCamUp, pvFrom );
    pxRet->_31 = vLook.x;   pxRet->_32 = vLook.y;   pxRet->_33 = vLook.z;   pxRet->_34 = FCN_V(tgMH_DOT)( &vLook, pvFrom );
}


/* ---- FCN_M(tgMH_Look) --------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgVOID FCN_M(tgMH_Look)( MAT_T(PCU) pxRet, VEC_T(1,CPCU) pvFrom, VEC_T(1,CPCU) pvTo, VEC_T(1,CPCU) pvUp )
{
    FCN_M(tgMH_LookLH)(pxRet, pvFrom, pvTo, pvUp);
}


