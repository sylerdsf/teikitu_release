/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common - Math API [Matrix] [F].h_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Common ===================================================================================================================================================================== */

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_LOAD
                                                @brief Initialize the rotation of matrix (ARG0) from the matrix at ARG1
                                                @param[out] OUT0 Matrix
                                                @param[in] ARG1 Matrix */
TgINLINE TgVOID                             FCN_M(tgMH_INIT_ROT)( MAT_T(PCU) OUT0, MAT_T(CPCU) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_LOAD
                                                @brief Initialize the translocation of the matrix (ARG0) to the location ARG1
                                                @param[out] OUT0 Matrix
                                                @param[in] ARG1 Vector */
TgINLINE TgVOID                             FCN_M(tgMH_INIT_T)( MAT_T(PCU) OUT0, VEC_T(1,CPCU) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_LOAD
                                                @brief Initialize the translocation of the matrix (ARG0) to the location ARG1-ARG3
                                                @param[out] OUT0 Matrix
                                                @param[in] ARG1 X Location
                                                @param[in] ARG2 Y Location
                                                @param[in] ARG3 Z Location */
TgINLINE TgVOID                             FCN_M(tgMH_INIT_T_S)( MAT_T(PCU) OUT0, VAR_T(C) ARG1, VAR_T(C) ARG2, VAR_T(C) ARG3 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_LOAD
                                                @brief Initialize the rotation of the matrix (ARG0) to an Euler rotation from the first three elements of the vector ARG1
                                                @param[in,out] ARG0 Destination matrix
                                                @param[in] ARG1 Vector holding three Euler Angles */
TgINLINE TgVOID                             FCN_M(tgMH_Init_Euler)( MAT_T(PCU) OUT0, VEC_T(1,CPCU) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_LOAD
                                                @brief Initialize the rotation of the matrix (ARG0) to an Euler rotation of ARG1-ARG3
                                                @param[out] OUT0 Matrix
                                                @param[in] ARG1 Euler X angle
                                                @param[in] ARG2 Euler Y angle
                                                @param[in] ARG3 Euler Z angle */
TgINLINE TgVOID                             FCN_M(tgMH_Init_Euler_S)( MAT_T(PCU) OUT0, VAR_T(C) ARG1, VAR_T(C) ARG2, VAR_T(C) ARG3 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_LOAD
                                                @brief Initialize a matrix with a matching rotation of ARG1 around the X axis
                                                @param[out] OUT0 Matrix
                                                @param[in] ARG1 Angle */
TgINLINE TgVOID                             FCN_M(tgMH_Init_EulerX)( MAT_T(PCU) OUT0, VAR_T(C) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_LOAD
                                                @brief Initialize a matrix with a matching rotation of ARG1 around the Y axis
                                                @param[out] OUT0 Matrix
                                                @param[in] ARG1 Angle */
TgINLINE TgVOID                             FCN_M(tgMH_Init_EulerY)( MAT_T(PCU) OUT0, VAR_T(C) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_LOAD
                                                @brief Initialize a matrix with a matching rotation of ARG1 around the Z axis
                                                @param[out] OUT0 Matrix
                                                @param[in] ARG1 Angle */
TgINLINE TgVOID                             FCN_M(tgMH_Init_EulerZ)( MAT_T(PCU) OUT0, VAR_T(C) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_LOAD
                                                @brief Initialize a matrix with a matching rotation to the quaternion at ARG1
                                                @param[out] OUT0 Matrix
                                                @param[in] ARG1 Quaternion */
TgINLINE TgVOID                             FCN_M(tgMH_Init_Quat)( MAT_T(PCU) OUT0, VEC_T(1,CPCU) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CALC
                                                @brief Initialize an eigen matrix forming a basis based on the vector at ARG1
                                                @param[out] OUT0 Matrix
                                                @param[in] ARG1 Vector */
TgINLINE TgVOID                             FCN_M(tgMH_Init_Basis_From_Vector)( MAT_T(PCU) OUT0, VEC_T(1,CPCU) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_LOAD
                                                @brief Store an identity matrix at the destination
                                                @param[out] OUT Destination matrix */
TgINLINE TgVOID                             FCN_M(tgMH_CLI)( MAT_T(PCU) OUT );




                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_LOAD
                                                @brief Set the rotation of matrix (ARG0) from the matrix at ARG1
                                                @param[in,out] ARG0
                                                @param[in] ARG1  */
TgINLINE TgVOID                             FCN_M(tgMH_SET_ROT)( MAT_T(PCU) ARG0, MAT_T(CPCU) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_LOAD
                                                @brief Set the translocation of the matrix (ARG0) to the location ARG1
                                                @param[in,out] ARG0 Matrix
                                                @param[in] ARG1 Vector */
TgINLINE TgVOID                             FCN_M(tgMH_SET_T)( MAT_T(PCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_LOAD
                                                @brief Set the translocation of the matrix (ARG0) to the location ARG1-ARG3
                                                @param[in,out] ARG0 Matrix
                                                @param[in] ARG1 X Location
                                                @param[in] ARG2 Y Location
                                                @param[in] ARG3 Z Location */
TgINLINE TgVOID                             FCN_M(tgMH_SET_S_T)( MAT_T(PCU) ARG0, VAR_T(C) ARG1, VAR_T(C) ARG2, VAR_T(C) ARG3 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_LOAD
                                                @brief Set the rotation of the matrix (ARG0) to an Euler rotation from the first three elements of the vector ARG1
                                                @param[in,out] ARG0 Destination matrix
                                                @param[in] ARG1 Vector holding three Euler Angles */
TgINLINE TgVOID                             FCN_M(tgMH_Set_Euler)( MAT_T(PCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_LOAD
                                                @brief Set the rotation of the matrix (ARG0) to an Euler rotation of ARG1-ARG3
                                                @param[in,out] ARG0 Destination matrix
                                                @param[in] ARG1 Euler X angle
                                                @param[in] ARG2 Euler Y angle
                                                @param[in] ARG3 Euler Z angle */
TgINLINE TgVOID                             FCN_M(tgMH_Set_Euler_S)( MAT_T(PCU) ARG0, VAR_T(C) ARG1, VAR_T(C) ARG2, VAR_T(C) ARG3 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_LOAD
                                                @brief Set the rotation of the matrix (ARG0) to a matching rotation of ARG1 around the X axis
                                                @param[in,out] ARG0 Destination matrix
                                                @param[in] ARG1 Euler X angle */
TgINLINE TgVOID                             FCN_M(tgMH_Set_EulerX)( MAT_T(PCU) ARG0, VAR_T(C) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_LOAD
                                                @brief Set the rotation of the matrix (ARG0) to a matching rotation of ARG1 around the Y axis
                                                @param[in,out] ARG0 Destination matrix
                                                @param[in] ARG1 Euler Y angle */
TgINLINE TgVOID                             FCN_M(tgMH_Set_EulerY)( MAT_T(PCU) ARG0, VAR_T(C) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_LOAD
                                                @brief Set the rotation of the matrix (ARG0) to a matching rotation of ARG1 around the Z axis
                                                @param[in,out] ARG0 Destination matrix
                                                @param[in] ARG1 Euler Z angle */
TgINLINE TgVOID                             FCN_M(tgMH_Set_EulerZ)( MAT_T(PCU) ARG0, VAR_T(C) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_LOAD
                                                @brief Set the rotation of the matrix (ARG0) to a matching rotation of the quaternion ARG1
                                                @param[in,out] ARG0 Destination matrix
                                                @param[in] ARG1 Quaternion */
TgINLINE TgVOID                             FCN_M(tgMH_Set_Quat)( MAT_T(PCU) ARG0, VEC_T(1,CPCU) ARG1 );




                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_ART
                                                @brief Store a matrix that is assigned the per-element operation ARG1 + ARG2
                                                @param[out] OUT0 Destination matrix
                                                @param[in] ARG1 Matrix
                                                @param[in] ARG2 Matrix */
TgINLINE TgVOID                             FCN_M(tgMH_ADD)( MAT_T(PCU) OUT0, MAT_T(CPCU) ARG1, MAT_T(CPCU) ARG2 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_ART
                                                @brief Store a matrix that is assigned the per-element operation ARG1 * ARG2
                                                @param[out] OUT0 Destination matrix
                                                @param[in] ARG1 Matrix
                                                @param[in] ARG2 Matrix */
TgINLINE TgVOID                             FCN_M(tgMH_MUL)( MAT_T(PCU) OUT0, MAT_T(CPCU) ARG1, MAT_T(CPCU) ARG2 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_ART
                                                @brief Store a matrix that is assigned the per-element operation ARG1 * ARG2
                                                @param[out] OUT0 Destination matrix
                                                @param[in] ARG1 Scalar
                                                @param[in] ARG2 Matrix */
TgINLINE TgVOID                             FCN_M(tgMH_MUL_SM)( MAT_T(PCU) OUT0, VAR_T(C) ARG1, MAT_T(CPCU) ARG2 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_ART
                                                @brief Store a matrix that is assigned the per-element operation ARG1 * ARG2
                                                @param[out] OUT0 Destination matrix
                                                @param[in] ARG1 Matrix
                                                @param[in] ARG2 Scalar */
TgINLINE TgVOID                             FCN_M(tgMH_MUL_MS)( MAT_T(PCU) OUT0, MAT_T(CPCU) ARG1, VAR_T(C) ARG2 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_ART
                                                @brief Store a matrix that is assigned the per-element operation ARG1 / ARG2
                                                @param[out] OUT0 Destination matrix
                                                @param[in] ARG1 Matrix
                                                @param[in] ARG2 Matrix */
TgINLINE TgVOID                             FCN_M(tgMH_DIV)( MAT_T(PCU) OUT0, MAT_T(CPCU) ARG1, MAT_T(CPCU) ARG2 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_ART
                                                @brief Store a matrix that is assigned the per-element operation ARG1 / ARG2
                                                @param[out] OUT0 Destination matrix
                                                @param[in] ARG1 Scalar
                                                @param[in] ARG2 Matrix */
TgINLINE TgVOID                             FCN_M(tgMH_DIV_SM)( MAT_T(PCU) OUT0, VAR_T(C) ARG1, MAT_T(CPCU) ARG2 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_ART
                                                @brief Store a matrix that is assigned the per-element operation ARG1 / ARG2
                                                @param[out] OUT0 Destination matrix
                                                @param[in] ARG1 Matrix
                                                @param[in] ARG2 Scalar */
TgINLINE TgVOID                             FCN_M(tgMH_DIV_MS)( MAT_T(PCU) OUT0, MAT_T(CPCU) ARG1, VAR_T(C) ARG2 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_ART
                                                @brief Store a matrix that is assigned the per-element operation ARG1 - ARG2
                                                @param[out] OUT0 Destination matrix
                                                @param[in] ARG1 Matrix
                                                @param[in] ARG2 Matrix */
TgINLINE TgVOID                             FCN_M(tgMH_SUB)( MAT_T(PCU) OUT0, MAT_T(CPCU) ARG1, MAT_T(CPCU) ARG2 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_ART
                                                @brief Store a matrix that is assigned the per-element operation -ARG1
                                                @param[out] OUT0 Destination matrix
                                                @param[in] ARG1 Matrix */
TgINLINE TgVOID                             FCN_M(tgMH_NEG)( MAT_T(PCU) OUT0, MAT_T(CPCU) ARG1 );




                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CALC
                                                @brief Return true if any element from the matrix at ARG are not a number, or false otherwise
                                                @param[in] ARG Matrix */
TgINLINE TgBOOL                             FCN_M(tgMH_NaN)( MAT_T(CPCU) ARG );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CALC
                                                @brief Store the concatenation (multiplication) of the two arguments (ARG1 x ARG2)
                                                @param[out] OUT0 Destination matrix
                                                @param[in] ARG1 Matrix
                                                @param[in] ARG2 Matrix */
TgINLINE TgVOID                             FCN_M(tgMH_CAT)( MAT_T(PCU) OUT0, MAT_T(CPCU) ARG1, MAT_T(CPCU) ARG2 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CALC
                                                @brief Store the inverse of the matrix at ARG2 in ARG0 and the determinant in ARG1
                                                @param[out] OUT0 Destination for inverse matrix
                                                @param[in] ARG1 Determinant of the matrix at ARG2
                                                @param[in] ARG2 Matrix */
TgINLINE TgVOID                             FCN_M(tgMH_INV_DET)( MAT_T(PCU) OUT0, VAR_T(C) ARG1, MAT_T(CPCU) ARG2 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CALC
                                                @brief Store the inverse of the matrix at ARG1 in ARG0
                                                @param[out] OUT0 Destination for inverse matrix
                                                @param[in] ARG1 Matrix */
TgINLINE TgVOID                             FCN_M(tgMH_INV)( MAT_T(PCU) OUT0, MAT_T(CPCU) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CALC
                                                @brief Return the determinant of the matrix at OUT0
                                                @param[in] ARG Matrix
                                                @return The determinant of the matrix at OUT0 */
TgINLINE VAR_T()                            FCN_M(tgMH_DET)( MAT_T(CPCU) ARG );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CALC
                                                @brief Transform the vector at ARG1 by the matrix at ARG0
                                                @param[in] ARG0 Matrix
                                                @param[in] ARG1 Vector
                                                @return The result of the transform of the vector at ARG1 by the matrix at ARG0 */
TgINLINE VEC_T(1)                           FCN_M(tgMH_TX)( MAT_T(CPCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CALC
                                                @brief Transform the vector at ARG1 (and treated as a homogeneous point) by the matrix at ARG0
                                                @param[in] ARG0 Matrix
                                                @param[in] ARG1 Vector
                                                @return The result of the transform of the vector at ARG1 (and treated as a homogeneous point) by the matrix at ARG0 */
TgINLINE VEC_T(1)                           FCN_M(tgMH_TX_P)( MAT_T(CPCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CALC
                                                @brief Transform the vector at ARG1 (and treated as a homogeneous vector) by the matrix at ARG0
                                                @param[in] ARG0 Matrix
                                                @param[in] ARG1 Vector
                                                @return The result of the transform of the vector at ARG1 (and treated as a homogeneous vector) by the matrix at ARG0 */
TgINLINE VEC_T(1)                           FCN_M(tgMH_TX_V)( MAT_T(CPCU) ARG0, VEC_T(1,CPCU) ARG1 );




                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CALC
                                                @brief Return the first column from the matrix at ARG
                                                @param[in] ARG Matrix
                                                @return The first column from the matrix at ARG */
TgINLINE VEC_T(1)                           FCN_M(tgMH_Get_Col_0)( MAT_T(CPCU) ARG );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CALC
                                                @brief Return the second column from the matrix at ARG
                                                @param[in] ARG Matrix
                                                @return The second column from the matrix at ARG */
TgINLINE VEC_T(1)                           FCN_M(tgMH_Get_Col_1)( MAT_T(CPCU) ARG );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CALC
                                                @brief Return the third column from the matrix at ARG
                                                @param[in] ARG Matrix
                                                @return The third column from the matrix at ARG */
TgINLINE VEC_T(1)                           FCN_M(tgMH_Get_Col_2)( MAT_T(CPCU) ARG );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CALC
                                                @brief Return the fourth column from the matrix at ARG
                                                @param[in] ARG Matrix
                                                @return The fourth column from the matrix at ARG */
TgINLINE VEC_T(1)                           FCN_M(tgMH_Get_Col_3)( MAT_T(CPCU) ARG );




                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CALC
                                                @brief Store the three Euler angles that match the rotation of the matrix at ARG3
                                                @param[out] OUT0 Pointer to a scalar value for the X rotation
                                                @param[out] OUT1 Pointer to a scalar value for the Y rotation
                                                @param[out] OUT2 Pointer to a scalar value for the Z rotation
                                                @param[in] ARG3 Matrix */
TgINLINE TgVOID                             FCN_M(tgMH_Matrix2Euler_S)( VAR_T(P) OUT0, VAR_T(P) OUT1, VAR_T(P) OUT2, MAT_T(CPC) ARG3 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CALC
                                                @brief Store the three Euler angles that match the rotation of the matrix at ARG3
                                                @param[out] OUT0 Pointer to a vector to hold the three Euler angles
                                                @param[in] ARG1 Matrix */
TgINLINE TgVOID                             FCN_M(tgMH_Matrix2Euler)( VEC_T(1,PCU) OUT0, MAT_T(CPC) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CALC
                                                @brief Store the quaternion that matches the rotation of the matrix at ARG3
                                                @param[out] OUT0 Quaternion
                                                @param[in] ARG1 Matrix */
TgINLINE TgVOID                             FCN_M(tgMH_Matrix2Quat)( VEC_T(1,PCU) OUT0, MAT_T(CPC) ARG1 );

