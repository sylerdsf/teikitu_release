/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common - Math [Vector] [F].i_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Common ===================================================================================================================================================================== */

/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*  Public Functions                                                                                                                                                               */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

/* ---- FCN_V(tgMH_ADD) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_ADD)( VEC_T(1,CPCU) pv0, VEC_T(1,CPCU) pv1 )
{
    #define EQN(A) (pv0->m_aData[A] + pv1->m_aData[A])
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}

/* ---- FCN_V(tgMH_MAD) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_MAD)( VEC_T(1,CPCU) pv0, VEC_T(1,CPCU) pv1, VEC_T(1,CPCU) pv2 )
{
    #define EQN(A) pv0->m_aData[A]*pv1->m_aData[A] + pv2->m_aData[A]
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_NMS) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_NMS)( VEC_T(1,CPCU) pv0, VEC_T(1,CPCU) pv1, VEC_T(1,CPCU) pv2 )
{
    #define EQN(A) -(pv0->m_aData[A]*pv1->m_aData[A] - pv2->m_aData[A])
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_DOT) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCN_V(tgMH_DOT)( VEC_T(1,CPCU) pv0, VEC_T(1,CPCU) pv1 )
{
    return (
          pv0->m_aData[0] * pv1->m_aData[0]
    #if (TEMPLATE__VECTOR_DIM > 1)
        + pv0->m_aData[1] * pv1->m_aData[1]
    #endif
    #if (TEMPLATE__VECTOR_DIM > 2)
        + pv0->m_aData[2] * pv1->m_aData[2]
    #endif
    #if (TEMPLATE__VECTOR_DIM > 3)
        + pv0->m_aData[3] * pv1->m_aData[3]
    #endif
    #if (TEMPLATE__VECTOR_DIM > 4)
        + pv0->m_aData[4] * pv1->m_aData[4]
    #endif
    #if (TEMPLATE__VECTOR_DIM > 5)
        + pv0->m_aData[5] * pv1->m_aData[5]
    #endif
    #if (TEMPLATE__VECTOR_DIM > 6)
        + pv0->m_aData[6] * pv1->m_aData[6]
    #endif
    #if (TEMPLATE__VECTOR_DIM > 7)
        + pv0->m_aData[7] * pv1->m_aData[7]
    #endif
    #if (TEMPLATE__VECTOR_DIM > 8)
        + pv0->m_aData[8] * pv1->m_aData[8]
    #endif
    #if (TEMPLATE__VECTOR_DIM > 9)
        + pv0->m_aData[9] * pv1->m_aData[9]
    #endif
    #if (TEMPLATE__VECTOR_DIM > 10)
        + pv0->m_aData[10] * pv1->m_aData[10]
    #endif
    #if (TEMPLATE__VECTOR_DIM > 11)
        + pv0->m_aData[11] * pv1->m_aData[11]
    #endif
    #if (TEMPLATE__VECTOR_DIM > 12)
        + pv0->m_aData[12] * pv1->m_aData[12]
    #endif
    #if (TEMPLATE__VECTOR_DIM > 13)
        + pv0->m_aData[13] * pv1->m_aData[13]
    #endif
    #if (TEMPLATE__VECTOR_DIM > 14)
        + pv0->m_aData[14] * pv1->m_aData[14]
    #endif
    #if (TEMPLATE__VECTOR_DIM > 15)
        + pv0->m_aData[15] * pv1->m_aData[15]
    #endif
    #if (TEMPLATE__VECTOR_DIM > 16)
        #error DIM Exceeds expectations
    #endif
        );
}


/* ---- FCN_V(tgMH_MUL) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_MUL)( VEC_T(1,CPCU) pv0, VEC_T(1,CPCU) pv1 )
{
    #define EQN(A) pv0->m_aData[A] * pv1->m_aData[A]
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_DIV) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_DIV)( VEC_T(1,CPCU) pv0, VEC_T(1,CPCU) pv1 )
{
    #define EQN(A) pv0->m_aData[A] / pv1->m_aData[A]
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_SUB) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_SUB)( VEC_T(1,CPCU) pv0, VEC_T(1,CPCU) pv1 )
{
    #define EQN(A) pv0->m_aData[A] - pv1->m_aData[A]
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_LSQ) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCN_V(tgMH_LSQ)( VEC_T(1,CPCU) pv0 )
{
    return (FCN_V(tgMH_DOT)( pv0, pv0) );
}


/* ---- FCN_V(tgMH_LEN) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VAR_T() FCN_V(tgMH_LEN)( VEC_T(1,CPCU) pv0 )
{
    return (FCN_F(tgPM_SQRT)( FCN_V(tgMH_LSQ)(pv0)) );
}


/* ---- FCN_V(tgMH_NEG) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_NEG)( VEC_T(1,CPCU) pv0 )
{
    #define EQN(A) pv0->m_aData[A] * -TYPE_K(1)
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_SQRT) --------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_SQRT)( VEC_T(1,CPCU) pv0 )
{
    #define EQN(A) FCN_F(tgPM_SQRT)( pv0->m_aData[A] )
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_RSQRT) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_RSQRT)( VEC_T(1,CPCU) pv0 )
{
    #define EQN(A) TYPE_K(1) / FCN_F(tgPM_SQRT)( pv0->m_aData[A] )
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


#if (TEMPLATE__VECTOR_DIM==3)
/* ---- FCN_V(tgMH_NORM_LEN) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_NORM_LEN)( VAR_T(P) pfLength, VEC_T(1,CPCU) pvS0 )
{
    VAR_T(C)                            fa0 = FCN_F(tgPM_ABS)( pvS0->m_aData[0] );
    VAR_T(C)                            fa1 = FCN_F(tgPM_ABS)( pvS0->m_aData[1] );
    VAR_T(C)                            fa2 = FCN_F(tgPM_ABS)( pvS0->m_aData[2] );
    VAR_T(C)                            fM0 = FCN_F(tgCM_MAX)( fa0, fa1 );
    VAR_T(C)                            fM1 = FCN_F(tgCM_MAX)( fa1, fa2 );
    VAR_T(C)                            fMX = FCN_F(tgCM_MAX)( fM0, fM1 );
    VAR_T(C)                            f0 = pvS0->m_aData[0] / fMX;
    VAR_T(C)                            f1 = pvS0->m_aData[1] / fMX;
    VAR_T(C)                            f2 = pvS0->m_aData[2] / fMX;
    VAR_T(C)                            fLength = FCN_F(tgPM_SQRT)( f0*f0 + f1*f1 + f2*f2 );
    VAR_T(C)                            fInvLength = fLength > VAR_K(KTgEPS) ? TYPE_K(1) / fLength : TYPE_K(0);
    VEC_T(1)                            vRet;

    *pfLength = fLength*fMX;

    vRet.x = f0*fInvLength;
    vRet.y = f1*fInvLength;
    vRet.z = f2*fInvLength;

    return (vRet);
}
#elif (TEMPLATE__VECTOR_DIM==4)
/* ---- FCN_V(tgMH_NORM_LEN) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_NORM_LEN)( VAR_T(P) pfLength, VEC_T(1,CPCU) pvS0 )
{
    VAR_T(C)                            fa0 = FCN_F(tgPM_ABS)( pvS0->m_aData[0] );
    VAR_T(C)                            fa1 = FCN_F(tgPM_ABS)( pvS0->m_aData[1] );
    VAR_T(C)                            fa2 = FCN_F(tgPM_ABS)( pvS0->m_aData[2] );
    VAR_T(C)                            fa3 = FCN_F(tgPM_ABS)( pvS0->m_aData[3] );
    VAR_T(C)                            fM0 = FCN_F(tgCM_MAX)( fa0, fa1 );
    VAR_T(C)                            fM1 = FCN_F(tgCM_MAX)( fa2, fa3 );
    VAR_T(C)                            fMX = FCN_F(tgCM_MAX)( fM0, fM1 );
    VAR_T(C)                            f0 = pvS0->m_aData[0] / fMX;
    VAR_T(C)                            f1 = pvS0->m_aData[1] / fMX;
    VAR_T(C)                            f2 = pvS0->m_aData[2] / fMX;
    VAR_T(C)                            f3 = pvS0->m_aData[3] / fMX;
    VAR_T(C)                            fLength = FCN_F(tgPM_SQRT)( f0*f0 + f1*f1 + f2*f2 + f3*f3 );
    VAR_T(C)                            fInvLength = fLength > VAR_K(KTgEPS) ? TYPE_K(1) / fLength : TYPE_K(0);

    *pfLength = fLength*fMX;

    return (FCN_V(tgMH_SET_S)( f0*fInvLength, f1*fInvLength, f2*fInvLength, f3*fInvLength) );
}
#else
/* ---- FCN_V(tgMH_NORM_LEN) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_NORM_LEN)( VAR_T(P) pfLength, VEC_T(1,CPCU) pv0 )
{
    *pfLength = FCN_V(tgMH_LEN)( pv0 );
    return (FCN_V(tgMH_DIV_VS)( pv0, *pfLength ) );
}
#endif


/* ---- FCN_V(tgMH_NORM) --------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_NORM)( VEC_T(1,CPCU) pv0 )
{
    VAR_T()                         fLength;

    return (FCN_V(tgMH_NORM_LEN)( &fLength, pv0 ) );
}


/* ---- FCN_V(tgMH_FLR) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_FLR)( VEC_T(1,CPCU) pv0 )
{
    #define EQN(A) FCN_F(tgPM_FLOOR)( pv0->m_aData[A] )
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_CEL) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_CEL)( VEC_T(1,CPCU) pv0 )
{
    #define EQN(A) FCN_F(tgPM_CEIL)( pv0->m_aData[A] )
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_CLP) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_CLP)( VEC_T(1,CPCU) pv0, VEC_T(1,CPCU) pvMin, VEC_T(1,CPCU) pvMax )
{
    #define EQN(A) FCN_F(tgCM_CLP)( pv0->m_aData[A], pvMin->m_aData[A], pvMax->m_aData[A] )
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_SAT) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_SAT)( VEC_T(1,CPCU) pv0 )
{
    #define EQN(A) FCN_F(tgCM_CLP)( pv0->m_aData[A], TYPE_K(0), TYPE_K(1) )
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_NaN) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgBOOL FCN_V(tgMH_NaN)( VEC_T(1,CPCU) pv0 )
{
    TgUINT_F32                          uiIndex = 0;

    for (uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        if (FCN_F(tgPM_NAN)( pv0->m_aData[uiIndex] ))
        {
            return (true);
        };
    };

    return (false);
}


/* ---- FCN_V(tgMH_BND) ---------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE TgBOOL FCN_V(tgMH_BND)( VEC_T(1,CPC) pv0, VEC_T(1,CPC) pvBound )
{
    TgUINT_F32                          uiIndex = 0;

    for (uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        if ((-pvBound->m_aData[uiIndex] > pv0->m_aData[uiIndex]) || (pv0->m_aData[uiIndex] > pvBound->m_aData[uiIndex]))
        {
            return (false);
        };
    };

    return (true);
}


/* ---- FCN_V(tgMH_MAD_SVV) ------------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_MAD_SVV)( VAR_T(C) fScalar, VEC_T(1,CPCU) pv1, VEC_T(1,CPCU) pv2 )
{
    #define EQN(A) fScalar*pv1->m_aData[A] + pv2->m_aData[A]
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_MAD_VSV) ------------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_MAD_VSV)( VEC_T(1,CPCU) pv0, VAR_T(C) fScalar, VEC_T(1,CPCU) pv2 )
{
    #define EQN(A) pv0->m_aData[A]*fScalar + pv2->m_aData[A]
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_NMS_SVV) ------------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_NMS_SVV)( VAR_T(C) fScalar, VEC_T(1,CPCU) pv1, VEC_T(1,CPCU) pv2 )
{
    #define EQN(A) -(fScalar*pv1->m_aData[A] - pv2->m_aData[A])
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_NMS_VSV) ------------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_NMS_VSV)( VEC_T(1,CPCU) pv0, VAR_T(C) fScalar, VEC_T(1,CPCU) pv2 )
{
    #define EQN(A) -(pv0->m_aData[A]*fScalar - pv2->m_aData[A])
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_MUL_SV) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_MUL_SV)( VAR_T(C) fScalar, VEC_T(1,CPCU) pv1 )
{
    #define EQN(A) fScalar * pv1->m_aData[A]
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_MUL_VS) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_MUL_VS)( VEC_T(1,CPCU) pv0, VAR_T(C) fScalar )
{
    #define EQN(A) pv0->m_aData[A] * fScalar
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_DIV_SV) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_DIV_SV)( VAR_T(C) fScalar, VEC_T(1,CPCU) pv1 )
{
    #define EQN(A) fScalar / pv1->m_aData[A]
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}


/* ---- FCN_V(tgMH_DIV_VS) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgINLINE VEC_T(1) FCN_V(tgMH_DIV_VS)( VEC_T(1,CPCU) pv0, VAR_T(C) fScalar )
{
    VAR_T(C) fInvScalar = TYPE_K(1) / fScalar;
    #define EQN(A) pv0->m_aData[A] * fInvScalar
    GENERATE__VEC_ASSIGN_EQN;
    #undef EQN
}
