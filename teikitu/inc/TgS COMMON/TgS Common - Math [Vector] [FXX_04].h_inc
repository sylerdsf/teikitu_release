/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common - Math API [Vector] [FXX_04].h_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Common ===================================================================================================================================================================== */

/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*  DOXYGEN                                                                                                                                                                        */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

/** @defgroup TGS_COMMON_MATH_QUAT Quaternion
    @ingroup TGS_COMMON_MATH_VECTOR_API
*/


/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*  Public Functions                                                                                                                                                               */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_LOAD
                                                @brief Return a vector with the four arguments
                                                @param[in] ARG0 X (1st) value for the vector
                                                @param[in] ARG1 Y (2nd) value for the vector
                                                @param[in] ARG2 Z (3rd) value for the vector
                                                @param[in] ARG3 W (4th) value for the vector
                                                @return A vector with the four arguments */
TgINLINE VEC_T(1)                           FCN_V(tgMH_SET_S)( VAR_T(C) ARG0, VAR_T(C) ARG1, VAR_T(C) ARG2, VAR_T(C) ARG3 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_LOAD
                                                @brief Return a vector from the three arguments and W=1.0 for a homogenous point vector
                                                @param[in] ARG0 X (1st) value for the vector
                                                @param[in] ARG1 Y (2nd) value for the vector
                                                @param[in] ARG2 Z (3rd) value for the vector
                                                @return A vector from the three arguments and W=1.0 for a homogenous point vector */
TgINLINE VEC_T(1)                           FCN_V(tgMH_SETP_S)( VAR_T(C) ARG0, VAR_T(C) ARG1, VAR_T(C) ARG2 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_LOAD
                                                @brief Return a vector from the three arguments and W=0.0 for a homogenous direction vector
                                                @param[in] ARG0 X (1st) value for the vector
                                                @param[in] ARG1 Y (2nd) value for the vector
                                                @param[in] ARG2 Z (3rd) value for the vector
                                                @return A vector from the three arguments and W=1.0 for a homogenous direction vector */
TgINLINE VEC_T(1)                           FCN_V(tgMH_SETV_S)( VAR_T(C) ARG0, VAR_T(C) ARG1, VAR_T(C) ARG2 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_LOAD
                                                @brief Return a vector from the argument and W=1.0 for a homogenous point vector
                                                @param[in] ARG Vector
                                                @return A vector from the argument and W=1.0 for a homogenous point vector */
TgINLINE VEC_T(1)                           FCN_V(tgMH_SETP)( VEC_T(1,CPCU) ARG );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_LOAD
                                                @brief Return a vector from the argument and W=0.0 for a homogenous direction vector
                                                @param[in] ARG Vector
                                                @return A vector from the argument and W=0.0 for a homogenous direction vector */
TgINLINE VEC_T(1)                           FCN_V(tgMH_SETV)( VEC_T(1,CPCU) ARG );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_LOAD
                                                @brief Return a vector that is orthogonal to ARG
                                                @param[in] ARG Vector
                                                @return A vector that is orthogonal to ARG */
TgINLINE VEC_T(1)                           FCN_V(tgMH_Set_Ortho)( VEC_T(1,CPCU) ARG );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_LOAD
                                                @brief Store two additional orthogonal vectors to ARG2 (creating a basis)
                                                @param[out] OUT0 Destination Vector
                                                @param[out] OUT1 Destination Vector
                                                @param[in] ARG2 Vector */
TgINLINE TgVOID                             FCN_V(tgMH_Init_Basis_From_Vector)( VEC_T(1,PCU) ARG0, VEC_T(1,PCU) ARG1, VEC_T(1,CPCU) ARG2 );




                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CALC
                                                @brief Return true if the argument is a valid homogeneous point and false otherwise
                                                @param[in] ARG Vector*/
                                            /** @return True if the argument is a valid homogeneous point and false otherwise */
TgINLINE TgBOOL                             FCN_V(tgMH_Is_Point_Valid)( VEC_T(1,CPCU) ARG );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CALC
                                                @brief Return true if the argument is a valid homogeneous direction and false otherwise
                                                @param[in] ARG Vector*/
                                            /** @return True if the argument is a valid homogeneous direction and false otherwise */
TgINLINE TgBOOL                             FCN_V(tgMH_Is_Vector_Valid)( VEC_T(1,CPCU) ARG );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CALC
                                                @brief Return a vector where each element contains the the dot product of the first three elements of the arguments
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @return A vector where each element contains the the dot product of the first three elements of the arguments */
TgINLINE VAR_T()                            FCN_V(tgMH_DOT3)( VEC_T(1,CPCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CALC
                                                @brief Return a vector that is the cross product of the two vector arguments
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @return A vector that is the cross product of the two vector arguments */
TgINLINE VEC_T(1)                           FCN_V(tgMH_CX)( VEC_T(1,CPCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CALC
                                                @brief Return a vector that is the normalized cross product of the two vector arguments
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @return A vector that is the normalized cross product of the two vector arguments */
TgINLINE VEC_T(1)                           FCN_V(tgMH_UCX)( VEC_T(1,CPCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CALC
                                                @brief Return a vector that is the normalized cross product of the two vector arguments
                                                @param[out] OUT0 Destination, to hold the length of the original vector
                                                @param[in] ARG1 Vector
                                                @param[in] ARG2 Vector
                                                @return A vector that is the normalized cross product of the two vector arguments */
TgINLINE VEC_T(1)                           FCN_V(tgMH_UCX_LEN)( VAR_T(P) OUT0, VEC_T(1,CPCU) ARG1, VEC_T(1,CPCU) ARG2 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CALC
                                                @brief Return a vector where the first three elements of ARG1 have been normalized
                                                @param[out] OUT0 Destination, to hold the length of the original vector
                                                @param[in] ARG1 Vector
                                                @return A vector that is the normalized cross product of the two vector arguments */
TgINLINE VEC_T(1)                           FCN_V(tgMH_NORM3_LEN)( VAR_T(P) OUT0, VEC_T(1,CPCU) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CALC
                                                @brief Return a vector where each element contains the the dot product of the first three elements of the arguments
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @return A vector that is the normalized cross product of the two vector arguments */
TgINLINE VEC_T(1)                           FCN_V(tgMH_NORM3)( VEC_T(1,CPCU) ARG );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CALC
                                                @brief Return true if the first three elements of the two arguments are approximately the same vector, and false otherwise
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @return True if the first three elements of the two arguments are approximately the same vector, and false otherwise */
TgINLINE TgBOOL                             FCN_V(tgMH_PRX3)( VEC_T(1,CPCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_VECTOR_CALC
                                                @brief Return true if the two arguments are approximately the same vector, and false otherwise
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @return True if the two arguments are approximately the same vector, and false otherwise */
TgINLINE TgBOOL                             FCN_V(tgMH_PRX4)( VEC_T(1,CPCU) ARG0, VEC_T(1,CPCU) ARG1 );




                                            /** @addtogroup TGS_COMMON_MATH_QUAT
                                                @brief Return a quaternion that matches a rotation of ARG3 around the vector made from [ARG0, ARG1, ARG2]
                                                @param[in] ARG0 X Axis Value
                                                @param[in] ARG1 Y Axis Value
                                                @param[in] ARG2 Z Axis Value
                                                @param[in] ARG3 Angle
                                                @return A quaternion that matches a rotation of ARG3 around the vector made from [ARG0, ARG1, ARG2] */
TgINLINE VEC_T(1)                           FCN_V(tgMH_QT_Init_Axis_Angle_S)( VAR_T(C) ARG0, VAR_T(C) ARG1, VAR_T(C) ARG2, VAR_T(C) ARG3 );

                                            /** @addtogroup TGS_COMMON_MATH_QUAT
                                                @brief Return a quaternion that matches a rotation of W around the vector made from [X, Y, Z]
                                                @param[in] ARG Axis-Angle
                                                @return A quaternion that matches a rotation of W around the vector made from [X, Y, Z] */
TgINLINE VEC_T(1)                           FCN_V(tgMH_QT_Init_Axis_Angle)( VEC_T(1,CPCU) ARG );

                                            /** @addtogroup TGS_COMMON_MATH_QUAT
                                                @brief Return a quaternion formed by the Euler rotations of the three arguments
                                                @param[in] ARG0 Euler X
                                                @param[in] ARG1 Euler Y
                                                @param[in] ARG2 Euler Z
                                                @return A quaternion formed by the Euler rotations of the three arguments */
TgINLINE VEC_T(1)                           FCN_V(tgMH_QT_Init_Euler_S)( VAR_T(C) ARG0, VAR_T(C) ARG1, VAR_T(C) ARG2 );

                                            /** @addtogroup TGS_COMMON_MATH_QUAT
                                                @brief Return a quaternion formed by the Euler rotations of the three arguments
                                                @param[in] ARG Vector with Euler X, Y, Z
                                                @return A quaternion formed by the Euler rotations of the three arguments */
TgINLINE VEC_T(1)                           FCN_V(tgMH_QT_Init_Euler)( VEC_T(1,CPCU) ARG );

                                            /** @addtogroup TGS_COMMON_MATH_QUAT
                                                @brief Return a quaternion matching a rotation of ARG around an Euler X-Axis
                                                @param[in] ARG Angle
                                                @return A quaternion matching a rotation of ARG around an Euler X-Axis */
TgINLINE VEC_T(1)                           FCN_V(tgMH_QT_Init_EulerX_S)( VAR_T(C) ARG );

                                            /** @addtogroup TGS_COMMON_MATH_QUAT
                                                @brief Return a quaternion matching a rotation of ARG around an Euler Y-Axis
                                                @param[in] ARG Angle
                                                @return A quaternion matching a rotation of ARG around an Euler Y-Axis */
TgINLINE VEC_T(1)                           FCN_V(tgMH_QT_Init_EulerY_S)( VAR_T(C) ARG );

                                            /** @addtogroup TGS_COMMON_MATH_QUAT
                                                @brief Return a quaternion matching a rotation of ARG around an Euler Z-Axis
                                                @param[in] ARG Angle
                                                @return A quaternion matching a rotation of ARG around an Euler Z-Axis */
TgINLINE VEC_T(1)                           FCN_V(tgMH_QT_Init_EulerZ_S)( VAR_T(C) ARG );

                                            /** @addtogroup TGS_COMMON_MATH_QUAT
                                                @brief Return a vector holding the three Euler angles matching the rotation of the argument quaternion
                                                @param[out] OUT0 Destination pointer to hold Euler X value
                                                @param[out] OUT1 Destination pointer to hold Euler Y value
                                                @param[out] OUT2 Destination pointer to hold Euler Z value
                                                @param[in] ARG3 Quaternion
                                                @brief A vector holding the three Euler angles matching the rotation of the argument quaternion */
TgINLINE TgVOID                             FCN_V(tgMH_Quat2Euler_S)( VAR_T(PCU) OUT0, VAR_T(PCU) OUT1, VAR_T(PCU) OUT2, VEC_T(1,CPCU) ARG3 );

                                            /** @addtogroup TGS_COMMON_MATH_QUAT
                                                @brief Return a vector holding the three Euler angles matching the rotation of the argument quaternion
                                                @param[in] ARG Quaternion
                                                @brief A vector holding the three Euler angles matching the rotation of the argument quaternion */
TgINLINE VEC_T(1)                           FCN_V(tgMH_Quat2Euler)( VEC_T(1,CPCU) ARG );

                                            /** @addtogroup TGS_COMMON_MATH_QUAT
                                                @brief Return the inverse of the quaternion
                                                @param[in] ARG Quaternion
                                                @return The inverse of the quaternion */
TgINLINE VEC_T(1)                           FCN_V(tgMH_QT_INV)( VEC_T(1,CPCU) ARG );

                                            /** @addtogroup TGS_COMMON_MATH_QUAT
                                                @brief Multiply the two quaternions
                                                @param[in] ARG0 Quaternion
                                                @param[in] ARG1 Quaternion
                                                @return The result of multiplying the two quaternions */
TgINLINE VEC_T(1)                           FCN_V(tgMH_QT_MUL)( VEC_T(1,CPCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_QUAT
                                                @brief Return a spherical interpolation of the two quaternions according to the vector argument
                                                @param[in] ARG0 Spherical interpolation factor
                                                @param[in] ARG1 Quaternion
                                                @param[in] ARG2 Quaternion
                                                @return A spherical interpolation of the two quaternions according to the vector argument */
TgINLINE VEC_T(1)                           FCN_V(tgMH_QT_SLERP)( VAR_T(C) ARG0, VEC_T(1,CPCU) ARG1, VEC_T(1,CPCU) ARG2 );

                                            /** @addtogroup TGS_COMMON_MATH_QUAT
                                                @brief Return the quaternion necessary to rotation the first vector into the second vector
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Vector
                                                @return The quaternion necessary to rotation the first vector into the second  */
TgINLINE VEC_T(1)                           FCN_V(tgMH_QT_VECTOR_TO_VECTOR)( VEC_T(1,CPCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_QUAT
                                                @brief Rotate the vector by the quaternion
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Quaternion
                                                @return The result of rotating the vector by the quaternion */
TgINLINE VEC_T(1)                           FCN_V(tgMH_QT_TX)( VEC_T(1,CPCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_QUAT
                                                @brief Rotate the vector by the inverse quaternion
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Quaternion
                                                @return The result of rotating the vector by the inverse quaternion */
TgINLINE VEC_T(1)                           FCN_V(tgMH_QT_INV_TX)( VEC_T(1,CPCU) ARG0, VEC_T(1,CPCU) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_QUAT
                                                @brief Rotate the vector ARG0 around the X axis by the angle ARG1
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Angle
                                                @return The result of the rotation of the vector ARG0 around the X axis by the angle ARG1 */
TgINLINE VEC_T(1)                           FCN_V(tgMH_Rotate_Vector_EulerX)( VEC_T(1,CPCU) ARG0, VAR_T(C) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_QUAT
                                                @brief Rotate the vector ARG0 around the Y axis by the angle ARG1
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Angle
                                                @return The result of the rotation of the vector ARG0 around the Y axis by the angle ARG1 */
TgINLINE VEC_T(1)                           FCN_V(tgMH_Rotate_Vector_EulerY)( VEC_T(1,CPCU) ARG0, VAR_T(C) ARG1 );

                                            /** @addtogroup TGS_COMMON_MATH_QUAT
                                                @brief Rotate the vector ARG0 around the Z axis by the angle ARG1
                                                @param[in] ARG0 Vector
                                                @param[in] ARG1 Angle
                                                @return The result of the rotation of the vector ARG0 around the Z axis by the angle ARG1 */
TgINLINE VEC_T(1)                           FCN_V(tgMH_Rotate_Vector_EulerZ)( VEC_T(1,CPCU) ARG0, VAR_T(C) ARG1 );
