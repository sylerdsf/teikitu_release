/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Collision - F - Box AA-Plane.c_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */

#if !defined (ENABLE_RELOAD_GUARD)
    #define ENABLE_RELOAD_GUARD
    #if !defined(TEMPLATE__TYPE_SIZE)
        #define TEMPLATE__TYPE_SIZE 32
        #include __FILE__
        #undef TEMPLATE__TYPE_SIZE
        #define TEMPLATE__TYPE_SIZE 64
    #endif
    #undef ENABLE_RELOAD_GUARD
#endif

#include "TgS COMMON/TgS Common - Base - Defines [Template] [Math].h_inc"


/* == Collision ================================================================================================================================================================== */

/* ---- FCN_VO(tgCO_F_PN_Penetrate_BA) ------------------------------------------------------------------------------------------------------------------------------------------- */
/* Input:  tgPacket: The current series of contact points for this query-series, and contact generation parameters.                                                                */
/* Input:  psPN0: Plane Triangle primitive                                                                                                                                         */
/* Input:  tgBA0: Box, Axis-Aligned primitive - contact points are generated on this primitive                                                                                     */
/* Output: tgPacket: Points of penetration between the two primitives are added to it                                                                                              */
/* Return: Result Code                                                                                                                                                             */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgRESULT FCN_VO(tgCO_F_PN_Penetrate_BA)( VEC_OBJ_T(STg2_CO_Packet,PC) psPacket, VEC_OBJ_T(TgPLANE,CPC) psPN0, VEC_OBJ_T(TgBOXAA,CPC) psBA0 )
{
    VEC_OBJ_T(STg2_CO_Contact,P)        psContact;;
    VEC_T(1)                            vBA0;
    VAR_T()                             fDist;

    TgPARAM_CHECK( FCN_VO(tgGM_PN_Is_Valid)(psPN0) && FCN_VO(tgGM_BA_Is_Valid)(psBA0) );

    if (0 == psPacket->m_niMaxContact || psPacket->m_niContact >= psPacket->m_niMaxContact || nullptr == psPacket->m_psContact)
    {
        return (KTgE_FAIL);
    };

    vBA0 = FCN_V(tgMH_SETP_S)(
        FCN_F(tgPM_FSEL)(psPN0->m_vNormal.x, psBA0->m_vMin.x, psBA0->m_vMax.x),
        FCN_F(tgPM_FSEL)(psPN0->m_vNormal.y, psBA0->m_vMin.y, psBA0->m_vMax.y),
        FCN_F(tgPM_FSEL)(psPN0->m_vNormal.z, psBA0->m_vMin.z, psBA0->m_vMax.z)
    );

    fDist = FCN_VO(tgCO_F_PN_Sign_Dist_VT)(psPN0, &vBA0);

    if (fDist >= TYPE_K(0))
    {
        return (KTgE_NO_INTERSECT);
    };

    psContact = psPacket->m_psContact + psPacket->m_niContact;

    psContact->m_vS0 = vBA0;
    psContact->m_vN0 = psPN0->m_vNormal;
    psContact->m_fT0 = TYPE_K(0);
    psContact->m_fDepth = -fDist;

    ++psPacket->m_niContact;

    return (KTgS_OK);
}


/* ---- FCN_VO(tgCO_F_PN_Sweep_BA) ----------------------------------------------------------------------------------------------------------------------------------------------- */
/* Input:  tgPacket: The current series of contact points for this query-series, and contact generation parameters.                                                                */
/* Input:  fPM: Current normalized time of first contact.                                                                                                                          */
/* Input:  bPenetrate: If the swept primitives are in penetration, if true the function will return points of penetration.                                                         */
/* Input:  psPN0: Plane primitive                                                                                                                                                  */
/* Input:  tgBA0: Box, Axis-Aligned Primitive                                                                                                                                      */
/* Input:  psDT: A structure holding the swept primitive displacement for the entire duration of the test period                                                                   */
/* Output: tgPacket: Contact points are added or replace the current set depending on the time comparison and given parameters                                                     */
/* Output: fPM: New normalized time of first contact                                                                                                                               */
/* Return: Result Code                                                                                                                                                             */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgRESULT FCN_VO(tgCO_F_PN_Sweep_BA)( VEC_OBJ_T(STg2_CO_Packet,PC) psPacket, VAR_T(P) pfPM, VEC_OBJ_T(TgPLANE,CPC) psPN0, VEC_OBJ_T(TgBOXAA,CPC) psBA0, VEC_OBJ_T(TgDELTA,CPC) psDT )
{
    VAR_T(C)                            fDT_N = FCN_V(tgMH_DOT)(&psDT->m_vDT, &psPN0->m_vNormal);
    VEC_T(1)                            vBA0;
    VAR_T()                             fDist;
    VEC_OBJ_T(STg2_CO_Contact,P)        psContact;

    TgPARAM_CHECK( FCN_VO(tgGM_PN_Is_Valid)(psPN0) && FCN_VO(tgGM_BA_Is_Valid)(psBA0) );

    if (0 == psPacket->m_niMaxContact || psPacket->m_niContact >= psPacket->m_niMaxContact || nullptr == psPacket->m_psContact)
    {
        return (KTgE_FAIL);
    };

    vBA0 = FCN_V(tgMH_SETP_S)(
        FCN_F(tgPM_FSEL)(psPN0->m_vNormal.x, psBA0->m_vMin.x, psBA0->m_vMax.x),
        FCN_F(tgPM_FSEL)(psPN0->m_vNormal.y, psBA0->m_vMin.y, psBA0->m_vMax.y),
        FCN_F(tgPM_FSEL)(psPN0->m_vNormal.z, psBA0->m_vMin.z, psBA0->m_vMax.z)
    );

    fDist = FCN_VO(tgCO_F_PN_Sign_Dist_VT)(psPN0, &vBA0);

    if (fDist < TYPE_K(0))
    {
        if (*pfPM > psPacket->m_fSweepTol)
        {
            psPacket->m_niContact = 0;
        };

        *pfPM = TYPE_K(0);

        if ((psPacket->m_bReport_Penetration) && KTgE_MAX_CONTACTS == FCN_VO(tgCO_F_PN_Penetrate_BA)(psPacket, psPN0, psBA0))
        {
            return (KTgE_MAX_CONTACTS);
        };

        return (KTgE_PREPENETRATION);
    };

    if (fDist >= TYPE_K(0) && fDist + fDT_N >= TYPE_K(0))
    {
        return (KTgE_NO_INTERSECT);
    }
    else
    {
        VAR_T(C)                            fT0 = fDist / (-fDT_N);

        if (fT0 > *pfPM + psPacket->m_fSweepTol)
        {
            return (KTgE_NO_INTERSECT);
        };

        if (fT0 < *pfPM - psPacket->m_fSweepTol)
        {
            psPacket->m_niContact = 0;
            *pfPM = fT0;
        };

        psContact = psPacket->m_psContact + psPacket->m_niContact;

        psContact->m_vS0 = vBA0;
        psContact->m_vN0 = psPN0->m_vNormal;
        psContact->m_fT0 = fT0;
        psContact->m_fDepth = TYPE_K(0);

        ++psPacket->m_niContact;

        return (KTgS_OK);
    };
}


/* =============================================================================================================================================================================== */

#include "TgS COMMON/TgS Common - Base - Defines [Template] [Math].h_inc"
