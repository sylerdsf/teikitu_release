/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Collision - F - Box-Point.c_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */

#if !defined (ENABLE_RELOAD_GUARD)
    #define ENABLE_RELOAD_GUARD
    #if !defined(TEMPLATE__TYPE_SIZE)
        #define TEMPLATE__TYPE_SIZE 32
        #include __FILE__
        #undef TEMPLATE__TYPE_SIZE
        #define TEMPLATE__TYPE_SIZE 64
    #endif
    #undef ENABLE_RELOAD_GUARD
#endif

#include "TgS COMMON/TgS Common - Base - Defines [Template] [Math].h_inc"


/* == Collision ================================================================================================================================================================== */

/* ---- FCN_VO(tgCO_F_BX_ParamSq_VT) --------------------------------------------------------------------------------------------------------------------------------------------- */
/* Input:  psBX0: Box primitive                                                                                                                                                    */
/* Input:  vS0: Point                                                                                                                                                              */
/* Output: tyB0,tyB1,tyB2: Parametric parameters to generate the point of closest proximity on the box (one for each axis)                                                         */
/* Return: Minimal distance between the two primitives or negative type max if they intersect or are invalid.                                                                      */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
VAR_T() FCN_VO(tgCO_F_BX_ParamSq_VT)(VAR_T(P) pfB0, VAR_T(P) pfB1, VAR_T(P) pfB2, VEC_OBJ_T(TgBOX,CPC) psBX0, VEC_T(1,CPC) pvS0)
{
    VEC_T(1,C)                          vDS = FCN_V(tgMH_SUB)(pvS0, &psBX0->m_vOrigin);
    VAR_T()                             fDistSq = TYPE_K(0);
    VAR_T(C)                            fT0 = FCN_V(tgMH_DOT)(&vDS, psBX0->m_avAxis + 0);
    VAR_T(C)                            fT1 = FCN_V(tgMH_DOT)(&vDS, psBX0->m_avAxis + 1);
    VAR_T(C)                            fT2 = FCN_V(tgMH_DOT)(&vDS, psBX0->m_avAxis + 2);

    TgPARAM_CHECK( FCN_VO(tgGM_BX_Is_Valid)(psBX0) && FCN_V(tgMH_Is_Point_Valid)(pvS0) );

    if (fT0 < -psBX0->m_vExtent.x)
    {
        VAR_T(C)                            fDist = fT0 + psBX0->m_vExtent.x;
        fDistSq += fDist*fDist;
        *pfB0 = -psBX0->m_vExtent.x;
    }
    else if (fT0 > psBX0->m_vExtent.x)
    {
        VAR_T(C)                            fDist = fT0 - psBX0->m_vExtent.x;
        fDistSq += fDist*fDist;
        *pfB0 = psBX0->m_vExtent.x;
    }
    else
    {
        *pfB0 = fT0;
    };

    if (fT1 < -psBX0->m_vExtent.y)
    {
        VAR_T(C)                            fDist = fT1 + psBX0->m_vExtent.y;
        fDistSq += fDist*fDist;
        *pfB1 = -psBX0->m_vExtent.y;
    }
    else if (fT1 > psBX0->m_vExtent.y)
    {
        VAR_T(C)                            fDist = fT1 - psBX0->m_vExtent.y;
        fDistSq += fDist*fDist;
        *pfB1 = psBX0->m_vExtent.y;
    }
    else
    {
        *pfB1 = fT1;
    };

    if (fT2 < -psBX0->m_vExtent.z)
    {
        VAR_T(C)                            fDist = fT2 + psBX0->m_vExtent.z;
        fDistSq += fDist*fDist;
        *pfB2 = -psBX0->m_vExtent.z;
    }
    else if (fT2 > psBX0->m_vExtent.z)
    {
        VAR_T(C)                            fDist = fT2 - psBX0->m_vExtent.z;
        fDistSq += fDist*fDist;
        *pfB2 = psBX0->m_vExtent.z;
    }
    else
    {
        *pfB2 = fT2;
    };

    return (fDistSq <= TYPE_K(0) ? -VAR_K(KTgMAX) : fDistSq);
}


/* =============================================================================================================================================================================== */

#include "TgS COMMON/TgS Common - Base - Defines [Template] [Math].h_inc"
