/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Collision - F - Parallelogram-Triangle.c_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */

#if !defined (ENABLE_RELOAD_GUARD)
    #define ENABLE_RELOAD_GUARD
    #if !defined(TEMPLATE__TYPE_SIZE)
        #define TEMPLATE__TYPE_SIZE 32
        #include __FILE__
        #undef TEMPLATE__TYPE_SIZE
        #define TEMPLATE__TYPE_SIZE 64
    #endif
    #undef ENABLE_RELOAD_GUARD
#endif

#include "TgS COMMON/TgS Common - Base - Defines [Template] [Math].h_inc"


/* == Collision ================================================================================================================================================================== */

/* ---- FCN_VO(tgCO_F_PE_ParamSq_ST) --------------------------------------------------------------------------------------------------------------------------------------------- */
/* Input:  psPE0: Parallelogram primitive                                                                                                                                          */
/* Input:  psST0: Space Triangle primitive                                                                                                                                         */
/* Output: fPE0, fPE1: Parametric parameters to generate point of minimal distance on the parallelogram                                                                            */
/* Output: fST0, fST1: Parametric parameters to generate point of minimal distance on the triangle                                                                                 */
/* Return: Minimal distance between the two primitives or negative type max if they intersect or are invalid.                                                                      */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
VAR_T() FCN_VO(tgCO_F_PE_ParamSq_ST)( VAR_T(P) pfPE0, VAR_T(P) pfPE1, VAR_T(P) pfST0, VAR_T(P) pfST1, VEC_OBJ_T(TgPARALLELOGRAM,CPC) psPE0, VEC_OBJ_T(TgSTRI,CPC) psST0 )
{
    VAR_T()                             fT_E0, fT_E1, fT_G1, fT_RetVal;
    VAR_T()                             fPE00, fPE01, fET10, fET11;
    VAR_T()                             fRetVal;

    TgPARAM_CHECK( FCN_VO(tgGM_PE_Is_Valid)(psPE0) );

    /* Compare the edges of the triangle against the parallelogram. */

    fRetVal = FCN_VO(tgCO_F_PE_ParamSq_LR11)( &fPE00, &fPE01, &fET10, psPE0, psST0->m_sCT.m_sET.m_sPT.m_avPoint + 0, psST0->m_sCT.m_sET.m_avEdge + 0);
    fET11 = TYPE_K(0);

    fT_RetVal = FCN_VO(tgCO_F_PE_ParamSq_LR11)( &fT_E0, &fT_E1, &fT_G1, psPE0, psST0->m_sCT.m_sET.m_sPT.m_avPoint + 1, psST0->m_sCT.m_sET.m_avEdge + 1);
    if (fT_RetVal < fRetVal)
    {
        fRetVal = fT_RetVal;
        fPE00 = fT_E0;
        fPE01 = fT_E1;
        fET10 = TYPE_K(1) - fT_G1;
        fET11 = fT_G1;
    }

    fT_RetVal = FCN_VO(tgCO_F_PE_ParamSq_LR11)( &fT_E0, &fT_E1, &fT_G1, psPE0, psST0->m_sCT.m_sET.m_sPT.m_avPoint + 2, psST0->m_sCT.m_sET.m_avEdge + 2);
    if (fT_RetVal < fRetVal)
    {
        fRetVal = fT_RetVal;
        fPE00 = fT_E0;
        fPE01 = fT_E1;
        fET10 = TYPE_K(0);
        fET11 = TYPE_K(1) - fT_G1;
    }

    /* Compare the edges of the parallelogram to the triangle. */

    fT_RetVal = FCN_VO(tgCO_FI_ST_ParamSq_LR11)(&fT_E0, &fT_E1, &fT_G1, psST0, &psPE0->m_vOrigin, psPE0->m_avEdge + 0);
    if (fT_RetVal < fRetVal)
    {
        fRetVal = fT_RetVal;
        fPE00 = fT_G1;
        fPE01 = TYPE_K(0);
        fET10 = fT_E0;
        fET11 = fT_E1;
    };

    {
        VEC_T(1,C)                          vK0 = FCN_VO(tgGM_PE_Query_Point_2)(psPE0);

        fT_RetVal = FCN_VO(tgCO_FI_ST_ParamSq_LR11)(&fT_E0, &fT_E1, &fT_G1, psST0, &vK0, psPE0->m_avEdge + 0);
        if (fT_RetVal < fRetVal)
        {
            fRetVal = fT_RetVal;
            fPE00 = fT_G1;
            fPE01 = TYPE_K(1);
            fET10 = fT_E0;
            fET11 = fT_E1;
        };
    };

    fT_RetVal = FCN_VO(tgCO_FI_ST_ParamSq_LR11)(&fT_E0, &fT_E1, &fT_G1, psST0, &psPE0->m_vOrigin, psPE0->m_avEdge + 1);
    if (fT_RetVal < fRetVal)
    {
        fRetVal = fT_RetVal;
        fPE00 = TYPE_K(0);
        fPE01 = fT_G1;
        fET10 = fT_E0;
        fET11 = fT_E1;
    };

    {
        VEC_T(1,C)                          vK0 = FCN_VO(tgGM_PE_Query_Point_1)(psPE0);

        fT_RetVal = FCN_VO(tgCO_FI_ST_ParamSq_LR11)(&fT_E0, &fT_E1, &fT_G1, psST0, &vK0, psPE0->m_avEdge + 1);
        if (fT_RetVal < fRetVal)
        {
            fRetVal = fT_RetVal;
            fPE00 = TYPE_K(1);
            fPE01 = fT_G1;
            fET10 = fT_E0;
            fET11 = fT_E1;
        };
    };

    /* == Return Values == */

    *pfPE0 = fPE00;
    *pfPE1 = fPE01;
    *pfST0 = fET10;
    *pfST1 = fET11;

    return (fRetVal);
}


/* =============================================================================================================================================================================== */

#include "TgS COMMON/TgS Common - Base - Defines [Template] [Math].h_inc"
