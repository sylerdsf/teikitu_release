/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Collision - F - Convex-Triangle.c_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */

#if !defined (ENABLE_RELOAD_GUARD)
    #define ENABLE_RELOAD_GUARD
    #if !defined(TEMPLATE__TYPE_SIZE)
        #define TEMPLATE__TYPE_SIZE 32
        #include __FILE__
        #undef TEMPLATE__TYPE_SIZE
        #define TEMPLATE__TYPE_SIZE 64
    #endif
    #undef ENABLE_RELOAD_GUARD
#endif

#include "TgS COMMON/TgS Common - Base - Defines [Template] [Math].h_inc"


/* == Collision ================================================================================================================================================================== */

/* ---- FCN_VO(tgCO_F_ST_Sweep_CX) ----------------------------------------------------------------------------------------------------------------------------------------------- */
/* Input:  tgPacket: The current series of contact points for this query-series, and contact generation parameters.                                                                */
/* Input:  fPM: Current normalized time of first contact.                                                                                                                          */
/* Input:  psST0: Space Triangle primitive                                                                                                                                         */
/* Input:  tgMH0: Mesh(Convex) primitive                                                                                                                                           */
/* Output: tgPacket: Contact points are added or replace the current set depending on the time comparison and given parameters                                                     */
/* Output: fPM: New normalized time of first contact                                                                                                                               */
/* Return: Result Code                                                                                                                                                             */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgRESULT FCN_VO(tgCO_F_ST_Sweep_CX)(
    VEC_OBJ_T(STg2_CO_Packet,PC) psPacket, VAR_T(P) pfPM, VEC_OBJ_T(TgSTRI,CPC) psST0, VEC_OBJ_T(TgSTRI,CPC) apsST, VEC_OBJ_T(TgBOXAA,CPC) apsBA, TgSINT_F32_C niTri, VEC_OBJ_T(TgDELTA,CPC) psDT )
{
    VEC_OBJ_T(STg2_CO_Packet)           sTriPacket;
    VEC_OBJ_T(STg2_CO_Contact)          asContact[8];
    TgBOOL                              bContact = false;
    TgSINT_F32                          iIdx, iContact;

    sTriPacket.m_psContact = asContact;
    sTriPacket.m_fSweepTol = TYPE_K(0);
    sTriPacket.m_fSnapTol = VAR_K(KTgEPS);
    sTriPacket.m_niContact = 0;
    sTriPacket.m_niMaxContact = 8;

    for (iIdx = 0; iIdx < niTri; ++iIdx)
    {
        VEC_OBJ_T(STg2_CO_Contact,P)        psContact;;
        VAR_T()                             fTriPM = *pfPM;

        if (!FCN_VO(tgCO_F_BA_Test_PT)(apsBA + iIdx, &psST0->m_sCT.m_sET.m_sPT))
        {
            continue;
        };

        if (FCN_VO(tgCO_F_ST_Sweep_ST)( &sTriPacket, &fTriPM, psST0, apsST + iIdx, psDT ) < 0)
        {
            continue;
        };

        if (fTriPM > *pfPM + psPacket->m_fSweepTol)
        {
            continue;
        };

        if (fTriPM < *pfPM - psPacket->m_fSweepTol)
        {
            psPacket->m_niContact = 0;
            *pfPM = fTriPM;
        };

        for (iContact = 0; iContact < sTriPacket.m_niContact; ++iContact)
        {
            if (psPacket->m_niContact >= psPacket->m_niMaxContact)
            {
                return (KTgE_MAX_CONTACTS);
            };

            psContact = psPacket->m_psContact + psPacket->m_niContact;

            psContact->m_vS0 = asContact[iContact].m_vS0;
            psContact->m_vN0 = FCN_V(tgMH_NEG)(&asContact[iContact].m_vN0);
            psContact->m_fT0 = asContact[iContact].m_fT0;
            psContact->m_fDepth = asContact[iContact].m_fDepth;

            ++psPacket->m_niContact;
            bContact |= true;
        };
    };

    return (bContact ? KTgS_OK : KTgE_NO_INTERSECT);
}


/* =============================================================================================================================================================================== */

#include "TgS COMMON/TgS Common - Base - Defines [Template] [Math].h_inc"
