/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Collision - F - Rectangle-Linear.c_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */

MSVC_WARN_DISABLE_PUSH( 6235 ) /* Analysis - (<non-zero constant> || <expression>) is always a non-zero constant. */
MSVC_WARN_DISABLE_PUSH( 6240 ) /* Analysis - (<expression> && <non-zero constant>) always evaluates to the result of <expression>. */

#if !defined (ENABLE_RELOAD_GUARD)
    #define ENABLE_RELOAD_GUARD
    #if !defined(TEMPLATE__TYPE_SIZE)
        #define TEMPLATE__TYPE_SIZE 32
        #include __FILE__
        #undef TEMPLATE__TYPE_SIZE
        #define TEMPLATE__TYPE_SIZE 64
    #endif
    #undef ENABLE_RELOAD_GUARD
#endif

#include "TgS COMMON/TgS Common - Base - Defines [Template] [Math].h_inc"


/* == Collision ================================================================================================================================================================== */

/* ---- VI(tgCO_FI_RT_ParamSq_LR) ------------------------------------------------------------------------------------------------------------------------------------------------ */
/* Input:  psRT0: Rectangle primitive                                                                                                                                              */
/* Input:  vS0,vD0: Origin and Direction for the Linear                                                                                                                            */
/* Output: _fRT0, _fRT1: Parametric parameters to generate point of minimal distance on the rectangle                                                                              */
/* Output: _tyLN0: Parametric parameter to generate point of minimal distance on the linear                                                                                        */
/* Return: Minimal distance between the two primitives or negative type max if they intersect or are invalid.                                                                      */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
VAR_T()  VI(tgCO_FI_RT_ParamSq_LR)( VAR_T(P) pfRT0, VAR_T(P) pfRT1, VAR_T(P) pfLN0, VEC_OBJ_T(TgRECTANGLE,CPC) psRT0, VEC_T(1,CPC) pvS0, VEC_T(1,CPC) pvD0 )
{
    VEC_T(1,C)                          vX0 = FCN_V(tgMH_SUB)(pvS0, &psRT0->m_vOrigin);
    VAR_T(C)                            fX0_X0 = FCN_V(tgMH_LSQ)(&vX0);

    TgERROR( FCN_VO(tgGM_RT_Is_Valid)(psRT0) && FCN_V(tgMH_Is_Point_Valid)(pvS0) && FCN_V(tgMH_Is_Vector_Valid)(pvD0) );

    if (fX0_X0 <= VAR_K(KTgEPS))
    {
        /* Quick Out - the point is within tolerance of rectangle origin. */

        *pfRT0 = TYPE_K(0);
        *pfRT1 = TYPE_K(0);
        *pfLN0 = TYPE_K(0);

        return (-VAR_K(KTgMAX));
    }
    else
    {
        VAR_T(C)                            fE0_E0 = FCN_V(tgMH_LSQ)(psRT0->m_avEdge + 0);
        VAR_T(C)                            fE1_E1 = FCN_V(tgMH_LSQ)(psRT0->m_avEdge + 1);
        VAR_T(C)                            fD1_N = FCN_V(tgMH_DOT)(pvD0, &psRT0->m_vNormal);
        VAR_T(C)                            fX0_N = FCN_V(tgMH_DOT)(&vX0, &psRT0->m_vNormal);

        if (fE0_E0 <= VAR_K(KTgEPS) || fE1_E1 <= VAR_K(KTgEPS))
        {
            /* Degenerate rectangle - One or both of the edges has a near-zero length */
            return (-VAR_K(KTgMAX));
        }
        else if (FCN_F(tgPM_ABS)(fD1_N) > VAR_K(KTgEPS))
        {
            /* Non-trivial plane normal-component in the linear direction.  Check the intersection of the two primitives. */

            VAR_T(C)                            fInt = -(fX0_N / fD1_N);

            if ((!LN_CAP_0 || fInt >= TYPE_K(0)) && (!LN_CAP_1 || fInt <= TYPE_K(1)))
            {
                VEC_T(1,C)                          vK1 = FCN_V(tgMH_MUL_SV)(fInt, pvD0);
                VEC_T(1,C)                          vK0 = FCN_V(tgMH_ADD)(&vX0, &vK1);

                VAR_T(C)                            fINT_EN0 = FCN_V(tgMH_DOT)(psRT0->m_avEdge + 1, &vK0);
                VAR_T(C)                            fINT_EN1 = FCN_V(tgMH_DOT)(psRT0->m_avEdge + 0, &vK0);

                if (fINT_EN0 >= TYPE_K(0) && fINT_EN0 <= fE1_E1 && fINT_EN1 >= TYPE_K(0) && fINT_EN1 <= fE0_E0)
                {
                    *pfRT0 = fINT_EN1 / fE0_E0;
                    *pfRT1 = fINT_EN0 / fE1_E1;
                    *pfLN0 = fInt;

                    return (-VAR_K(KTgMAX));
                };
            };
        };

        {
            VEC_T(1,C)                          vK0 = FCN_V(tgMH_SUB)(pvS0, &psRT0->m_vOrigin);
            VEC_T(1,C)                          vX1 = FCN_V(tgMH_ADD)(&vK0, pvD0);

            VAR_T(C)                            f00 = FCN_V(tgMH_DOT)(psRT0->m_avEdge + 1, &vX0);
            VAR_T(C)                            f01 = FCN_V(tgMH_DOT)(psRT0->m_avEdge + 0, &vX0);
            VAR_T(C)                            f10 = FCN_V(tgMH_DOT)(psRT0->m_avEdge + 1, LN_CAP_1 ? &vX1 : pvD0);
            VAR_T(C)                            f11 = FCN_V(tgMH_DOT)(psRT0->m_avEdge + 0, LN_CAP_1 ? &vX1 : pvD0);

            TgSINT_F32                          iTest = 0;

            TgBOOL_C                            bK0 = LN_CAP_0 ? (f00 < VAR_K(KTgEPS)) : (f10 > VAR_K(KTgEPS));
            TgBOOL_C                            bK1 = LN_CAP_1 ? (f10 < VAR_K(KTgEPS)) : (f10 < -VAR_K(KTgEPS));
            TgBOOL_C                            bK2 = LN_CAP_0 ? (f01 < VAR_K(KTgEPS)) : (f11 > VAR_K(KTgEPS));
            TgBOOL_C                            bK3 = LN_CAP_1 ? (f11 < VAR_K(KTgEPS)) : (f11 < -VAR_K(KTgEPS));
            TgBOOL_C                            bK4 = LN_CAP_0 ? (fE1_E1 - f00 < VAR_K(KTgEPS)) : (f10 < -VAR_K(KTgEPS));
            TgBOOL_C                            bK5 = LN_CAP_1 ? (fE1_E1 - f10 < VAR_K(KTgEPS)) : (f10 > VAR_K(KTgEPS));
            TgBOOL_C                            bK6 = LN_CAP_0 ? (fE0_E0 - f01 < VAR_K(KTgEPS)) : (f11 < -VAR_K(KTgEPS));
            TgBOOL_C                            bK7 = LN_CAP_1 ? (fE0_E0 - f11 < VAR_K(KTgEPS)) : (f11 > VAR_K(KTgEPS));
            TgBOOL_C                            bK8 = LN_CAP_0 && f00 >= TYPE_K(0) && f01 >= TYPE_K(0) && f00 <= fE1_E1 && f01 <= fE0_E0;
            TgBOOL_C                            bK9 = LN_CAP_1 && f10 >= TYPE_K(0) && f11 >= TYPE_K(0) && f10 <= fE1_E1 && f11 <= fE0_E0;

            VAR_T()                             fRT0 = TYPE_K(0), fRT1 = TYPE_K(0), fG1 = TYPE_K(0), fT0 = TYPE_K(0), fT1 = TYPE_K(0);
            VAR_T()                             fTest = TYPE_K(0), fDistSq = VAR_K(KTgMAX);

            iTest |= bK0 ? (1 << 0) : 0;
            iTest |= bK1 ? (1 << 0) : 0;
            iTest |= bK2 ? (1 << 1) : 0;
            iTest |= bK3 ? (1 << 1) : 0;
            iTest |= bK4 ? (1 << 2) : 0;
            iTest |= bK5 ? (1 << 2) : 0;
            iTest |= bK6 ? (1 << 3) : 0;
            iTest |= bK7 ? (1 << 3) : 0;
            iTest |= bK8 ? (1 << 4) : 0;
            iTest |= bK9 ? (1 << 5) : 0;

            /* Distance calculation for the linear's origin if its capped and within the rectangle's normal-extruded space. */

            if (iTest & (1 << 4))
            {
                fDistSq = fX0_N * fX0_N;
                fRT0 = f01 / fE0_E0;
                fRT1 = f00 / fE1_E1;
                fG1 = TYPE_K(0);
            };

            /* Distance calculation for the linear's termination if its capped and within the rectangle's normal-extruded space. */

            if (iTest & (1 << 5))
            {
                VAR_T(C)                            fX1_N = FCN_V(tgMH_DOT)(&vX1, &psRT0->m_vNormal);

                fTest = fX1_N * fX1_N;
                if (fTest < fDistSq)
                {
                    fDistSq = fTest;
                    fRT0 = f11 / fE0_E0;
                    fRT1 = f10 / fE1_E1;
                    fG1 = TYPE_K(1);
                };

                /* Check to see if the segment is fully contained within the extruded rectangle space. */
                if (iTest & (1 << 4))
                {
                    *pfRT0 = fRT0;
                    *pfRT1 = fRT1;
                    *pfLN0 = fG1;

                    return (fDistSq);
                };
            };

            /* Compare the segment against the four rectangle edges. */

            if (iTest & (1 << 0))
            {
                fTest = FCN_VO(tgCO_F_LR11_ParamSq_LR11)(&fT0, &fT1, &psRT0->m_vOrigin, psRT0->m_avEdge + 0, pvS0, pvD0);

                if (fTest < fDistSq)
                {
                    fDistSq = fTest;
                    fRT0 = fT0;
                    fRT1 = TYPE_K(0);
                    fG1 = fT1;
                }
            }

            if (iTest & (1 << 1))
            {
                fTest = FCN_VO(tgCO_F_LR11_ParamSq_LR11)(&fT0, &fT1, &psRT0->m_vOrigin, psRT0->m_avEdge + 1, pvS0, pvD0);

                if (fTest < fDistSq)
                {
                    fDistSq = fTest;
                    fRT0 = TYPE_K(0);
                    fRT1 = fT0;
                    fG1 = fT1;
                }
            }

            if (iTest & (1 << 2))
            {
                VEC_T(1,C)                          vK1 = FCN_VO(tgGM_RT_Query_Point_2)(psRT0);

                fTest = FCN_VO(tgCO_F_LR11_ParamSq_LR11)(&fT0, &fT1, &vK1, psRT0->m_avEdge + 0, pvS0, pvD0);

                if (fTest < fDistSq)
                {
                    fDistSq = fTest;
                    fRT0 = fT0;
                    fRT1 = TYPE_K(1);
                    fG1 = fT1;
                }
            }

            if (iTest & (1 << 3))
            {
                VEC_T(1,C)                          vK1 = FCN_VO(tgGM_RT_Query_Point_1)(psRT0);

                fTest = FCN_VO(tgCO_F_LR11_ParamSq_LR11)(&fT0, &fT1, &vK1, psRT0->m_avEdge + 1, pvS0, pvD0);

                if (fTest < fDistSq)
                {
                    fDistSq = fTest;
                    fRT0 = TYPE_K(1);
                    fRT1 = fT0;
                    fG1 = fT1;
                }
            }

            *pfRT0 = fRT0;
            *pfRT1 = fRT1;
            *pfLN0 = fG1;

            return (fDistSq);
        };
    };
}


/* ---- VI(tgCO_FI_RT_Clip_Param_LR) --------------------------------------------------------------------------------------------------------------------------------------------- */
/* Input:  psRT0: Rectangle primitive - F_Clip-space is the region defined by the infinite extrusion along the normal.                                                             */
/* Input:  vS0,vD0: Origin and Direction for the Linear                                                                                                                            */
/* Output: fLN0,fLN1: Parametric parameter to generate the two points of the linear contained inside the clip space.                                                               */
/* Return: Result Code.                                                                                                                                                            */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgRESULT VI(tgCO_FI_RT_Clip_Param_LR)( VAR_T(P) pfLN0, VAR_T(P) pfLN1, VEC_OBJ_T(TgRECTANGLE,CPC) psRT0, VEC_T(1,CPC) pvS0, VEC_T(1,CPC) pvD0 )
{
    VAR_T(C)                            fE0_E0 = FCN_V(tgMH_LSQ)(psRT0->m_avEdge + 0);
    VAR_T(C)                            fE1_E1 = FCN_V(tgMH_LSQ)(psRT0->m_avEdge + 1);
    VEC_T(1,C)                          vDS = FCN_V(tgMH_SUB)(pvS0, &psRT0->m_vOrigin);
    VAR_T()                             fDS_N, fD1_N;
    VAR_T()                             fMin = -VAR_K(KTgMAX);
    VAR_T()                             fMax = VAR_K(KTgMAX);

    if (fE0_E0 <= VAR_K(KTgEPS) || fE1_E1 <= VAR_K(KTgEPS))
    {
        /* Degenerate rectangle - One or both of the edges has a near-zero length */
        return (KTgE_FAIL);
    };

    /* Quick out - Does the linear exist outside of the clip region. */

    fDS_N = FCN_V(tgMH_DOT)(psRT0->m_avEdge + 0, &vDS);
    fD1_N = FCN_V(tgMH_DOT)(psRT0->m_avEdge + 0, pvD0);

    if (LN_CAP_0 && fDS_N < TYPE_K(0))
    {
        if (fD1_N < TYPE_K(0) || (LN_CAP_1 && (fDS_N + fD1_N < TYPE_K(0))))
        {
            return (KTgE_NO_INTERSECT);
        };
    }
    else if (LN_CAP_0 && fDS_N > fE0_E0)
    {
        if (fD1_N > TYPE_K(0) || (LN_CAP_1 && (fDS_N + fD1_N > fE0_E0)))
        {
            return (KTgE_NO_INTERSECT);
        };
    };

    /* Find the non-capped intersections of this linear with the two enclosing planes. */

    if (fD1_N < -VAR_K(KTgEPS))
    {
        fMin = FCN_F(tgPM_FSEL)(fDS_N + fD1_N*fMin - fE0_E0, (fE0_E0 - fDS_N) / fD1_N, fMin);
        fMax = FCN_F(tgPM_FSEL)(fDS_N + fD1_N*fMax, fMax, -fDS_N / fD1_N);
    }
    else if (fD1_N > VAR_K(KTgEPS))
    {
        fMin = FCN_F(tgPM_FSEL)(fD1_N*fMin + fDS_N, fMin, -fDS_N / fD1_N);
        fMax = FCN_F(tgPM_FSEL)(fDS_N + fD1_N*fMax - fE0_E0, (fE0_E0 - fDS_N) / fD1_N, fMax);
    };

    /* Quick out - Does the linear exist outside of the clip region. */

    fDS_N = FCN_V(tgMH_DOT)(psRT0->m_avEdge + 1, &vDS);
    fD1_N = FCN_V(tgMH_DOT)(psRT0->m_avEdge + 1, pvD0);

    if (LN_CAP_0 && fDS_N < TYPE_K(0))
    {
        if (fD1_N < TYPE_K(0) || (LN_CAP_1 && (fDS_N + fD1_N < TYPE_K(0))))
        {
            return (KTgE_NO_INTERSECT);
        };
    }
    else if (LN_CAP_0 && fDS_N > fE1_E1)
    {
        if (fD1_N > TYPE_K(0) || (LN_CAP_1 && (fDS_N + fD1_N > fE1_E1)))
        {
            return (KTgE_NO_INTERSECT);
        };
    };

    /* Find the non-capped intersections of this linear with the two enclosing planes. */

    if (fD1_N < -VAR_K(KTgEPS))
    {
        fMin = FCN_F(tgPM_FSEL)(fDS_N + fD1_N*fMin - fE1_E1, (fE1_E1 - fDS_N) / fD1_N, fMin);
        fMax = FCN_F(tgPM_FSEL)(fDS_N + fD1_N*fMax, fMax, -fDS_N / fD1_N);
    }
    else if (fD1_N > VAR_K(KTgEPS))
    {
        fMin = FCN_F(tgPM_FSEL)(fD1_N*fMin + fDS_N, fMin, -fDS_N / fD1_N);
        fMax = FCN_F(tgPM_FSEL)(fDS_N + fD1_N*fMax - fE1_E1, (fE1_E1 - fDS_N) / fD1_N, fMax);
    };

    /* Return the results - capped to the linear legal region. */

    if (fMin > fMax || fMin <= -VAR_K(KTgMAX) || fMax >= VAR_K(KTgMAX))
    {
        return (KTgE_FAIL);
    };

    if (LN_CAP_0)
    {
        *pfLN0 = FCN_F(tgPM_FSEL)(*pfLN0, *pfLN0, TYPE_K(0));
        *pfLN1 = FCN_F(tgPM_FSEL)(*pfLN1, *pfLN1, TYPE_K(0));
    };

    if (LN_CAP_1)
    {
        *pfLN0 = FCN_F(tgPM_FSEL)(*pfLN0 - TYPE_K(1), *pfLN0, TYPE_K(1));
        *pfLN1 = FCN_F(tgPM_FSEL)(*pfLN1 - TYPE_K(1), *pfLN1, TYPE_K(1));
    };

    return (KTgS_OK);
}


MSVC_WARN_DISABLE_POP( 6235 )
MSVC_WARN_DISABLE_POP( 6240 )


/* =============================================================================================================================================================================== */

#include "TgS COMMON/TgS Common - Base - Defines [Template] [Math].h_inc"
