/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Collision - F - Sphere-Plane.c_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */

#if !defined (ENABLE_RELOAD_GUARD)
    #define ENABLE_RELOAD_GUARD
    #if !defined(TEMPLATE__TYPE_SIZE)
        #define TEMPLATE__TYPE_SIZE 32
        #include __FILE__
        #undef TEMPLATE__TYPE_SIZE
        #define TEMPLATE__TYPE_SIZE 64
    #endif
    #undef ENABLE_RELOAD_GUARD
#endif

#include "TgS COMMON/TgS Common - Base - Defines [Template] [Math].h_inc"


/* == Collision ================================================================================================================================================================== */

/* ---- FCN_VO(tgCO_F_SP_Penetrate_PN) ------------------------------------------------------------------------------------------------------------------------------------------- */
/* Input:  tgPacket: The current series of contact points for this query-series, and contact generation parameters.                                                                */
/* Input:  psSP0: Sphere primitive                                                                                                                                                 */
/* Input:  psPN0: Plane primitive - contact points are generated on this primitive                                                                                                 */
/* Output: tgPacket: Points of penetration between the two primitives are added to it                                                                                              */
/* Return: Result Code                                                                                                                                                             */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgRESULT FCN_VO(tgCO_F_SP_Penetrate_PN)( VEC_OBJ_T(STg2_CO_Packet,PC) psPacket, VEC_OBJ_T(TgSPHERE,CPC) psSP0, VEC_OBJ_T(TgPLANE,CPC) psPN0 )
{
    TgPARAM_CHECK( FCN_VO(tgGM_SP_Is_Valid)(psSP0) && FCN_VO(tgGM_PN_Is_Valid)(psPN0) );

    if (0 == psPacket->m_niMaxContact || psPacket->m_niContact >= psPacket->m_niMaxContact || nullptr == psPacket->m_psContact)
    {
        return (KTgE_FAIL);
    }
    else
    {
        VAR_T(C)                            fDist = FCN_VO(tgCO_F_PN_Sign_Dist_VT)(psPN0, &psSP0->m_vOrigin);
        VEC_T(1,C)                          vK0 = FCN_V(tgMH_MUL_SV)(fDist, &psPN0->m_vNormal);
        VEC_OBJ_T(STg2_CO_Contact,P)        psContact;;

        if (fDist > psSP0->m_fRadius)
        {
            return (KTgE_NO_INTERSECT);
        };

        psContact = psPacket->m_psContact + psPacket->m_niContact;

        psContact->m_vS0 = FCN_V(tgMH_SUB)(&psSP0->m_vOrigin, &vK0);
        psContact->m_vN0 = psPN0->m_vNormal;
        psContact->m_fT0 = TYPE_K(0);
        psContact->m_fDepth = psSP0->m_fRadius - fDist;

        ++psPacket->m_niContact;

        return (KTgS_OK);
    };
}


/* ---- FCN_VO(tgCO_F_PN_Penetrate_SP) ------------------------------------------------------------------------------------------------------------------------------------------- */
/* Input:  tgPacket: The current series of contact points for this query-series, and contact generation parameters.                                                                */
/* Input:  psPN0: Plane primitive                                                                                                                                                  */
/* Input:  psSP0: Sphere primitive - contact points are generated on this primitive                                                                                                */
/* Output: tgPacket: Points of penetration between the two primitives are added to it                                                                                              */
/* Return: Result Code                                                                                                                                                             */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgRESULT FCN_VO(tgCO_F_PN_Penetrate_SP)( VEC_OBJ_T(STg2_CO_Packet,PC) psPacket, VEC_OBJ_T(TgPLANE,CPC) psPN0, VEC_OBJ_T(TgSPHERE,CPC) psSP0 )
{
    TgPARAM_CHECK( FCN_VO(tgGM_SP_Is_Valid)(psSP0) && FCN_VO(tgGM_PN_Is_Valid)(psPN0) );

    if (0 == psPacket->m_niMaxContact || psPacket->m_niContact >= psPacket->m_niMaxContact || nullptr == psPacket->m_psContact)
    {
        return (KTgE_FAIL);
    }
    else
    {
        VAR_T(C)                            fDist = FCN_VO(tgCO_F_PN_Sign_Dist_VT)(psPN0, &psSP0->m_vOrigin);
        VEC_T(1,C)                          vK0 = FCN_V(tgMH_MUL_SV)(psSP0->m_fRadius, &psPN0->m_vNormal);
        VEC_OBJ_T(STg2_CO_Contact,P)        psContact;;

        if (fDist > psSP0->m_fRadius)
        {
            return (KTgE_NO_INTERSECT);
        };

        psContact = psPacket->m_psContact + psPacket->m_niContact;

        psContact->m_vS0 = FCN_V(tgMH_SUB)(&psSP0->m_vOrigin, &vK0);
        psContact->m_vN0 = psPN0->m_vNormal;
        psContact->m_fT0 = TYPE_K(0);
        psContact->m_fDepth = psSP0->m_fRadius - fDist;

        ++psPacket->m_niContact;

        return (KTgS_OK);
    };
}


/* ---- FCN_VO(tgCO_F_PN_Sweep_SP) ----------------------------------------------------------------------------------------------------------------------------------------------- */
/* Input:  tgPacket: The current series of contact points for this query-series, and contact generation parameters.                                                                */
/* Input:  tyPM: Current normalized time of first contact.                                                                                                                         */
/* Input:  bPenetrate: If the swept primitives are in penetration, if true the function will return points of penetration.                                                         */
/* Input:  psSP0: Sphere primitive                                                                                                                                                 */
/* Input:  psPN0: Plane primitive                                                                                                                                                  */
/* Input:  psDT: A structure holding the swept primitive displacement for the entire duration of the test period                                                                   */
/* Output: tgPacket: Contact points are added or replace the current set depending on the time comparison and given parameters                                                     */
/* Output: tyPM: New normalized time of first contact                                                                                                                              */
/* Return: Result Code                                                                                                                                                             */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgRESULT FCN_VO(tgCO_F_PN_Sweep_SP)( VEC_OBJ_T(STg2_CO_Packet,PC) psPacket, VAR_T(P) pfPM, VEC_OBJ_T(TgPLANE,CPC) psPN0, VEC_OBJ_T(TgSPHERE,CPC) psSP0, VEC_OBJ_T(TgDELTA,CPC) psDT )
{
    TgERROR( FCN_VO(tgGM_SP_Is_Valid)(psSP0) && FCN_VO(tgGM_PN_Is_Valid)(psPN0) );

    if (0 == psPacket->m_niMaxContact || psPacket->m_niContact >= psPacket->m_niMaxContact || nullptr == psPacket->m_psContact)
    {
        return (KTgE_FAIL);
    }
    else
    {
        VAR_T(C)                            fDist = FCN_VO(tgCO_F_PN_Sign_Dist_VT)(psPN0, &psSP0->m_vOrigin);

        if (fDist <= psSP0->m_fRadius)
        {
            TgBOOL_C                            bPenetrate = psPacket->m_bReport_Penetration;

            if (*pfPM > psPacket->m_fSweepTol)
            {
                psPacket->m_niContact = 0;
            };

            *pfPM = TYPE_K(0);

            if (bPenetrate && KTgE_MAX_CONTACTS == FCN_VO(tgCO_F_PN_Penetrate_SP)(psPacket, psPN0, psSP0))
            {
                return (KTgE_MAX_CONTACTS);
            };

            return (KTgE_PREPENETRATION);
        }
        else
        {
            VAR_T(C)                            fDT_N = -FCN_V(tgMH_DOT)(&psDT->m_vDT, &psPN0->m_vNormal);
            VAR_T(C)                            fT0 = (fDist - psSP0->m_fRadius) / fDT_N;

            if (fDT_N <= TYPE_K(0) || fT0 > *pfPM + psPacket->m_fSweepTol)
            {
                return (KTgE_NO_INTERSECT);
            }
            else
            {
                VEC_OBJ_T(STg2_CO_Contact,P)        psContact;;

                VEC_T(1,C)                          vK0 = FCN_V(tgMH_MUL_SV)(fT0, &psDT->m_vDT);
                VEC_T(1,C)                          vK1 = FCN_V(tgMH_ADD)(&psSP0->m_vOrigin, &vK0);
                VEC_T(1,C)                          vK2 = FCN_V(tgMH_MUL_SV)(psSP0->m_fRadius, &psPN0->m_vNormal);

                if (fT0 < *pfPM - psPacket->m_fSweepTol)
                {
                    psPacket->m_niContact = 0;
                    *pfPM = fT0;
                };

                psContact = psPacket->m_psContact + psPacket->m_niContact;

                psContact->m_vS0 = FCN_V(tgMH_SUB)(&vK1, &vK2);
                psContact->m_vN0 = psPN0->m_vNormal;
                psContact->m_fT0 = fT0;
                psContact->m_fDepth = TYPE_K(0);

                ++psPacket->m_niContact;

                return (KTgS_OK);
            };
        };
    };
}


/* =============================================================================================================================================================================== */

#include "TgS COMMON/TgS Common - Base - Defines [Template] [Math].h_inc"
