/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Collision - F - Sphere-Triangle.c_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */

#if !defined (ENABLE_RELOAD_GUARD)
    #define ENABLE_RELOAD_GUARD
    #if !defined(TEMPLATE__TYPE_SIZE)
        #define TEMPLATE__TYPE_SIZE 32
        #include __FILE__
        #undef TEMPLATE__TYPE_SIZE
        #define TEMPLATE__TYPE_SIZE 64
    #endif
    #undef ENABLE_RELOAD_GUARD
#endif

#include "TgS COMMON/TgS Common - Base - Defines [Template] [Math].h_inc"


/* == Collision ================================================================================================================================================================== */

/* ---- FCN_VO(tgCO_F_ST_Sweep_SP) ----------------------------------------------------------------------------------------------------------------------------------------------- */
/* Input:  tgPacket: The current series of contact points for this query-series, and contact generation parameters.                                                                */
/* Input:  fPM: Current normalized time of first contact.                                                                                                                          */
/* Input:  bPenetrate: If the swept primitives are in penetration, if true the function will return points of penetration.                                                         */
/* Input:  psST0: Space Triangle primitive                                                                                                                                         */
/* Input:  psSP0: Sphere primitive                                                                                                                                                 */
/* Input:  psDT: A structure holding the swept primitive displacement for the entire duration of the test period                                                                   */
/* Output: tgPacket: Contact points are added or replace the current set depending on the time comparison and given parameters                                                     */
/* Output: fPM: New normalized time of first contact                                                                                                                               */
/* Return: Result Code                                                                                                                                                             */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgRESULT FCN_VO(tgCO_F_ST_Sweep_SP)(VEC_OBJ_T(STg2_CO_Packet,PC) psPacket, VAR_T(P) pfPM, VEC_OBJ_T(TgSTRI,CPC) psST0, VEC_OBJ_T(TgSPHERE,CPC) psSP0, VEC_OBJ_T(TgDELTA,CPC) psDT)
{
    TgPARAM_CHECK( FCN_VO(tgGM_SP_Is_Valid)(psSP0) && FCN_VO(tgGM_ST_Is_Valid)(psST0) );

    if (0 == psPacket->m_niMaxContact || psPacket->m_niContact >= psPacket->m_niMaxContact || nullptr == psPacket->m_psContact)
    {
        return (KTgE_FAIL);
    }
    else
    {
        /* Check the displacement vector - if it is directed away from the triangle intersection is not possible. */

        VEC_T(1,C)                          vX0 = FCN_V(tgMH_SUB)(&psSP0->m_vOrigin, psST0->m_sCT.m_sET.m_sPT.m_avPoint);
        VAR_T(C)                            fX0_N = FCN_V(tgMH_DOT)(&vX0, &psST0->m_sCT.m_sET.m_sPT.m_vNormal);
        VAR_T(C)                            fDT_N = FCN_V(tgMH_DOT)(&psDT->m_vDT, &psST0->m_sCT.m_sET.m_sPT.m_vNormal);
        TgBOOL_C                            bPenetrate = psPacket->m_bReport_Penetration;
        VAR_T(C)                            fT = (psSP0->m_fRadius - fX0_N) / fDT_N;
        TgSINT_F32_C                        niContact = psPacket->m_niContact;

        TgRESULT                            iResult;

        /*TgDEBUG_COLLISION_TRIANGLE_CREATEID( iDBG_TriID, psST0, etgDEBUG_COLLISION_ENTERFCN ); */

        if (fX0_N > psSP0->m_fRadius && fDT_N > VAR_K(KTgEPS))
        {
            return (KTgE_NO_INTERSECT);
        };

        if (fX0_N < -psSP0->m_fRadius && fDT_N < -VAR_K(KTgEPS))
        {
            return (KTgE_NO_INTERSECT);
        };

        /* Calculate the extrapolation required to translate the distance from the origin to the triangle plane. */

        if (fT > *pfPM + psPacket->m_fSweepTol || fT > TYPE_K(1))
        {
            if (bPenetrate)
            {
                goto SPHERE_PENETRATION;
            };

            return (KTgE_NO_INTERSECT);
        };

        /* Examine the resulting point on the plane to see if it is contained by the triangle. */

        if (fT >= TYPE_K(0))
        {
            VEC_OBJ_T(STg2_CO_Contact,P)        psContact;

            VEC_T(1,C)                          vK0 = FCN_V(tgMH_MUL_SV)(fT, &psDT->m_vDT);
            VEC_T(1,C)                          vK1 = FCN_V(tgMH_ADD)(&psSP0->m_vOrigin, &vK0);
            VEC_T(1,C)                          vK2 = FCN_V(tgMH_MUL_SV)(psSP0->m_fRadius, &psST0->m_sCT.m_sET.m_sPT.m_vNormal);

            for (TgRSIZE uiEdge = 0; uiEdge < 3; ++uiEdge)
            {
                VAR_T(C)                            fLimit = VAR_K(KTgEPS)*FCN_V(tgMH_LEN)(psST0->m_sCT.m_sET.m_avEdge + uiEdge);
                VAR_T(C)                            fDist = FCN_VO(tgCO_F_PN_Dist_VT)(psST0->m_avPlane + uiEdge, &vK1);

                if (fDist < -fLimit)
                {
                    /* The sphere origin is behind the triangle plane.  Check to see if the delta moves away from the plane. */

                    if (!FCN_VO(tgGM_ST_Test_Edge)(psST0, uiEdge)
                        && FCN_V(tgMH_DOT)(&psST0->m_avPlane[uiEdge].m_vNormal, &psDT->m_vDT) < TYPE_K(0))
                    {
                        return (KTgE_NO_INTERSECT);
                    };

                    /* The sphere does not intersect the triangle plane - check the edge/vertices for intersection. */

                    goto OutsideTriangle;
                }
                else if (fDist <= fLimit)
                {
                    /* The contact point is within tolerance of a specific triangle's edge.  Check to see if its been marked invalid. */

                    if (!FCN_VO(tgGM_ST_Test_Edge)(psST0, uiEdge) && FCN_VO(tgGM_ET_Is_Tri_Edge_Ignored_Code)(&psST0->m_sCT.m_sET, uiEdge))
                    {
                        return (KTgE_NO_INTERSECT);
                    };
                };
            };

            /* Valid point of contact. */

            if (fT < *pfPM - psPacket->m_fSweepTol)
            {
                psPacket->m_niContact = 0;
                *pfPM = fT;
            };

            psContact = psPacket->m_psContact + psPacket->m_niContact;

            psContact->m_vS0 = FCN_V(tgMH_SUB)(&vK1, &vK2);
            psContact->m_vN0 = psST0->m_sCT.m_sET.m_sPT.m_vNormal;
            psContact->m_fT0 = fT;
            psContact->m_fDepth = TYPE_K(0);

            ++psPacket->m_niContact;

            /*TgDEBUG_COLLISION_TRIANGLE( iDBG_TriID, etgDEBUG_COLLISION_CODE1 ); */

            return (KTgS_OK);
        };

    OutsideTriangle:

        {   /* State Block for Edge Tests - Required because of the goto statement used for the penetration check */

            VEC_T(1,C)                          vK0 = FCN_V(tgMH_SUB)(&psDT->m_vDT, psST0->m_sCT.m_sET.m_sPT.m_avPoint);
            VEC_T(1,C)                          vX1 = FCN_V(tgMH_ADD)(&psSP0->m_vOrigin, &vK0);
            TgBOOL                              bHit = false;

            /* Check for collisions against the three edges */
            for (TgRSIZE uiEdge = 0; uiEdge < 3; ++uiEdge)
            {
                if (FCN_VO(tgGM_ST_Test_Edge)(psST0, uiEdge) || !FCN_VO(tgGM_ET_Is_Tri_Edge_Ignored_Code)(&psST0->m_sCT.m_sET, uiEdge))
                {
                    VAR_T(C)                            fLimit = -psSP0->m_fRadius*FCN_V(tgMH_LEN)(psST0->m_sCT.m_sET.m_avEdge + uiEdge);
                    VAR_T(C)                            fT0 = FCN_V(tgMH_DOT)(&psST0->m_avPlane[uiEdge].m_vNormal, &vX0);
                    VAR_T(C)                            fT1 = FCN_V(tgMH_DOT)(&psST0->m_avPlane[uiEdge].m_vNormal, &vX1);

                    if (fT0 < fLimit && fT1 < fLimit)
                    {
                        return (KTgE_NO_INTERSECT);
                    };

                    if (fT0 < VAR_K(KTgEPS) || fT1 < VAR_K(KTgEPS))
                    {
                        bHit |= 0 <= FCN_VO(tgCO_FI_SP_Sweep_LR11)( psPacket, pfPM, psST0->m_sCT.m_sET.m_sPT.m_avPoint + uiEdge, psST0->m_sCT.m_sET.m_avEdge + uiEdge, psSP0, psDT);
                    };
                };
            };

            /* Check for collisions against the three vertices */

            for (TgRSIZE uiPoint = 0; uiPoint < 3; ++uiPoint)
            {
                if (FCN_VO(tgGM_ST_Test_Point)(psST0, uiPoint))
                {
                    bHit |= TgSUCCEEDED( FCN_VO(tgCO_F_VT_Sweep_SP)( psPacket, pfPM, psST0->m_sCT.m_sET.m_sPT.m_avPoint + uiPoint, psSP0, psDT) );
                };
            };

            /*TgDEBUG_COLLISION_TRIANGLE( iDBG_TriID, etgDEBUG_COLLISION_CODE2 ); */

            if (bHit)
            {
                return (KTgS_OK);
            };
        };

        /* If pre-penetration information is not requested or the sphere's origin is behind the triangle report a non-intersection. */

        if (!bPenetrate)
        {
            return (KTgE_NO_INTERSECT);
        };

    SPHERE_PENETRATION:

        /*TgDEBUG_COLLISION_TRIANGLE( iDBG_TriID, etgDEBUG_COLLISION_PREPENETRATION ); */

        /* Record the current number of contacts before potentially clearing the list in case pre-penetration is not found. */

        if (*pfPM > psPacket->m_fSweepTol)
        {
            psPacket->m_niContact = 0;
        };

        iResult = FCN_VO(tgCO_FI_ST_Penetrate_SP)(psPacket, psST0, psSP0);

        /* Restore the original number of contacts if pre-penetration was not found. */

        if (TgFAILED( iResult ))
        {
            psPacket->m_niContact = niContact;
            return (iResult);
        };

        /* Set the time parameter and return back the appropriate result code. */

        *pfPM = TYPE_K(0);

        return (KTgE_MAX_CONTACTS == iResult ? KTgE_MAX_CONTACTS : (KTgS_OK == iResult ? KTgE_PREPENETRATION : iResult));
    };
}


/* ---- FCN_VO(tgCO_FI_ST_Penetrate_SP) ------------------------------------------------------------------------------------------------------------------------------------------ */
/* Input:  tgPacket: The current series of contact points for this query-series, and contact generation parameters.                                                                */
/* Input:  psCT0: Collision Triangle primitive                                                                                                                                     */
/* Input:  psSP0: Sphere primitive                                                                                                                                                 */
/* Output: tgPacket: Points of penetration between the two primitives are added to it                                                                                              */
/* Return: Result Code                                                                                                                                                             */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgRESULT FCN_VO(tgCO_FI_ST_Penetrate_SP)(VEC_OBJ_T(STg2_CO_Packet,PC) psPacket, VEC_OBJ_T(TgSTRI,CPC) psST0, VEC_OBJ_T(TgSPHERE,CPC) psSP0)
{
    /*TgDEBUG_COLLISION_TRIANGLE_CREATEID( iDBG_TriID, psCT0, etgDEBUG_COLLISION_ENTERFCN ); */

    VAR_T()                             fCT0, fCT1;

    VAR_T(C)                            fDistSq = FCN_VO(tgCO_F_ET_ParamSq_VT)(&fCT0, &fCT1, &psST0->m_sCT.m_sET, &psSP0->m_vOrigin);

    /* Check to see if the proposed point of contact is on a reduced triangle feature. */

    TgBOOL_C                            bCulled = FCN_VO(tgGM_ST_Is_Point_Culled)(psST0, fCT0, fCT1);

    /* Check to see if the reduced feature should be included for this case (only important if bCulled is true). */

    TgBOOL_C                            bEdge = FCN_VO(tgGM_ET_Is_Tri_Edge_Ignored)(&psST0->m_sCT.m_sET, fCT0, fCT1);

    /*  No penetration if the minimal distance between the sphere origin and the triangle is greater than the sphere's radius. Also, if the point is on a reduced */
    /* feature, the contact can be ignored.  The exception is for an edge, specifically for a sphere ( limit of one contact point ) it is necessary to make sure that a */
    /* contact on the edge is not ignored at least once to prevent the system from culling out all contact points between a sphere and a triangle list. */

    TgERROR( !(0 == psPacket->m_niMaxContact || psPacket->m_niContact >= psPacket->m_niMaxContact) );
    TgERROR( !(0 == psPacket->m_psContact) );

    if (fDistSq > psSP0->m_fRadiusSq || (bCulled && bEdge))
    {
        return (KTgE_NO_INTERSECT);
    }
    else
    {
        /*TgDEBUG_COLLISION_TRIANGLE( iDBG_TriID, etgDEBUG_COLLISION_PASSED_REJECT ); */

        VEC_T(1)                            vCT0, vNormal;
        VAR_T()                             fDist, fDepth;

        FCN_VO(tgGM_ST_Calc_Point)( &vCT0, psST0, fCT0, fCT1 );
        fDist = FCN_F(tgPM_SQRT)( fDistSq );
        fDepth = fDist >= psSP0->m_fRadius ? TYPE_K(0) : psSP0->m_fRadius - fDist;
        vNormal = FCN_V(tgMH_SUB)( &psSP0->m_vOrigin, &vCT0 );

        /*  Check to see if the normal of intersection should be replaced by the triangle's normal.  This is done to reduce floating point noise in the system where */
        /* near-normal results are returned.  By forcing it to the triangle's normal, extraneous rotations are minimized. The other possibility is that the sphere's */
        /* origin lies on the triangle itself, thus, requiring the selection of the triangle's normal for the intersection. */

        TgBOOL                              bUseNormal = !FCN_F(tgCM_NR0)(fDist);
        VEC_OBJ_T(STg2_CO_Contact,P)        psContact;;

        if (bUseNormal)
        {
            vNormal = FCN_V(tgMH_NORM)(&vNormal);

            /*  Check to see if the resultant normal is near that of the triangle's.  If they are close then use the triangle's normal to help further reduce floating */
            /* point noise. */

            bUseNormal = FCN_F(tgCM_NR1)(FCN_V(tgMH_DOT)(&vNormal, &psST0->m_sCT.m_sET.m_sPT.m_vNormal));
        };

        if (bCulled && bUseNormal)
        {
            /* If the point was marked to be culled (even if its on a valid edge), and the contact normal does not match the triangle's normal, ignore this contact.  Its */
            /* assumed that the matching triangle, attached to this one, will create the required contact point.  Prevents duplicate points from being created. */

            return (KTgE_NO_INTERSECT);
        }
        else
        {
            VEC_T(1,C)                          vKN = bUseNormal ? vNormal : psST0->m_sCT.m_sET.m_sPT.m_vNormal;
            VEC_T(1,C)                          vK1 = FCN_V(tgMH_MUL_SV)(psSP0->m_fRadius, &vKN);

            /* Create contact point. */

            psContact = psPacket->m_psContact + psPacket->m_niContact;

            psContact->m_vN0 = vKN;
            psContact->m_fT0 = TYPE_K(0);
            psContact->m_fDepth = fDepth;
            psContact->m_vS0 = FCN_V(tgMH_SUB)(&psSP0->m_vOrigin, &vK1);

            ++psPacket->m_niContact;

            /*TgDEBUG_COLLISION_TRIANGLE( iDBG_TriID, etgDEBUG_COLLISION_CODE1 ); */

            return (KTgS_OK);
        };
    };
}


/* =============================================================================================================================================================================== */

#include "TgS COMMON/TgS Common - Base - Defines [Template] [Math].h_inc"
