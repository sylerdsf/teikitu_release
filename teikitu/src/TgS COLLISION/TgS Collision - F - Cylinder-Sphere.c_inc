/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Collision - F - Cylinder-Sphere.c_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */

#if !defined (ENABLE_RELOAD_GUARD)
    #define ENABLE_RELOAD_GUARD
    #if !defined(TEMPLATE__TYPE_SIZE)
        #define TEMPLATE__TYPE_SIZE 32
        #include __FILE__
        #undef TEMPLATE__TYPE_SIZE
        #define TEMPLATE__TYPE_SIZE 64
    #endif
    #undef ENABLE_RELOAD_GUARD
#endif

#include "TgS COMMON/TgS Common - Base - Defines [Template] [Math].h_inc"


/* == Collision ================================================================================================================================================================== */

/* ---- FCN_VO(tgCO_F_SP_Penetrate_CY) ------------------------------------------------------------------------------------------------------------------------------------------- */
/* Input:  tgPacket: The current series of contact points for this query-series, and contact generation parameters.                                                                */
/* Input:  psSP0: Sphere primitive                                                                                                                                                 */
/* Input:  psCY0: Cylinder primitive - contact points are generated on this primitive                                                                                              */
/* Output: tgPacket: Points of penetration between the two primitives are added to it                                                                                              */
/* Return: Result Code                                                                                                                                                             */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgRESULT FCN_VO(tgCO_F_SP_Penetrate_CY)(VEC_OBJ_T(STg2_CO_Packet,PC) psPacket, VEC_OBJ_T(TgSPHERE,CPC) psSP0, VEC_OBJ_T(TgTUBE,CPC) psCY0)
{
    TgPARAM_CHECK( FCN_VO(tgGM_TB_Is_Valid)(psCY0) && FCN_VO(tgGM_SP_Is_Valid)(psSP0) );

    if (0 == psPacket->m_niMaxContact || psPacket->m_niContact >= psPacket->m_niMaxContact || nullptr == psPacket->m_psContact)
    {
        return (KTgE_FAIL);
    }
    else
    {
        VEC_T(1,C)                          vDS = FCN_V(tgMH_SUB)(&psCY0->m_vOrigin, &psSP0->m_vOrigin);

        /* Separating Axis - Cylindrical Principal Axis. */

        VAR_T(C)                            fDS_AX = FCN_V(tgMH_DOT)(&vDS, &psCY0->m_vU_HAX);
        VAR_T()                             fDepth = psCY0->m_fExtent + psSP0->m_fRadius - FCN_F(tgPM_ABS)(fDS_AX);

        if (fDepth < TYPE_K(0))
        {
            return (KTgE_NO_INTERSECT);
        }
        else
        {
            VEC_OBJ_T(STg2_CO_Contact,P)        psContact;;
            VAR_T()                             fRT;

            /* Separating Axis - Cylindrical Radial Axis. */

            VEC_T(1)                            vNormal = fDS_AX < TYPE_K(0) ? FCN_V(tgMH_NEG)(&psCY0->m_vU_HAX) : psCY0->m_vU_HAX;
            VEC_T(1,C)                          vK0 = FCN_V(tgMH_MUL_SV)(fDS_AX, &psCY0->m_vU_HAX);
            VEC_T(1,C)                          vK1 = FCN_V(tgMH_SUB)(&vDS, &vK0);
            VEC_T(1,C)                          vRT = FCN_V(tgMH_NORM_LEN)(&fRT, &vK1);
            VAR_T(C)                            fK0 = psCY0->m_fRadius + psSP0->m_fRadius - fRT;

            if (fK0 < TYPE_K(0))
            {
                return (KTgE_NO_INTERSECT);
            }

            if (fK0 < fDepth)
            {
                fDepth = fK0;
                vNormal = vRT;
            };

            /* Separating Axis - Minimal Axis Connecting Cylindrical Ring and Sphere Centre. */
            /* Dev Note: The origin of the sphere is restricted to being outside of the cylinder.  This biases the contact away from rim collisions, and prevents having */
            /* to do directional analysis to determine the contact depth. */

            if (FCN_F(tgPM_ABS)(fDS_AX) > psCY0->m_fExtent && fRT > psCY0->m_fRadius)
            {
                VAR_T()                             fK1;

                VEC_T(1,C)                          vK2 = FCN_V(tgMH_NORM)(&vDS);
                VEC_T(1,C)                          vK3 = FCN_V(tgMH_NEG)(&vK2);
                VEC_T(1,C)                          vK4 = FCN_VO(tgGM_CY_Support_Point)(psCY0, &vK3);
                VEC_T(1,C)                          vK5 = FCN_V(tgMH_SUB)(&vK4, &psSP0->m_vOrigin);
                VEC_T(1,C)                          vRIM = FCN_V(tgMH_NORM_LEN)(&fK1, &vK5);

                fK1 = psSP0->m_fRadius - fK1;

                if (fK1 < TYPE_K(0))
                {
                    return (KTgE_NO_INTERSECT);
                };

                if (fK1 < fDepth)
                {
                    fDepth = fK1;
                    vNormal = vRIM;
                };
            };

            {
                VEC_T(1,C)                          vK2 = FCN_V(tgMH_MUL_VS)(&vNormal, psSP0->m_fRadius - fDepth);

                psContact = psPacket->m_psContact + psPacket->m_niContact;

                psContact->m_vS0 = FCN_V(tgMH_ADD)(&psSP0->m_vOrigin, &vK2);
                psContact->m_vN0 = vNormal;
                psContact->m_fT0 = TYPE_K(0);
                psContact->m_fDepth = fDepth;

                ++psPacket->m_niContact;

                return (KTgS_OK);
            };
        };
    };
}


/* =============================================================================================================================================================================== */

#include "TgS COMMON/TgS Common - Base - Defines [Template] [Math].h_inc"
