/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Collision - F - Capsule-Capsule.c_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */

#if !defined (ENABLE_RELOAD_GUARD)
    #define ENABLE_RELOAD_GUARD
    #if !defined(TEMPLATE__TYPE_SIZE)
        #define TEMPLATE__TYPE_SIZE 32
        #include __FILE__
        #undef TEMPLATE__TYPE_SIZE
        #define TEMPLATE__TYPE_SIZE 64
    #endif
    #undef ENABLE_RELOAD_GUARD
#endif

#include "TgS COMMON/TgS Common - Base - Defines [Template] [Math].h_inc"


/* == Collision ================================================================================================================================================================== */

/* ---- FCN_VO(tgCO_FI_Penetrate_Parallel) --------------------------------------------------------------------------------------------------------------------------------------- */
/* Input:  tgPacket: The current series of contact points for this query-series, and contact generation parameters.                                                                */
/* Input:  psCP0: Capsule primitive                                                                                                                                                */
/* Input:  psCP1: Capsule primitive - contact points are generated on this primitive                                                                                               */
/* Input:  fX1_O0: Projection of capsule axis #2 onto the basis unit #1 of capsule #1                                                                                              */
/* Input:  fX1_O1: Projection of capsule axis #2 onto the basis unit #2 of capsule #1                                                                                              */
/* Output: tgPacket: Points of penetration between the two primitives are added to it                                                                                              */
/* Return: Result Code                                                                                                                                                             */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgRESULT FCN_VO(tgCO_FI_Penetrate_Parallel)( VEC_OBJ_T(STg2_CO_Packet,PC) psPacket, VEC_OBJ_T(TgTUBE,CPC) psCP0, VEC_OBJ_T(TgTUBE,CPC) psCP1, VAR_T(C) fX1_O0, VAR_T(C) fX1_O1 )
{
    /* Calculate the normal of penetration. */

    VAR_T()                             fNM;

    VAR_T(C)                            fRS = psCP1->m_fRadius + psCP0->m_fRadius;
    VEC_T(1,C)                          vDS = FCN_V(tgMH_SUB)(&psCP1->m_vOrigin, &psCP0->m_vOrigin);
    VAR_T(C)                            fN0 = FCN_V(tgMH_DOT)(&vDS, &psCP1->m_vU_Basis0);
    VAR_T(C)                            fN1 = FCN_V(tgMH_DOT)(&vDS, &psCP1->m_vU_Basis1);
    VEC_T(1,C)                          vK0 = FCN_V(tgMH_MUL_SV)(fN0, &psCP1->m_vU_Basis0);
    VEC_T(1,C)                          vK1 = FCN_V(tgMH_MUL_SV)(fN1, &psCP1->m_vU_Basis1);
    VEC_T(1,C)                          vK2 = FCN_V(tgMH_ADD)(&vK0, &vK1);
    VEC_T(1,C)                          vNM = FCN_V(tgMH_NORM_LEN)(&fNM, &vK2);

    /* Check to make sure the two capsules are within range of each other on their mutually defined cross-sectional plane. */

    if (fNM > fRS)
    {
        return (KTgE_NO_INTERSECT);
    }
    else
    {
        /* Find the overlap range of the two capsule axes. */

        VAR_T(C)                            fMin = FCN_F(tgCM_MAX)(fX1_O1 - psCP1->m_fExtent, fX1_O0 - psCP0->m_fExtent);
        VAR_T(C)                            fMax = FCN_F(tgCM_MIN)(fX1_O1 + psCP1->m_fExtent, fX1_O0 + psCP0->m_fExtent);

        /* Determine the first (possibly only) point of contact.  If the difference between the minimum and the maximum on the range of overlap is smaller than the */
        /* minimal radii, create only one point.  This is the prevent creating two points within too close of a range of each other.  In this case, create the point at */
        /* the median of the range. */

        VAR_T(C)                            fRad = FCN_F(tgCM_MIN)(psCP1->m_fRadius, psCP0->m_fRadius);
        TgBOOL_C                            bOnePoint = (fMax - fMin) <= TYPE_K(2,0) * fRad;
        VAR_T(C)                            fK0 = (bOnePoint ? TYPE_K(0,5)*(fMax + fMin) : fMin) - fX1_O1;
        VEC_T(1,C)                          vK3 = FCN_V(tgMH_MUL_VS)(&vNM, psCP1->m_fRadius);
        VEC_T(1,C)                          vK4 = FCN_V(tgMH_SUB)(&psCP1->m_vOrigin, &vK3);
        VEC_T(1,C)                          vK5 = FCN_V(tgMH_MUL_SV)(fK0, &psCP1->m_vHAX);

        VEC_OBJ_T(STg2_CO_Contact,P)        psContact;

        psContact = psPacket->m_psContact + psPacket->m_niContact;

        psContact->m_vS0 = FCN_V(tgMH_ADD)(&vK4, &vK5);
        psContact->m_vN0 = vNM;
        psContact->m_fT0 = TYPE_K(0);
        psContact->m_fDepth = fRS - fNM;

        ++psPacket->m_niContact;

        if (!bOnePoint)
        {
            /* Create the second point at the maximal location on the overlap range. */

            VEC_T(1,C)                          vK6 = FCN_V(tgMH_MUL_SV)(fMax - fX1_O1, &psCP1->m_vHAX);

            if (psPacket->m_niContact >= psPacket->m_niMaxContact)
            {
                return (KTgE_MAX_CONTACTS);
            };

            psContact = psPacket->m_psContact + psPacket->m_niContact;

            psContact->m_vS0 = FCN_V(tgMH_ADD)(&vK4, &vK6);
            psContact->m_vN0 = vNM;
            psContact->m_fT0 = TYPE_K(0);
            psContact->m_fDepth = fRS - fNM;

            ++psPacket->m_niContact;
        };

        return (KTgS_OK);
    };
}


/* ---- FCN_VO(tgCO_FI_Penetrate_NonParallel) ------------------------------------------------------------------------------------------------------------------------------------ */
/* Input:  tgPacket: The current series of contact points for this query-series, and contact generation parameters.                                                                */
/* Input:  psCP0: Capsule primitive                                                                                                                                                */
/* Input:  psCP1: Capsule primitive - contact points are generated on this primitive                                                                                               */
/* Input:  vNxN: The cross product of the two capsule axis                                                                                                                         */
/* Output: tgPacket: Points of penetration between the two primitives are added to it                                                                                              */
/* Return: Result Code                                                                                                                                                             */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgRESULT FCN_VO(tgCO_FI_Penetrate_NonParallel)( VEC_OBJ_T(STg2_CO_Packet,PC) psPacket, VEC_OBJ_T(TgTUBE,CPC) psCP0, VEC_OBJ_T(TgTUBE,CPC) psCP1, VEC_T(1,CPC) pvNxN )
{
    VAR_T(C)                            fRS = psCP1->m_fRadius + psCP0->m_fRadius;
    VEC_T(1)                            vCP0, vCP1;

    VAR_T(C)                            fDistSq = FCN_VO(tgCO_F_SG_ClosestSq_SG)(&vCP0, &vCP1, &psCP1->m_sAX, &psCP0->m_sAX);

    if (fDistSq > fRS*fRS)
    {
        return (KTgE_NO_INTERSECT);
    }
    else
    {
        VEC_T(1,C)                          vK0 = FCN_V(tgMH_SUB)(&vCP0, &vCP1);
        VAR_T()                             fNM;
        VEC_T(1,C)                          vNM = FCN_V(tgMH_NORM_LEN)(&fNM, &vK0);
        TgBOOL_C                            bUseNormal = fNM > VAR_K(KTgEPS);
        VEC_OBJ_T(STg2_CO_Contact,P)        psContact;;
        VEC_T(1,C)                          vK1 = FCN_V(tgMH_MUL_VS)(bUseNormal ? &vNM : pvNxN, psCP1->m_fRadius);

        psContact = psPacket->m_psContact + psPacket->m_niContact;

        psContact->m_vS0 = FCN_V(tgMH_SUB)(&vCP0, &vK1);
        psContact->m_vN0 = bUseNormal ? vNM : *pvNxN;
        psContact->m_fT0 = TYPE_K(0);
        psContact->m_fDepth = fRS - fNM;

        ++psPacket->m_niContact;

        return (KTgS_OK);
    }
}


/* ---- FCN_VO(tgCO_F_CP_Test_Sweep_CP) ------------------------------------------------------------------------------------------------------------------------------------------ */
/* Input:  psCP0,psCP1: Capsule primitive                                                                                                                                          */
/* Input:  vUDT: Normalized direction of displacement for the swept primitive (capsule)                                                                                            */
/* Input:  fDT: Length of displacement for the swept primitive                                                                                                                     */
/* Return: True if the two primitives are in contact at anytime during the sweep                                                                                                   */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgBOOL FCN_VO(tgCO_F_CP_Test_Sweep_CP)( VEC_OBJ_T(TgTUBE,CPC) psCP0, VEC_OBJ_T(TgTUBE,CPC) psCP1, VEC_T(1,CPC) pvUDT, VAR_T(C) fDT )
{
    VEC_T(1,C)                          vC0O = psCP0->m_sAX.m_vOrigin;
    VEC_T(1,C)                          vC0A = psCP0->m_sAX.m_vDirN;
    VEC_T(1,C)                          vC1O = psCP1->m_sAX.m_vOrigin;
    VEC_T(1,C)                          vC1A = psCP1->m_sAX.m_vDirN;
    VEC_T(1,C)                          vDT = FCN_V(tgMH_MUL_SV)(fDT, pvUDT);

    VAR_T(C)                            fRS = psCP0->m_fRadius + psCP1->m_fRadius;
    VAR_T(C)                            fRSSq = fRS*fRS;
    VAR_T(C)                            fUDT_CA = FCN_V(tgMH_DOT)(pvUDT, &psCP1->m_vU_HAX);

    TgPARAM_CHECK( FCN_VO(tgGM_TB_Is_Valid)(psCP0) && FCN_VO(tgGM_TB_Is_Valid)(psCP1) );

    /* Delta vector is parallel to the capsule axis. */

    if (FCN_F(tgCM_NR1)( fUDT_CA ))
    {
        VEC_T(1,C)                          vK0 = FCN_V(tgMH_ADD)(&vC1A, &vDT);
        VAR_T()                             fK0, fK1;

        return (FCN_VO(tgCO_F_LR11_ParamSq_LR11)(&fK0, &fK1, &vC0O, &vC0A, &vC1O, &vK0) < fRSSq);
    };

    if (FCN_F(tgCM_NR0)(fUDT_CA + TYPE_K(1)))
    {
        VEC_T(1,C)                          vK0 = FCN_V(tgMH_ADD)(&vC1O, &vDT);
        VEC_T(1,C)                          vK1 = FCN_V(tgMH_SUB)(&vC1A, &vDT);
        VAR_T()                             fK0, fK1;

        return (FCN_VO(tgCO_F_LR11_ParamSq_LR11)(&fK0, &fK1, &vC0O, &vC0A, &vK0, &vK1) < fRSSq);
    }
    else
    {
        VAR_T()                             fT0, fT1, fT2;
        VEC_OBJ_T(TgPARALLELOGRAM)          sSweptCapsule;
        VEC_T(1,C)                          vNM = FCN_V(tgMH_UCX)( &vC1A, &vDT );

        FCN_VO(tgGM_PE_Init)(&sSweptCapsule, &vC1O, &vC1A, &vDT, &vNM);

        return (FCN_VO(tgCO_F_PE_ParamSq_LR11)(&fT0, &fT1, &fT2, &sSweptCapsule, &vC0O, &vC0A) < fRSSq);
    }
}


/* =============================================================================================================================================================================== */

#include "TgS COMMON/TgS Common - Base - Defines [Template] [Math].h_inc"
