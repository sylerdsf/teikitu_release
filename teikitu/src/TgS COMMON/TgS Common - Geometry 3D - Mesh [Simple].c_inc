/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common - Geometry 3D - Mesh [Simple].c_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Common ===================================================================================================================================================================== */

/* ---- FCN_VO(tgGM_MS_Is_Valid) ------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgBOOL FCN_VO(tgGM_MS_Is_Valid)( VEC_OBJ_T(TgMESH_SIMPLE,CPCU) psMS1 )
{
    TgUINT_F32                          uiIndex;

    if (psMS1->m_nuiVert >= KTgMAX_U16)
    {
        return (false);
    };

    if (nullptr != psMS1->m_puiIndx_List)
    {
        if (0 != (psMS1->m_nuiIndx % 3))
        {
            return (false);
        };

        for (uiIndex = 0; uiIndex < psMS1->m_nuiIndx; ++uiIndex)
        {
            if (psMS1->m_puiIndx_List[uiIndex] >= psMS1->m_nuiVert)
            {
                return (false);
            };
        };
    }
    else
    {
        if (0 != (psMS1->m_nuiVert % 3))
        {
            return (false);
        };
    };

    for (uiIndex = 0; uiIndex < psMS1->m_nuiVert; ++uiIndex)
    {
        if (!FCN_V(tgMH_Is_Point_Valid)(psMS1->m_pvVert_List + uiIndex))
        {
            return (false);
        };
    };

    return (true);
}


/* ---- FCN_VO(tgGM_MS_Support_Point) -------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
VEC_T(1) FCN_VO(tgGM_MS_Support_Point)( VEC_OBJ_T(TgMESH_SIMPLE,CPCU) psMS1, VEC_T(1,CPCU) ptvDN )
{
    VAR_T()                             fMaxL = -VAR_K(KTgMAX);
    TgUINT_F32                          uiPoint = ~0u;
    TgUINT_F32                          uiIndex;

    for (uiIndex = 0; uiIndex < psMS1->m_nuiVert; ++uiIndex)
    {
        VAR_T(C)                            fDot = FCN_V(tgMH_DOT3)(psMS1->m_pvVert_List + uiIndex, ptvDN);

        if (fMaxL < fDot)
        {
            uiPoint = uiIndex;
            fMaxL = fDot;
        };
    };

    if (~0u != uiPoint)
    {
        return (psMS1->m_pvVert_List[uiPoint]);
    }
    else
    {
        return (FCN_V(tgMH_SET1)(VAR_K(KTgMAX)));
    };
}
