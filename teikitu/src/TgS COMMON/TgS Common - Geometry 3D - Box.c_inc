/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common - Geometry 3D - Box.c_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Common ===================================================================================================================================================================== */

/* ---- FCN_VO(tgGM_BX_Is_Valid) ------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgBOOL FCN_VO(tgGM_BX_Is_Valid)( VEC_OBJ_T(TgBOX,CPCU) psBX1 )
{
    if (!FCN_V(tgMH_Is_Point_Valid)(&psBX1->m_vOrigin))
    {
        return (false);
    };

    /* Axes must be valid vectors and the lengths should be valid positive values. */
    if (!FCN_V(tgMH_Is_Vector_Valid)(psBX1->m_avAxis + 0) || !(psBX1->m_vExtent.x >= TYPE_K(0)) ||
        !FCN_V(tgMH_Is_Vector_Valid)(psBX1->m_avAxis + 1) || !(psBX1->m_vExtent.y >= TYPE_K(0)) ||
        !FCN_V(tgMH_Is_Vector_Valid)(psBX1->m_avAxis + 2) || !(psBX1->m_vExtent.z >= TYPE_K(0)))
    {
        return (false);
    };

    if (   !FCN_F(tgCM_NR1)(FCN_V(tgMH_LSQ)(psBX1->m_avAxis + 0))
        || !FCN_F(tgCM_NR1)(FCN_V(tgMH_LSQ)(psBX1->m_avAxis + 1))
        || !FCN_F(tgCM_NR1)(FCN_V(tgMH_LSQ)(psBX1->m_avAxis + 2)))
    {
        return (false);
    };

    if ( /* All axes should be normal with respect to each other */
        !FCN_F(tgCM_NR0)(FCN_V(tgMH_DOT)(psBX1->m_avAxis + 0, psBX1->m_avAxis + 1)) ||
        !FCN_F(tgCM_NR0)(FCN_V(tgMH_DOT)(psBX1->m_avAxis + 0, psBX1->m_avAxis + 2)) ||
        !FCN_F(tgCM_NR0)(FCN_V(tgMH_DOT)(psBX1->m_avAxis + 1, psBX1->m_avAxis + 2))
    )
    {
        return (false);
    };

    return (true);
}


/* ---- FCN_VO(tgGM_BX_BA) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgVOID FCN_VO(tgGM_BX_BA)( VEC_OBJ_T(TgBOXAA,PCU) psBA0, VEC_OBJ_T(TgBOX,CPCU) psBX1 )
{
    VEC_T(1,C)                          vE0 = FCN_V(tgMH_MUL_SV)(psBX1->m_vExtent.x, psBX1->m_avAxis + 0);
    VEC_T(1,C)                          vE1 = FCN_V(tgMH_MUL_SV)(psBX1->m_vExtent.y, psBX1->m_avAxis + 1);
    VEC_T(1,C)                          vE2 = FCN_V(tgMH_MUL_SV)(psBX1->m_vExtent.z, psBX1->m_avAxis + 2);
    VEC_T(1,C)                          vE3 = FCN_V(tgMH_SUB)(&vE1, &vE0);
    VEC_T(1,C)                          vE4 = FCN_V(tgMH_SUB)(&vE2, &vE0);
    VEC_T(1,C)                          vE5 = FCN_V(tgMH_SUB)(&vE2, &vE1);

    VAR_T(C)                            fA0 = FCN_F(tgPM_FSEL)(vE4.x, vE0.x, vE2.x);
    VAR_T(C)                            fA1 = FCN_F(tgPM_FSEL)(vE4.y, vE0.y, vE2.y);
    VAR_T(C)                            fA2 = FCN_F(tgPM_FSEL)(vE4.z, vE0.z, vE2.z);
    VAR_T(C)                            fA3 = FCN_F(tgPM_FSEL)(vE5.x, vE1.x, vE2.x);
    VAR_T(C)                            fA4 = FCN_F(tgPM_FSEL)(vE5.y, vE1.y, vE2.y);
    VAR_T(C)                            fA5 = FCN_F(tgPM_FSEL)(vE5.z, vE1.z, vE2.z);

    VAR_T(C)                            fA6 = FCN_F(tgPM_FSEL)(vE5.x, vE2.x, vE1.x);
    VAR_T(C)                            fA7 = FCN_F(tgPM_FSEL)(vE5.y, vE2.y, vE1.y);
    VAR_T(C)                            fA8 = FCN_F(tgPM_FSEL)(vE5.z, vE2.z, vE1.z);
    VAR_T(C)                            fA9 = FCN_F(tgPM_FSEL)(vE4.x, vE2.x, vE0.x);
    VAR_T(C)                            fAA = FCN_F(tgPM_FSEL)(vE4.y, vE2.y, vE0.y);
    VAR_T(C)                            fAB = FCN_F(tgPM_FSEL)(vE4.z, vE2.z, vE0.z);

    VAR_T(C)                            fX0 = FCN_F(tgPM_FSEL)(vE3.x, fA0, fA3);
    VAR_T(C)                            fY0 = FCN_F(tgPM_FSEL)(vE3.y, fA1, fA4);
    VAR_T(C)                            fZ0 = FCN_F(tgPM_FSEL)(vE3.z, fA2, fA5);
    VAR_T(C)                            fX1 = FCN_F(tgPM_FSEL)(vE3.x, fA6, fA9);
    VAR_T(C)                            fY1 = FCN_F(tgPM_FSEL)(vE3.y, fA7, fAA);
    VAR_T(C)                            fZ1 = FCN_F(tgPM_FSEL)(vE3.z, fA8, fAB);

    VEC_T(1,C)                          vMin = FCN_V(tgMH_SETV_S)(fX0, fY0, fZ0);
    VEC_T(1,C)                          vON = FCN_V(tgMH_ADD)(&psBX1->m_vOrigin, &vMin);
    VEC_T(1,C)                          vMax = FCN_V(tgMH_SETV_S)(fX1, fY1, fZ1);
    VEC_T(1,C)                          vOX = FCN_V(tgMH_ADD)(&psBX1->m_vOrigin, &vMax);

    TgGEOM_ASSERT_PARAM(FCN_VO(tgGM_BX_Is_Valid)(psBX1));

    FCN_VO(tgGM_BA_Init_PT)( psBA0, &vON );
    FCN_VO(tgGM_BA_Union_PT)( psBA0, &vOX );
}
