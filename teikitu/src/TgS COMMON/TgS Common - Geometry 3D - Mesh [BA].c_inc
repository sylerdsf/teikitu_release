/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common - Geometry 3D - Mesh [BA].c_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Common ===================================================================================================================================================================== */

/* ---- FCN_VO(tgGM_MA_Is_Valid) ------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgBOOL FCN_VO(tgGM_MA_Is_Valid)( VEC_OBJ_T(TgMESH_BA,CPCU) psMA1 )
{
    TgUINT_F32_C                        nuiFace = psMA1->m_nuiFace;

    if (!FCN_VO(tgGM_MS_Is_Valid)( &psMA1->m_sMS ))
    {
        return (false);
    };

    if (ETgSWEEP_ROTATIONAL == psMA1->m_enSweep || ETgSWEEP_LINEAR == psMA1->m_enSweep)
    {
        TgUINT_F32                          uiIndex;

        if (ETgSWEEP_ROTATIONAL == psMA1->m_enSweep)
        {
            if ((nullptr == psMA1->m_pvVert_DT) || (nullptr == psMA1->m_psBA) || (nullptr == psMA1->m_puiFlags))
            {
                return (false);
            };

            if (!FCN_V(tgMH_Is_Point_Valid)(psMA1->m_vCG + 0) )
            {
                return (false);
            };

            if (!FCN_V(tgMH_Is_Point_Valid)(psMA1->m_vCG + 1))
            {
                return (false);
            };

            for (uiIndex = 0; uiIndex < psMA1->m_sMS.m_nuiVert; ++uiIndex)
            {
                if (!FCN_V(tgMH_Is_Vector_Valid)(psMA1->m_pvVert_DT + uiIndex))
                {
                    return (false);
                };
            };
        }
        else if (ETgSWEEP_LINEAR == psMA1->m_enSweep)
        {
            if ((nullptr != psMA1->m_pvVert_DT) || !FCN_VO(tgGM_DT_Is_Valid)( &psMA1->m_sDT ) )
            {
                return (false);
            };

            if ((nullptr == psMA1->m_psBA) || (nullptr == psMA1->m_puiFlags))
            {
                return (false);
            };

            if (!FCN_VO(tgGM_DT_Is_Valid)(&psMA1->m_sDT))
            {
                return (false);
            };
        };

        for (uiIndex = 0; uiIndex < nuiFace; ++uiIndex)
        {
            if (!FCN_VO(tgGM_BA_Is_Valid)( psMA1->m_psBA + uiIndex) )
            {
                return (false);
            };
        };
    }
    else
    {
        if (nullptr != psMA1->m_pvVert_DT)
        {
            return (false);
        };
    };

    return (true);
}


/* ---- FCN_VO(tgGM_MA_TX) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgVOID FCN_VO(tgGM_MA_TX)( VEC_OBJ_T(TgMESH_BA,PCU) psMA0, VEC_04_3_T(CPCU) pxM0 )
{
    FCN_VO(tgGM_MS_TX)( &psMA0->m_sMS, pxM0 );

    psMA0->m_vCG[0] = FCN_04_3_V(tgMH_TX_P)(pxM0, psMA0->m_vCG + 0);

    if (ETgSWEEP_ROTATIONAL == psMA0->m_enSweep)
    {
        TgUINT_F32                          uiIndex;

        TgERROR((nullptr != psMA0->m_psBA) && (nullptr != psMA0->m_puiFlags));

        for (uiIndex = 0; uiIndex < psMA0->m_sMS.m_nuiVert; ++uiIndex)
        {
            psMA0->m_pvVert_DT[uiIndex] = FCN_04_3_V(tgMH_TX_V)(pxM0, psMA0->m_pvVert_DT + uiIndex);
        };

        psMA0->m_vCG[1] = FCN_04_3_V(tgMH_TX_P)(pxM0, psMA0->m_vCG + 1);

        FCN_VO(tgGM_MA_Update_Face_BA)( psMA0 );
    }
    else if (ETgSWEEP_LINEAR == psMA0->m_enSweep)
    {
        FCN_VO(tgGM_DT_TX)( &psMA0->m_sDT, pxM0 );

        psMA0->m_vCG[1] = FCN_04_3_V(tgMH_TX_P)(pxM0, psMA0->m_vCG + 1);

        FCN_VO(tgGM_MA_Update_Face_BA)( psMA0 );
    };
}


/* ---- FCN_VO(tgGM_MA_Copy_TX) -------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgVOID FCN_VO(tgGM_MA_Copy_TX)( VEC_OBJ_T(TgMESH_BA,PCU) psMA0, VEC_OBJ_T(TgMESH_BA,CPCU) psMA1, VEC_04_3_T(CPCU) pxM0 )
{
    TgUINT_F32_C                        nuiVert = psMA1->m_sMS.m_nuiVert;
    TgUINT_F32_C                        nuiIndx = psMA1->m_sMS.m_nuiIndx;
    TgUINT_F32_C                        nuiFace = psMA1->m_nuiFace;

    FCN_VO(tgGM_MA_Init)( psMA0, nuiVert, nuiIndx, psMA1->m_enSweep );
    FCN_VO(tgGM_MS_Copy_TX)( &psMA0->m_sMS, &psMA1->m_sMS, pxM0 );

    psMA0->m_vCG[0] = FCN_04_3_V(tgMH_TX_P)(pxM0, psMA1->m_vCG + 0);

    if (ETgSWEEP_ROTATIONAL == psMA1->m_enSweep)
    {
        TgUINT_F32                          uiIndex;

        TgERROR((nullptr != psMA1->m_psBA) && (nullptr != psMA1->m_puiFlags));

        for (uiIndex = 0; uiIndex < psMA1->m_sMS.m_nuiVert; ++uiIndex)
        {
            psMA0->m_pvVert_DT[uiIndex] = FCN_04_3_V(tgMH_TX_V)(pxM0, psMA1->m_pvVert_DT + uiIndex);
        };

        psMA0->m_vCG[1] = FCN_04_3_V(tgMH_TX_P)(pxM0, psMA1->m_vCG + 1);

        FCN_VO(tgGM_MA_Update_Face_BA)( psMA0 );
    }
    else if (ETgSWEEP_LINEAR == psMA1->m_enSweep)
    {
        FCN_VO(tgGM_DT_Copy_TX)( &psMA0->m_sDT, &psMA1->m_sDT, pxM0 );

        psMA0->m_vCG[1] = FCN_04_3_V(tgMH_TX_P)(pxM0, psMA1->m_vCG + 1);

        FCN_VO(tgGM_MA_Update_Face_BA)( psMA0 );
    };

    tgMM_Copy( psMA0->m_puiFlags, nuiFace*sizeof( psMA0->m_puiFlags[0] ), psMA1->m_puiFlags, nuiFace*sizeof( psMA1->m_puiFlags[0] ) );

    psMA0->m_enSweep = psMA1->m_enSweep;
}


/* ---- FCN_VO(tgGM_MA_Init) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgVOID FCN_VO(tgGM_MA_Init)( VEC_OBJ_T(TgMESH_BA,PCU) psMA0, TgUINT_F32_C nuiVert, TgUINT_F32_C nuiIndx, ETgSWEEP_TYPE_C enSweep )
{
    TgUINT_F32_C                        nuiVert_Old = psMA0->m_sMS.m_nuiVert;
    TgUINT_F32_C                        nuiIndx_Old = psMA0->m_sMS.m_nuiIndx;
    TgUINT_F32_C                        nuiFace_Old = (0 == psMA0->m_sMS.m_puiIndx_List ? nuiVert_Old : nuiIndx_Old) / 3;
    TgUINT_F32_C                        nuiFace = (0 == nuiIndx ? nuiVert : nuiIndx) / 3;

    FCN_VO(tgGM_MS_Init)( &psMA0->m_sMS, nuiVert, nuiIndx );

    if ((nuiFace_Old == nuiFace) && (enSweep == psMA0->m_enSweep))
    {
        return;
    };

    FCN_VO(tgGM_MA_Free_Internal)( psMA0 );

    psMA0->m_enSweep = enSweep;
    psMA0->m_nuiFace = nuiFace;

    if (0 == nuiFace)
    {
        return;
    };

    switch (psMA0->m_enSweep)
    {
        case ETgSWEEP_ROTATIONAL:
            psMA0->m_pvVert_DT = (VEC_T(1,P))(TgMALLOC_POOL( nuiFace*sizeof( VEC_T(1) ) ));
        case ETgSWEEP_LINEAR:
        case ETgSWEEP_STATIC:
            psMA0->m_psBA = (VEC_OBJ_T(TgBOXAA,P))(TgMALLOC_POOL( nuiFace*sizeof( VEC_OBJ_T(TgBOXAA) ) ));
            psMA0->m_puiFlags = (TgUINT_F32_P)(TgMALLOC_POOL( nuiFace*sizeof( TgUINT_F32  ) ));
            break;
    };
}
