/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common - Geometry 3D - Ellipse.c_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Common ===================================================================================================================================================================== */

/* ---- FCN_VO(tgGM_EL_Is_Valid) ------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TgBOOL FCN_VO(tgGM_EL_Is_Valid)( VEC_OBJ_T(TgELLIPSE,CPCU) psEL1 )
{
    /* Sanity Check: Vector form. */
    if (!FCN_V(tgMH_Is_Vector_Valid)(&psEL1->m_vMajor_Axis) || !FCN_F(tgCM_NR0)(FCN_V(tgMH_LSQ)(&psEL1->m_vMajor_Axis) - TYPE_K(1)))
    {
        return (false);
    };

    if (!FCN_V(tgMH_Is_Vector_Valid)(&psEL1->m_vMinor_Axis) || !FCN_F(tgCM_NR0)(FCN_V(tgMH_LSQ)(&psEL1->m_vMinor_Axis) - TYPE_K(1)))
    {
        return (false);
    };

    if (!FCN_V(tgMH_Is_Vector_Valid)(&psEL1->m_vNormal) || !FCN_F(tgCM_NR0)(FCN_V(tgMH_LSQ)(&psEL1->m_vNormal) - TYPE_K(1)))
    {
        return (false);
    };

    if (!FCN_V(tgMH_Is_Point_Valid)(&psEL1->m_vOrigin))
    {
        return (false);
    };

    /* Sanity Check: on normal. */

    if (!FCN_F(tgCM_NR0)(FCN_V(tgMH_DOT)(&psEL1->m_vNormal, &psEL1->m_vMajor_Axis)))
    {
        return (false);
    };

    if (!FCN_F(tgCM_NR0)(FCN_V(tgMH_DOT)(&psEL1->m_vNormal, &psEL1->m_vMinor_Axis)))
    {
        return (false);
    };

    /* Sanity Check: on radii */

    if (!(psEL1->m_fMajor > TYPE_K(0)) || !(psEL1->m_fMinor > TYPE_K(0)))
    {
        return (false);
    };

    return (true);
}


/* ---- FCN_VO(tgGM_EL_Support_Point) -------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
VEC_T(1) FCN_VO(tgGM_EL_Support_Point)( VEC_OBJ_T(TgELLIPSE,CPCU) psEL1, VEC_T(1,CPCU) ptvDN )
{
    VAR_T(C)                            fAx_A0 = FCN_V(tgMH_DOT)(ptvDN, &psEL1->m_vMajor_Axis);
    VAR_T(C)                            fAx_A1 = FCN_V(tgMH_DOT)(ptvDN, &psEL1->m_vMinor_Axis);

    TgGEOM_ASSERT_PARAM(FCN_VO(tgGM_EL_Is_Valid)(psEL1) && FCN_V(tgMH_Is_Vector_Valid)(ptvDN));

    if (FCN_F(tgCM_NR0)(fAx_A0) && FCN_F(tgCM_NR0)(fAx_A1))
    {
        return (psEL1->m_vOrigin);
    }
    else
    {
        VAR_T(C)                            fInvMajorSq = TYPE_K(1) / (psEL1->m_fMajor * psEL1->m_fMajor);
        VAR_T(C)                            fInvMinorSq = TYPE_K(1) / (psEL1->m_fMinor * psEL1->m_fMinor);
        VAR_T(C)                            fRHS = TYPE_K(1) / (fAx_A0 * fInvMajorSq + fAx_A1 * fInvMinorSq);

        VAR_T(C)                            fPoint = FCN_F(tgPM_SQRT)( FCN_F(tgPM_ABS)( fRHS ) );
        VEC_T(1,C)                          vResult = psEL1->m_vOrigin;
        VAR_T(C)                            fB0 = FCN_F(tgPM_FSEL)( fAx_A0, fPoint, -fPoint ) * psEL1->m_fMajor;
        VAR_T(C)                            fB1 = FCN_F(tgPM_FSEL)( fAx_A1, fPoint, -fPoint ) * psEL1->m_fMinor;
        VEC_T(1,C)                          vMajorR = FCN_V(tgMH_MUL_SV)( fB0, &psEL1->m_vMajor_Axis );
        VEC_T(1,C)                          vMinorR = FCN_V(tgMH_MUL_SV)( fB1, &psEL1->m_vMinor_Axis );
        VEC_T(1,C)                          vRad = FCN_V(tgMH_ADD)( &vMajorR, &vMinorR );

        return (FCN_V(tgMH_ADD)( &vResult, &vRad ));
    };
}
