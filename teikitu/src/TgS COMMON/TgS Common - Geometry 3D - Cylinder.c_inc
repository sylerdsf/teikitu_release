/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common - Geometry 3D - Cylinder.c_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Common ===================================================================================================================================================================== */

/* ---- FCN_VO(tgGM_CY_Support_Point) -------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
VEC_T(1) FCN_VO(tgGM_CY_Support_Point)( VEC_OBJ_T(TgTUBE,CPCU) psCY0, VEC_T(1,CPCU) ptvDirN )
{
    VAR_T(C)                            fUAX_N = FCN_V(tgMH_DOT)(ptvDirN, &psCY0->m_vU_HAX);
    VEC_T(1)                            vResult;
    VAR_T()                             fTest;

    TgERROR(FCN_F(tgCM_NR1)(FCN_V(tgMH_LSQ)(ptvDirN)) && FCN_V(tgMH_Is_Vector_Valid)(ptvDirN));

    if (fUAX_N > VAR_K(KTgEPS))
    {
        vResult = FCN_V(tgMH_ADD)(&psCY0->m_vOrigin, &psCY0->m_vHAX);
    }
    else if (fUAX_N < -VAR_K(KTgEPS))
    {
        vResult = FCN_V(tgMH_SUB)(&psCY0->m_vOrigin, &psCY0->m_vHAX);
    }
    else
    {
        vResult = psCY0->m_vOrigin;
    }

    {
        VEC_T(1,C)                          vX0 = FCN_V(tgMH_MUL_SV)(fUAX_N, &psCY0->m_vU_HAX);
        VEC_T(1,C)                          vX1 = FCN_V(tgMH_SUB)(ptvDirN, &vX0);
        VEC_T(1,C)                          vRadial = FCN_V(tgMH_NORM_LEN)(&fTest, &vX1);

        if (fTest > VAR_K(KTgEPS))
        {
            vResult = FCN_V(tgMH_MAD_SVV)(psCY0->m_fRadius, &vRadial, &vResult);
        };
    }

    return (vResult);
}


