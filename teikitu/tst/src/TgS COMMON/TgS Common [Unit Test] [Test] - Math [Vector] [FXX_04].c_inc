/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common [Unit Test] [Test] - Math [Vector] [FXX_04].c_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Common ===================================================================================================================================================================== */

/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*  Test Functions                                                                                                                                                                 */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

/* ---- FCN_V_UT(tgMH_SET_S) --------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_SET_S) )
{
    VEC_T(1)                            v0;

    v0 = FCN_V(tgMH_SET_S)( TYPE_K(7,0), TYPE_K(2,0), TYPE_K(3,0), TYPE_K(4,0) );

    Test__Expect_EQ(v0.x, TYPE_K(7,0) );
    Test__Expect_EQ(v0.y, TYPE_K(2,0) );
    Test__Expect_EQ(v0.z, TYPE_K(3,0) );
    Test__Expect_EQ(v0.w, TYPE_K(4,0) );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_SETP_S) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_SETP_S) )
{
    VEC_T(1)                            v4_0;

    v4_0 = FCN_V(tgMH_SETP_S)(TYPE_K(7,0), TYPE_K(2,0), TYPE_K(3,0));
    Test__Expect_NE(false, FCN_V(tgMH_Is_Point_Valid)(&v4_0));

    Test__Expect_EQ(v4_0.x, TYPE_K(7,0) );
    Test__Expect_EQ(v4_0.y, TYPE_K(2,0) );
    Test__Expect_EQ(v4_0.z, TYPE_K(3,0) );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_SETV_S) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_SETV_S) )
{
    VEC_T(1)                            v4_0;
    
    v4_0 = FCN_V(tgMH_SETV_S)(TYPE_K(7,0), TYPE_K(2,0), TYPE_K(3,0));
    Test__Expect_NE(false, FCN_V(tgMH_Is_Vector_Valid)(&v4_0));

    Test__Expect_EQ(v4_0.x, TYPE_K(7,0) );
    Test__Expect_EQ(v4_0.y, TYPE_K(2,0) );
    Test__Expect_EQ(v4_0.z, TYPE_K(3,0) );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_SETP) ------------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_SETP) )
{
    VEC_T(1)                            v4_0, v4_1;

    v4_0 = FCN_V(tgMH_SETP_S)(TYPE_K(7,0), TYPE_K(2,0), TYPE_K(3,0));
    v4_1 = FCN_V(tgMH_SETP)(&v4_0);
    Test__Expect_NE(false, FCN_V(tgMH_Is_Point_Valid)(&v4_1));

    Test__Expect_EQ(v4_1.x, TYPE_K(7,0) );
    Test__Expect_EQ(v4_1.y, TYPE_K(2,0) );
    Test__Expect_EQ(v4_1.z, TYPE_K(3,0) );

    v4_0 = FCN_V(tgMH_SETV_S)(TYPE_K(7,0), TYPE_K(2,0), TYPE_K(3,0));
    v4_1 = FCN_V(tgMH_SETP)(&v4_0);
    Test__Expect_NE(false, FCN_V(tgMH_Is_Point_Valid)(&v4_1));

    Test__Expect_EQ(v4_1.x, TYPE_K(7,0) );
    Test__Expect_EQ(v4_1.y, TYPE_K(2,0) );
    Test__Expect_EQ(v4_1.z, TYPE_K(3,0) );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_SETV) ------------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_SETV) )
{
    VEC_T(1)                            v4_0, v4_1;

    v4_0 = FCN_V(tgMH_SETP_S)(TYPE_K(7,0), TYPE_K(2,0), TYPE_K(3,0));
    v4_1 = FCN_V(tgMH_SETV)(&v4_0);
    Test__Expect_NE(false, FCN_V(tgMH_Is_Vector_Valid)(&v4_1));

    Test__Expect_EQ(v4_1.x, TYPE_K(7,0) );
    Test__Expect_EQ(v4_1.y, TYPE_K(2,0) );
    Test__Expect_EQ(v4_1.z, TYPE_K(3,0) );

    v4_0 = FCN_V(tgMH_SETV_S)(TYPE_K(7,0), TYPE_K(2,0), TYPE_K(3,0));
    v4_1 = FCN_V(tgMH_SETV)(&v4_0);
    Test__Expect_NE(false, FCN_V(tgMH_Is_Vector_Valid)(&v4_1));

    Test__Expect_EQ(v4_1.x, TYPE_K(7,0) );
    Test__Expect_EQ(v4_1.y, TYPE_K(2,0) );
    Test__Expect_EQ(v4_1.z, TYPE_K(3,0) );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_RAND) ------------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_RAND) )
{
    FCN_V(tgMH_RAND)();

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_Set_Ortho) ------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_Set_Ortho) )
{
    VEC_T(1)                            v4_0;

    v4_0 = FCN_V(tgMH_Set_Ortho)(&(VEC_K(KTgUNIT_X)));
    Test__Expect_NE(false, FCN_F(tgCM_NR0)(FCN_V(tgMH_DOT)(&(VEC_K(KTgUNIT_X)), &v4_0)));
    Test__Expect_NE(false, FCN_F(tgCM_NR1)(FCN_V(tgMH_LEN)(&v4_0)));
    
    v4_0 = FCN_V(tgMH_Set_Ortho)(&(VEC_K(KTgUNIT_Y)));
    Test__Expect_NE(false, FCN_F(tgCM_NR0)(FCN_V(tgMH_DOT)(&(VEC_K(KTgUNIT_Y)), &v4_0)));
    Test__Expect_NE(false, FCN_F(tgCM_NR1)(FCN_V(tgMH_LEN)(&v4_0)));
    
    v4_0 = FCN_V(tgMH_Set_Ortho)(&(VEC_K(KTgUNIT_Z)));
    Test__Expect_NE(false, FCN_F(tgCM_NR0)(FCN_V(tgMH_DOT)(&(VEC_K(KTgUNIT_Z)), &v4_0)));
    Test__Expect_NE(false, FCN_F(tgCM_NR1)(FCN_V(tgMH_LEN)(&v4_0)));

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_Init_Basis_From_Vector) ------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_Init_Basis_From_Vector) )
{
    VEC_T(1)                            v4_0, v4_1, v4_2;
    VAR_T()                             fLimit;

    FCN_V(tgMH_Init_Basis_From_Vector)(&v4_0, &v4_1, &v4_2);
    fLimit = VAR_K(KTgEPS) * FCN_V(tgMH_ERR)(&v4_0) * FCN_V(tgMH_ERR)(&v4_1) * FCN_V(tgMH_ERR)(&v4_2);
    Test__Expect_NE(false, FCN_F(tgPM_ABS)(FCN_V(tgMH_DOT)(&v4_0, &v4_2)) <= fLimit);
    Test__Expect_NE(false, FCN_F(tgPM_ABS)(FCN_V(tgMH_DOT)(&v4_1, &v4_2)) <= fLimit);

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_Is_Point_Valid) -------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_Is_Point_Valid) )
{
    VAR_T()                            tInvalid = 0;
    VEC_T(1)                           v4_0;

    tgMM_Set_U08_0xFF( &tInvalid, sizeof( VAR_T() ) );

    v4_0 = FCN_V(tgMH_SET_S)(TYPE_K(0), tInvalid, TYPE_K(0), TYPE_K(0));
    Test__Expect_EQ(0, FCN_V(tgMH_Is_Point_Valid)(&v4_0));
    
    v4_0 = FCN_V(tgMH_SET_S)(TYPE_K(0), tInvalid, TYPE_K(0), TYPE_K(1));
    Test__Expect_EQ(0, FCN_V(tgMH_Is_Point_Valid)(&v4_0));
    
    v4_0 = FCN_V(tgMH_SET_S)(TYPE_K(7,0), TYPE_K(2,0), TYPE_K(3,0), TYPE_K(0));
    Test__Expect_EQ(0, FCN_V(tgMH_Is_Point_Valid)(&v4_0));
    
    v4_0 = FCN_V(tgMH_SET_S)(TYPE_K(7,0), TYPE_K(2,0), TYPE_K(3,0), TYPE_K(1));
    Test__Expect_NE(false, FCN_V(tgMH_Is_Point_Valid)(&v4_0));

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_Is_Vector_Valid) ------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_Is_Vector_Valid) )
{
    VAR_T()                            tInvalid = 0;
    VEC_T(1)                           v4_0;

    tgMM_Set_U08_0xFF( &tInvalid, sizeof( VAR_T() ) );

    v4_0 = FCN_V(tgMH_SET_S)(TYPE_K(0), tInvalid, TYPE_K(0), TYPE_K(0));
    Test__Expect_EQ(0, FCN_V(tgMH_Is_Vector_Valid)(&v4_0));
    
    v4_0 = FCN_V(tgMH_SET_S)(TYPE_K(0), tInvalid, TYPE_K(0), TYPE_K(1));
    Test__Expect_EQ(0, FCN_V(tgMH_Is_Vector_Valid)(&v4_0));
    
    v4_0 = FCN_V(tgMH_SET_S)(TYPE_K(7,0), TYPE_K(2,0), TYPE_K(3,0), TYPE_K(0));
    Test__Expect_NE(false, FCN_V(tgMH_Is_Vector_Valid)(&v4_0));
    
    v4_0 = FCN_V(tgMH_SET_S)(TYPE_K(7,0), TYPE_K(2,0), TYPE_K(3,0), TYPE_K(1));
    Test__Expect_EQ(0, FCN_V(tgMH_Is_Vector_Valid)(&v4_0));

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_DOT3) ------------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_DOT3) )
{
    VEC_T(1)                            v4_0, v4_1, v4_2;
    VAR_T()                             fTest;

    tgMM_Set_U08_0xFF( &v4_0, sizeof( VEC_T(1) ) );
    tgMM_Set_U08_0xFF( &v4_1, sizeof( VEC_T(1) ) );
    tgMM_Set_U08_0xFF( &v4_2, sizeof( VEC_T(1) ) );

    for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        while (TYPE_K(0) == (v4_0.m_aData[uiIndex] = FCN_F(tgCM_RAND)()));
        while (TYPE_K(0) == (v4_1.m_aData[uiIndex] = FCN_F(tgCM_RAND)()));
    };

    v4_0.m_aData[3] = TYPE_K(0);
    v4_1.m_aData[3] = TYPE_K(0);

    fTest = v4_0.m_aData[0] * v4_1.m_aData[0];
    fTest += v4_0.m_aData[1] * v4_1.m_aData[1];
    fTest += v4_0.m_aData[2] * v4_1.m_aData[2];
    Test__Expect_NE(false, FCN_F(tgCM_NR0)(fTest - FCN_V(tgMH_DOT3)(&v4_0, &v4_1)));

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_CX) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_CX) )
{
    VEC_T(1)                            v4_0, v4_1, v4_2;
    VAR_T()                             fLimit;

    tgMM_Set_U08_0xFF( &v4_0, sizeof( VEC_T(1) ) );
    tgMM_Set_U08_0xFF( &v4_1, sizeof( VEC_T(1) ) );
    tgMM_Set_U08_0xFF( &v4_2, sizeof( VEC_T(1) ) );

    for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        while (TYPE_K(0) == (v4_0.m_aData[uiIndex] = FCN_F(tgCM_RAND)()));
        while (TYPE_K(0) == (v4_1.m_aData[uiIndex] = FCN_F(tgCM_RAND)()));
    };

    v4_2 = FCN_V(tgMH_CX)(&(VEC_K(KTgUNIT_X)), &(VEC_K(KTgUNIT_Y)));
    Test__Expect_NE(false, FCN_F(tgCM_NR0)(v4_2.m_aData[0] - VEC_K(KTgUNIT_Z).m_aData[0]));
    Test__Expect_NE(false, FCN_F(tgCM_NR0)(v4_2.m_aData[1] - VEC_K(KTgUNIT_Z).m_aData[1]));
    Test__Expect_NE(false, FCN_F(tgCM_NR0)(v4_2.m_aData[2] - VEC_K(KTgUNIT_Z).m_aData[2]));
    
    v4_2 = FCN_V(tgMH_CX)(&v4_0, &v4_1);
    fLimit = VAR_K(KTgEPS) * FCN_V(tgMH_ERR)(&v4_0) * FCN_V(tgMH_ERR)(&v4_1) * FCN_V(tgMH_ERR)(&v4_2);
    Test__Expect_NE(false, FCN_F(tgPM_ABS)(FCN_V(tgMH_DOT)(&v4_0, &v4_2)) <= fLimit);
    Test__Expect_NE(false, FCN_F(tgPM_ABS)(FCN_V(tgMH_DOT)(&v4_1, &v4_2)) <= fLimit);

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_UCX) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_UCX) )
{
    VEC_T(1)                            v4_0, v4_1, v4_2;
    VAR_T()                             fLimit;

    tgMM_Set_U08_0xFF( &v4_0, sizeof( VEC_T(1) ) );
    tgMM_Set_U08_0xFF( &v4_1, sizeof( VEC_T(1) ) );
    tgMM_Set_U08_0xFF( &v4_2, sizeof( VEC_T(1) ) );

    for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        while (TYPE_K(0) == (v4_0.m_aData[uiIndex] = FCN_F(tgCM_RAND)()));
        while (TYPE_K(0) == (v4_1.m_aData[uiIndex] = FCN_F(tgCM_RAND)()));
    };

    v4_2 = FCN_V(tgMH_UCX)(&(VEC_K(KTgUNIT_X)), &(VEC_K(KTgUNIT_Y)));
    Test__Expect_NE(false, FCN_F(tgCM_NR0)(v4_2.m_aData[0] - VEC_K(KTgUNIT_Z).m_aData[0]));
    Test__Expect_NE(false, FCN_F(tgCM_NR0)(v4_2.m_aData[1] - VEC_K(KTgUNIT_Z).m_aData[1]));
    Test__Expect_NE(false, FCN_F(tgCM_NR0)(v4_2.m_aData[2] - VEC_K(KTgUNIT_Z).m_aData[2]));
    
    v4_2 = FCN_V(tgMH_UCX)(&v4_0, &v4_1);
    fLimit = VAR_K(KTgEPS) * FCN_V(tgMH_ERR)(&v4_0) * FCN_V(tgMH_ERR)(&v4_1);
    Test__Expect_NE(false, FCN_F(tgPM_ABS)(FCN_V(tgMH_DOT)(&v4_0, &v4_2)) <= fLimit);
    Test__Expect_NE(false, FCN_F(tgPM_ABS)(FCN_V(tgMH_DOT)(&v4_1, &v4_2)) <= fLimit);
    Test__Expect_NE(false, FCN_F(tgPM_ABS)(FCN_V(tgMH_LEN)(&v4_2) - TYPE_K(1)) <= fLimit);

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_UCX_LEN) --------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_UCX_LEN) )
{
    VEC_T(1)                            v4_0, v4_1, v4_2;
    VAR_T()                             fLimit, fLength, fTest;

    tgMM_Set_U08_0xFF( &v4_0, sizeof( VEC_T(1) ) );
    tgMM_Set_U08_0xFF( &v4_1, sizeof( VEC_T(1) ) );
    tgMM_Set_U08_0xFF( &v4_2, sizeof( VEC_T(1) ) );

    for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        while (TYPE_K(0) == (v4_0.m_aData[uiIndex] = FCN_F(tgCM_RAND)()));
        while (TYPE_K(0) == (v4_1.m_aData[uiIndex] = FCN_F(tgCM_RAND)()));
    };

    v4_2 = FCN_V(tgMH_UCX_LEN)(&fTest, &(VEC_K(KTgUNIT_X)), &(VEC_K(KTgUNIT_Y)));
    Test__Expect_NE(false, FCN_F(tgCM_NR0)(v4_2.m_aData[0] - VEC_K(KTgUNIT_Z).m_aData[0]));
    Test__Expect_NE(false, FCN_F(tgCM_NR0)(v4_2.m_aData[1] - VEC_K(KTgUNIT_Z).m_aData[1]));
    Test__Expect_NE(false, FCN_F(tgCM_NR0)(v4_2.m_aData[2] - VEC_K(KTgUNIT_Z).m_aData[2]));
    
    v4_2 = FCN_V(tgMH_CX)(&v4_0, &v4_1);
    fLength = FCN_V(tgMH_LEN)(&v4_2);
    v4_2 = FCN_V(tgMH_UCX_LEN)(&fTest, &v4_0, &v4_1);
    fLimit = VAR_K(KTgEPS) * FCN_V(tgMH_ERR)(&v4_0) * FCN_V(tgMH_ERR)(&v4_1);
    Test__Expect_NE(false, FCN_F(tgPM_ABS)(FCN_V(tgMH_DOT)(&v4_0, &v4_2)) <= fLimit);
    Test__Expect_NE(false, FCN_F(tgPM_ABS)(FCN_V(tgMH_DOT)(&v4_1, &v4_2)) <= fLimit);
    Test__Expect_NE(false, FCN_F(tgPM_ABS)(FCN_V(tgMH_LEN)(&v4_2) - TYPE_K(1)) <= fLimit);
    Test__Expect_NE(false, FCN_F(tgPM_ABS)(fLength - fTest) <= fLimit);

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_NORM3_LEN) ------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_NORM3_LEN) )
{
    VEC_T(1)                            v4_2;
    VAR_T()                             fLength;

    tgMM_Set_U08_0xFF( &v4_2, sizeof( VEC_T(1) ) );

    for (TgRSIZE uiIndex = 0; uiIndex < 4; ++uiIndex)
    {
        while (TYPE_K(0) == (v4_2.m_aData[uiIndex] = FCN_F(tgCM_RAND)()));
    };

    v4_2 = FCN_V(tgMH_NORM3_LEN)(&fLength, &v4_2);

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_NORM3) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_NORM3) )
{
    VEC_T(1)                            v4_2;

    tgMM_Set_U08_0xFF( &v4_2, sizeof( VEC_T(1) ) );

    for (TgRSIZE uiIndex = 0; uiIndex < 4; ++uiIndex)
    {
        while (TYPE_K(0) == (v4_2.m_aData[uiIndex] = FCN_F(tgCM_RAND)()));
    };

    v4_2 = FCN_V(tgMH_NORM3)(&v4_2);

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_PRX3) ------------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_PRX3) )
{
    VEC_T(1)                            v4_0, v4_1, v4_2;

    tgMM_Set_U08_0xFF( &v4_0, sizeof( VEC_T(1) ) );
    tgMM_Set_U08_0xFF( &v4_1, sizeof( VEC_T(1) ) );
    tgMM_Set_U08_0xFF( &v4_2, sizeof( VEC_T(1) ) );

    for (TgRSIZE uiIndex = 0; uiIndex < 4; ++uiIndex)
    {
        while (TYPE_K(0) == (v4_0.m_aData[uiIndex] = FCN_F(tgCM_RAND)()));
    };

    v4_1 = v4_0;
    Test__Expect_NE(false, FCN_V(tgMH_PRX3)( &v4_0, &v4_1 ));
    v4_1.w = -v4_1.w;
    Test__Expect_NE(false, FCN_V(tgMH_PRX3)( &v4_0, &v4_1 ));
    v4_1.w = v4_0.w;
    v4_1.y += VAR_K(KTgROOT_EPS) + VAR_K(KTgROOT_EPS);
    Test__Expect_EQ(false, FCN_V(tgMH_PRX3)( &v4_0, &v4_1 ));


    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_PRX4) ------------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_PRX4) )
{
    VEC_T(1)                            v4_0, v4_1, v4_2;

    tgMM_Set_U08_0xFF( &v4_0, sizeof( VEC_T(1) ) );
    tgMM_Set_U08_0xFF( &v4_1, sizeof( VEC_T(1) ) );
    tgMM_Set_U08_0xFF( &v4_2, sizeof( VEC_T(1) ) );

    for (TgRSIZE uiIndex = 0; uiIndex < 4; ++uiIndex)
    {
        while (TYPE_K(0) == (v4_0.m_aData[uiIndex] = FCN_F(tgCM_RAND)()));
    };

    v4_1 = v4_0;
    Test__Expect_NE(false, FCN_V(tgMH_PRX4)( &v4_0, &v4_1 ));
    v4_1.w = -v4_1.w;
    Test__Expect_EQ(false, FCN_V(tgMH_PRX4)( &v4_0, &v4_1 ));
    v4_1.w = v4_0.w;
    v4_1.y += VAR_K(KTgROOT_EPS) + VAR_K(KTgROOT_EPS);
    Test__Expect_EQ(false, FCN_V(tgMH_PRX4)( &v4_0, &v4_1 ));

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_QT_Init_Axis_Angle_S) -------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_QT_Init_Axis_Angle_S) )
{
    VEC_T(1)                            v4_0, v4_1, v4_2;

    tgMM_Set_U08_0xFF( &v4_0, sizeof( VEC_T(1) ) );
    tgMM_Set_U08_0xFF( &v4_1, sizeof( VEC_T(1) ) );
    tgMM_Set_U08_0xFF( &v4_2, sizeof( VEC_T(1) ) );

    for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        while (TYPE_K(0) == (v4_1.m_aData[uiIndex] = FCN_F(tgCM_RAND)()));
    };

    v4_1.m_aData[3] = TYPE_K(0);
    v4_1 = FCN_V(tgMH_NORM)( &v4_1 );

    FCN_V(tgMH_QT_Init_Axis_Angle_S)( v4_1.x, v4_1.y, v4_1.z, TYPE_K(0,25)*VAR_K(KTgPI) );
    FCN_V(tgMH_QT_Init_Axis_Angle)( &v4_1 );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_QT_Init_Axis_Angle) ---------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_QT_Init_Axis_Angle) )
{
    VEC_T(1)                            v4_0, v4_1, v4_2;

    tgMM_Set_U08_0xFF( &v4_0, sizeof( VEC_T(1) ) );
    tgMM_Set_U08_0xFF( &v4_1, sizeof( VEC_T(1) ) );
    tgMM_Set_U08_0xFF( &v4_2, sizeof( VEC_T(1) ) );

    for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        while (TYPE_K(0) == (v4_1.m_aData[uiIndex] = FCN_F(tgCM_RAND)()));
    };

    v4_1.m_aData[3] = TYPE_K(0);
    v4_1 = FCN_V(tgMH_NORM)( &v4_1 );

    FCN_V(tgMH_QT_Init_Axis_Angle)( &v4_1 );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_QT_Init_Euler_S) ------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_QT_Init_Euler_S) )
{
    VEC_T(1)                            v4_0, v4_1, v4_2;

    tgMM_Set_U08_0xFF( &v4_0, sizeof( VEC_T(1) ) );
    tgMM_Set_U08_0xFF( &v4_1, sizeof( VEC_T(1) ) );
    tgMM_Set_U08_0xFF( &v4_2, sizeof( VEC_T(1) ) );

    for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        while (TYPE_K(0) == (v4_1.m_aData[uiIndex] = FCN_F(tgCM_RAND)()));
    };

    v4_1.m_aData[3] = TYPE_K(0);
    v4_1 = FCN_V(tgMH_NORM)( &v4_1 );

    FCN_V(tgMH_QT_Init_Euler_S)( TYPE_K(0,1)*VAR_K(KTgPI), TYPE_K(0,2)*VAR_K(KTgPI), TYPE_K(0,3)*VAR_K(KTgPI) );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_QT_Init_Euler) --------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_QT_Init_Euler) )
{
    VEC_T(1)                            v4_0, v4_1, v4_2;

    tgMM_Set_U08_0xFF( &v4_0, sizeof( VEC_T(1) ) );
    tgMM_Set_U08_0xFF( &v4_1, sizeof( VEC_T(1) ) );
    tgMM_Set_U08_0xFF( &v4_2, sizeof( VEC_T(1) ) );

    for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        while (TYPE_K(0) == (v4_1.m_aData[uiIndex] = FCN_F(tgCM_RAND)()));
    };

    v4_1.m_aData[3] = TYPE_K(0);
    v4_1 = FCN_V(tgMH_NORM)( &v4_1 );

    FCN_V(tgMH_QT_Init_Euler)( &v4_1 );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_QT_Init_EulerX) -------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_QT_Init_EulerX) )
{
    FCN_V(tgMH_QT_Init_EulerX)( TYPE_K(0,25)*VAR_K(KTgPI) );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_QT_Init_EulerY) -------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_QT_Init_EulerY) )
{
    FCN_V(tgMH_QT_Init_EulerY)( TYPE_K(0,25)*VAR_K(KTgPI) );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_QT_Init_EulerZ) -------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_QT_Init_EulerZ) )
{
    FCN_V(tgMH_QT_Init_EulerZ)( TYPE_K(0,25)*VAR_K(KTgPI) );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_Quat2Euler_S) ---------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_Quat2Euler_S) )
{
    VEC_T(1)                            v4_0, v4_1;

    v4_0 = FCN_V(tgMH_QT_Init_Euler_S)( TYPE_K(0,1)*VAR_K(KTgPI), TYPE_K(0,2)*VAR_K(KTgPI), TYPE_K(0,3)*VAR_K(KTgPI) );
    FCN_V(tgMH_Quat2Euler_S)(&v4_1.x, &v4_1.y, &v4_1.z, &v4_0);
    Test__Expect_EQ(true, FCN_F(tgCM_NR0)( v4_1.x - TYPE_K(0,1)*VAR_K(KTgPI) ));
    Test__Expect_EQ(true, FCN_F(tgCM_NR0)( v4_1.y - TYPE_K(0,2)*VAR_K(KTgPI) ));
    Test__Expect_EQ(true, FCN_F(tgCM_NR0)( v4_1.z - TYPE_K(0,3)*VAR_K(KTgPI) ));

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_Quat2Euler) ------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_Quat2Euler) )
{
    VEC_T(1)                            v4_0, v4_2;

    v4_2 = FCN_V(tgMH_Quat2Euler)(&v4_0);
    Test__Expect_EQ(true, FCN_F(tgCM_NR0)( v4_2.x - TYPE_K(0,1)*VAR_K(KTgPI) ));
    Test__Expect_EQ(true, FCN_F(tgCM_NR0)( v4_2.y - TYPE_K(0,2)*VAR_K(KTgPI) ));
    Test__Expect_EQ(true, FCN_F(tgCM_NR0)( v4_2.z - TYPE_K(0,3)*VAR_K(KTgPI) ));

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_QT_INV) ---------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_QT_INV) )
{
    VEC_T(1)                            v4_0, v4_1;

    v4_0 = FCN_V(tgMH_QT_INV)( &v4_1 );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_QT_MUL) ---------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_QT_MUL) )
{
    VEC_T(1)                            v4_0, v4_1, v4_2;

    v4_0 = FCN_V(tgMH_QT_MUL)( &v4_1, &v4_2 );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_QT_SLERP) -------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_QT_SLERP) )
{
    VEC_T(1)                            v4_0, v4_1, v4_2;

    v4_0 = FCN_V(tgMH_QT_SLERP)( TYPE_K(0,1), &v4_1, &v4_2 );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_QT_VECTOR_TO_VECTOR) --------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_QT_VECTOR_TO_VECTOR) )
{
    VEC_T(1)                            v4_0, v4_1, v4_2;

    v4_0 = FCN_V(tgMH_QT_VECTOR_TO_VECTOR)( &v4_1, &v4_2 );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_QT_TX) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_QT_TX) )
{
    VEC_T(1)                            v4_0;
    VEC_T(1)                            q0;

    q0 = VEC_K(KTgUNIT_X);
    FCN_V(tgMH_QT_TX)( &v4_0, &q0 );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_QT_INV_TX) ------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_QT_INV_TX) )
{
    VEC_T(1)                            v4_0;
    VEC_T(1)                            q0;

    q0 = VEC_K(KTgUNIT_X);
    FCN_V(tgMH_QT_INV_TX)( &v4_0, &q0 );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_Rotate_Vector_EulerX) -------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_Rotate_Vector_EulerX) )
{
    VEC_T(1)                            v4_0, v4_1;

    v4_0 = VEC_K(KTgUNIT_Y);
    v4_1 = FCN_V(tgMH_Rotate_Vector_EulerX)( &v4_0, TYPE_K(0,1)*VAR_K(KTgPI) );


    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_Rotate_Vector_EulerY) -------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_Rotate_Vector_EulerY) )
{
    VEC_T(1)                            v4_0, v4_1;

    v4_0 = VEC_K(KTgUNIT_X);
    v4_1 = FCN_V(tgMH_Rotate_Vector_EulerY)( &v4_0, TYPE_K(0,1)*VAR_K(KTgPI) );


    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_Rotate_Vector_EulerZ) -------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_Rotate_Vector_EulerZ) )
{
    VEC_T(1)                            v4_0, v4_1;

    v4_0 = VEC_K(KTgUNIT_X);
    v4_1 = FCN_V(tgMH_Rotate_Vector_EulerZ)( &v4_0, TYPE_K(0,1)*VAR_K(KTgPI) );


    TEST_END_METHOD( KTgS_OK );
}
