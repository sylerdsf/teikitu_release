/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common [Unit Test] [Test] - Math [Matrix] [N] [F].c_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Common ===================================================================================================================================================================== */

/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*  Test Functions                                                                                                                                                                 */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

/* ---- FCN_M_UT(tgMH_ADD_N) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_ADD_N) )
{
    union
    {
        VEC_N_T(TEMPLATE__VECTOR_ROW)       xMN;
        VEC_T(TEMPLATE__VECTOR_ROW)         xMT;
    }                                   sM0, sM1, sM2;

    for (TgRSIZE ui0 = 0; ui0 < TEMPLATE__VECTOR_ROW; ++ui0)
    {
        sM0.xMT.m_avRow[ui0] = FCN_V(tgMH_RAND)();
        sM1.xMT.m_avRow[ui0] = FCN_V(tgMH_RAND)();
    };

    FCN_M(tgMH_ADD_N)( &sM2.xMN, &sM0.xMN, &sM1.xMN );

    for (TgRSIZE uiRow = 0; uiRow < TEMPLATE__VECTOR_ROW; ++uiRow)
    {
        for (TgRSIZE uiCol = 0; uiCol < TEMPLATE__VECTOR_DIM; ++uiCol)
        {
            VAR_T()                             E0, E1, E2;

            E0 = sM0.xMT.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol];
            E1 = sM1.xMT.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol];
            E2 = sM2.xMT.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol];

            Test__Expect_EQ( E2, E0 + E1 );
        };
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_MUL_N) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_MUL_N) )
{
    union
    {
        VEC_N_T(TEMPLATE__VECTOR_ROW)       xMN;
        VEC_T(TEMPLATE__VECTOR_ROW)         xMT;
    }                                   sM0, sM1, sM2;

    for (TgRSIZE ui0 = 0; ui0 < TEMPLATE__VECTOR_ROW; ++ui0)
    {
        sM0.xMT.m_avRow[ui0] = FCN_V(tgMH_RAND)();
        sM1.xMT.m_avRow[ui0] = FCN_V(tgMH_RAND)();
    };

    FCN_M(tgMH_MUL_N)( &sM2.xMN, &sM0.xMN, &sM1.xMN );

    for (TgRSIZE uiRow = 0; uiRow < TEMPLATE__VECTOR_ROW; ++uiRow)
    {
        for (TgRSIZE uiCol = 0; uiCol < TEMPLATE__VECTOR_DIM; ++uiCol)
        {
            VAR_T()                             E0, E1, E2;

            E0 = sM0.xMT.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol];
            E1 = sM1.xMT.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol];
            E2 = sM2.xMT.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol];

            Test__Expect_EQ( E2, E0 * E1 );
        };
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_MUL_SM_N) -------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_MUL_SM_N) )
{
    union
    {
        VEC_N_T(TEMPLATE__VECTOR_ROW)       xMN;
        VEC_T(TEMPLATE__VECTOR_ROW)         xMT;
    }                                   sM0, sM1;

    for (TgRSIZE ui0 = 0; ui0 < TEMPLATE__VECTOR_ROW; ++ui0)
    {
        sM0.xMT.m_avRow[ui0] = FCN_V(tgMH_RAND)();
    };

    FCN_M(tgMH_MUL_SM_N)( &sM1.xMN, FCN_V(tgMH_SET1_N)( TYPE_K(2,0) ), &sM0.xMN );

    for (TgRSIZE uiRow = 0; uiRow < TEMPLATE__VECTOR_ROW; ++uiRow)
    {
        for (TgRSIZE uiCol = 0; uiCol < TEMPLATE__VECTOR_DIM; ++uiCol)
        {
            VAR_T()                             E0, E1;

            E0 = sM0.xMT.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol];
            E1 = sM1.xMT.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol];

            Test__Expect_EQ( E1, TYPE_K(2,0) * E0 );
        };
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_MUL_MS_N) -------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_MUL_MS_N) )
{
    union
    {
        VEC_N_T(TEMPLATE__VECTOR_ROW)       xMN;
        VEC_T(TEMPLATE__VECTOR_ROW)         xMT;
    }                                   sM0, sM1;

    for (TgRSIZE ui0 = 0; ui0 < TEMPLATE__VECTOR_ROW; ++ui0)
    {
        sM0.xMT.m_avRow[ui0] = FCN_V(tgMH_RAND)();
    };

    FCN_M(tgMH_MUL_MS_N)( &sM1.xMN, &sM0.xMN, FCN_V(tgMH_SET1_N)( TYPE_K(3,0) ) );

    for (TgRSIZE uiRow = 0; uiRow < TEMPLATE__VECTOR_ROW; ++uiRow)
    {
        for (TgRSIZE uiCol = 0; uiCol < TEMPLATE__VECTOR_DIM; ++uiCol)
        {
            VAR_T()                             E0, E1;

            E0 = sM0.xMT.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol];
            E1 = sM1.xMT.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol];

            Test__Expect_EQ( E1, E0 * TYPE_K(3,0) );
        };
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_DIV_N) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_DIV_N) )
{
    union
    {
        VEC_N_T(TEMPLATE__VECTOR_ROW)       xMN;
        VEC_T(TEMPLATE__VECTOR_ROW)         xMT;
    }                                   sM0, sM1, sM2;

    for (TgRSIZE ui0 = 0; ui0 < TEMPLATE__VECTOR_ROW; ++ui0)
    {
        sM0.xMT.m_avRow[ui0] = FCN_V(tgMH_RAND)();
        sM1.xMT.m_avRow[ui0] = FCN_V(tgMH_RAND)();
    };

    FCN_M(tgMH_DIV_N)( &sM2.xMN, &sM0.xMN, &sM1.xMN );

    for (TgRSIZE uiRow = 0; uiRow < TEMPLATE__VECTOR_ROW; ++uiRow)
    {
        for (TgRSIZE uiCol = 0; uiCol < TEMPLATE__VECTOR_DIM; ++uiCol)
        {
            VAR_T()                             E0, E1, E2;

            E0 = sM0.xMT.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol];
            E1 = sM1.xMT.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol];
            E2 = sM2.xMT.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol];

            Test__Expect_EQ( E2, E0 / E1 );
        };
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_DIV_SM_N) -------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_DIV_SM_N) )
{
    union
    {
        VEC_N_T(TEMPLATE__VECTOR_ROW)       xMN;
        VEC_T(TEMPLATE__VECTOR_ROW)         xMT;
    }                                   sM0, sM1;

    for (TgRSIZE ui0 = 0; ui0 < TEMPLATE__VECTOR_ROW; ++ui0)
    {
        sM0.xMT.m_avRow[ui0] = FCN_V(tgMH_RAND)();
    };

    FCN_M(tgMH_DIV_SM_N)( &sM1.xMN, FCN_V(tgMH_SET1_N)( TYPE_K(2,0) ), &sM0.xMN );

    for (TgRSIZE uiRow = 0; uiRow < TEMPLATE__VECTOR_ROW; ++uiRow)
    {
        for (TgRSIZE uiCol = 0; uiCol < TEMPLATE__VECTOR_DIM; ++uiCol)
        {
            VAR_T()                             E0, E1;

            E0 = sM0.xMT.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol];
            E1 = sM1.xMT.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol];

            Test__Expect_EQ( E1, TYPE_K(2,0) / E0 );
        };
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_DIV_MS_N) -------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_DIV_MS_N) )
{
    union
    {
        VEC_N_T(TEMPLATE__VECTOR_ROW)       xMN;
        VEC_T(TEMPLATE__VECTOR_ROW)         xMT;
    }                                   sM0, sM1;

    for (TgRSIZE ui0 = 0; ui0 < TEMPLATE__VECTOR_ROW; ++ui0)
    {
        sM0.xMT.m_avRow[ui0] = FCN_V(tgMH_RAND)();
    };

    FCN_M(tgMH_DIV_MS_N)( &sM1.xMN, &sM0.xMN, FCN_V(tgMH_SET1_N)( TYPE_K(3,0) ) );

    for (TgRSIZE uiRow = 0; uiRow < TEMPLATE__VECTOR_ROW; ++uiRow)
    {
        for (TgRSIZE uiCol = 0; uiCol < TEMPLATE__VECTOR_DIM; ++uiCol)
        {
            VAR_T()                             E0, E1;

            E0 = sM0.xMT.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol];
            E1 = sM1.xMT.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol];

            Test__Expect_EQ(true, FCN_F(tgCM_NR0)( E1 - E0 / TYPE_K(3,0) ));
        };
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_SUB_N) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_SUB_N) )
{
    union
    {
        VEC_N_T(TEMPLATE__VECTOR_ROW)       xMN;
        VEC_T(TEMPLATE__VECTOR_ROW)         xMT;
    }                                   sM0, sM1, sM2;

    for (TgRSIZE ui0 = 0; ui0 < TEMPLATE__VECTOR_ROW; ++ui0)
    {
        sM0.xMT.m_avRow[ui0] = FCN_V(tgMH_RAND)();
        sM1.xMT.m_avRow[ui0] = FCN_V(tgMH_RAND)();
    };

    FCN_M(tgMH_SUB_N)( &sM2.xMN, &sM0.xMN, &sM1.xMN );

    for (TgRSIZE uiRow = 0; uiRow < TEMPLATE__VECTOR_ROW; ++uiRow)
    {
        for (TgRSIZE uiCol = 0; uiCol < TEMPLATE__VECTOR_DIM; ++uiCol)
        {
            VAR_T()                             E0, E1, E2;

            E0 = sM0.xMT.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol];
            E1 = sM1.xMT.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol];
            E2 = sM2.xMT.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol];

            Test__Expect_EQ( E2, E0 - E1 );
        };
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_NEG_N) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_NEG_N) )
{
    union
    {
        VEC_N_T(TEMPLATE__VECTOR_ROW)       xMN;
        VEC_T(TEMPLATE__VECTOR_ROW)         xMT;
    }                                   sM0, sM1;

    for (TgRSIZE ui0 = 0; ui0 < TEMPLATE__VECTOR_ROW; ++ui0)
    {
        sM0.xMT.m_avRow[ui0] = FCN_V(tgMH_RAND)();
    };

    FCN_M(tgMH_NEG_N)( &sM1.xMN, &sM0.xMN );

    for (TgRSIZE uiRow = 0; uiRow < TEMPLATE__VECTOR_ROW; ++uiRow)
    {
        for (TgRSIZE uiCol = 0; uiCol < TEMPLATE__VECTOR_DIM; ++uiCol)
        {
            VAR_T()                             E0, E1;

            E0 = sM0.xMT.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol];
            E1 = sM1.xMT.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol];

            Test__Expect_EQ( E1, -E0 );
        };
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_CLI_N) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_CLI_N) )
{
    union
    {
        VEC_N_T(TEMPLATE__VECTOR_ROW)       xMN;
        VEC_T(TEMPLATE__VECTOR_ROW)         xMT;
    }                                   sM0;

    FCN_M(tgMH_CLI_N)( &sM0.xMN );

    for (TgRSIZE uiRow = 0; uiRow < TEMPLATE__VECTOR_ROW; ++uiRow)
    {
        for (TgRSIZE uiCol = 0; uiCol < TEMPLATE__VECTOR_DIM; ++uiCol)
        {
            VAR_T()                             E0;

            E0 = sM0.xMT.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol];

            Test__Expect_EQ( uiRow ==uiCol ? TYPE_K(1) : TYPE_K(0), E0 );
        };
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_SET_T_N) --------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_SET_T_N) )
{
    union
    {
        VEC_N_T(TEMPLATE__VECTOR_ROW)       xMN;
        VEC_T(TEMPLATE__VECTOR_ROW)         xMT;
    }                                   sM0;
    TgUN_V128                           sS0;

    VAR_UN_1_MEMBER(sS0.m_) = FCN_V(tgMH_SETP_S)( FCN_F(tgCM_RAND)(), FCN_F(tgCM_RAND)(), FCN_F(tgCM_RAND)() );
    FCN_M(tgMH_SET_T_N)( &sM0.xMN, VAR_UN_1_MEMBER(sS0.m_N_) );

    Test__Expect_EQ( VAR_UN_1_MEMBER(sS0.m_).x, sM0.xMT.m_aElement[0*TEMPLATE__VECTOR_DIM + 3] );
    Test__Expect_EQ( VAR_UN_1_MEMBER(sS0.m_).y, sM0.xMT.m_aElement[1*TEMPLATE__VECTOR_DIM + 3] );
    Test__Expect_EQ( VAR_UN_1_MEMBER(sS0.m_).z, sM0.xMT.m_aElement[2*TEMPLATE__VECTOR_DIM + 3] );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_INIT_T_N) -------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_INIT_T_N) )
{
    union
    {
        VEC_N_T(TEMPLATE__VECTOR_ROW)       xMN;
        VEC_T(TEMPLATE__VECTOR_ROW)         xMT;
    }                                   sM0;
    VEC_N_T(1)                          vS0;

    vS0 = FCN_V(tgMH_SETP_N)( FCN_V(tgMH_RAND_N)() );

    FCN_M(tgMH_INIT_T_N)( &sM0.xMN, vS0 );

    for (TgRSIZE uiRow = 0; uiRow < TEMPLATE__VECTOR_ROW; ++uiRow)
    {
        for (TgRSIZE uiCol = 0; uiCol + 1 < TEMPLATE__VECTOR_DIM; ++uiCol)
        {
            VAR_T()                             E0;

            E0 = sM0.xMT.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol];

            Test__Expect_EQ( uiRow ==uiCol ? TYPE_K(1) : TYPE_K(0), E0 );
        };
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_CAT_N) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_CAT_N) )
{
    union
    {
        VEC_N_T(TEMPLATE__VECTOR_ROW)       xMN;
        VEC_T(TEMPLATE__VECTOR_ROW)         xMT;
    }                                   sM0, sM1, sM2;

    for (TgRSIZE ui0 = 0; ui0 < TEMPLATE__VECTOR_ROW*TEMPLATE__VECTOR_DIM; ++ui0)
    {
        while (0 == (sM1.xMT.m_aElement[ui0] = FCN_F(tgCM_RAND)()));
        while (0 == (sM2.xMT.m_aElement[ui0] = FCN_F(tgCM_RAND)()));
    };

    FCN_M(tgMH_CAT_N)(&sM0.xMN, &sM1.xMN, &sM2.xMN);

    for (TgRSIZE i0 = 0; i0 < TEMPLATE__VECTOR_ROW*TEMPLATE__VECTOR_DIM; ++i0)
    {
        VAR_T()                             tTotal;

        tTotal = TYPE_K(0);

        for (TgRSIZE iIndex = 0; iIndex < tgCM_MIN_UMAX( TEMPLATE__VECTOR_ROW, TEMPLATE__VECTOR_DIM ); ++iIndex)
        {
            tTotal += sM1.xMT.m_aRowCol[i0 / TEMPLATE__VECTOR_DIM][iIndex] * sM2.xMT.m_aRowCol[iIndex][i0 % TEMPLATE__VECTOR_DIM];
        };

    #if (TEMPLATE__VECTOR_ROW == 3 && TEMPLATE__VECTOR_DIM == 4)
        tTotal += 3 == (i0 % TEMPLATE__VECTOR_DIM) ? sM1.xMT.m_aRowCol[i0 / TEMPLATE__VECTOR_DIM][3] : TYPE_K(0);
    #endif

        Test__Expect_EQ(true, FCN_F(tgCM_NR0)( tTotal - sM0.xMT.m_aElement[i0] ));
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_INV_DET_N) ------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_INV_DET_N) )
{
    union
    {
        VEC_N_T(TEMPLATE__VECTOR_ROW)       xMN;
        VEC_T(TEMPLATE__VECTOR_ROW)         xMT;
    }                                   sM0, sM1;
    VEC_N_T(1)                          vDet;

    for (TgRSIZE ui0 = 0; ui0 < TEMPLATE__VECTOR_ROW * TEMPLATE__VECTOR_DIM; ++ui0)
    {
        while (0 == (sM0.xMT.m_aElement[ui0] = FCN_F(tgCM_RAND)()));
    };

    vDet = FCN_M(tgMH_DET_N)( &sM0.xMN );
    FCN_M(tgMH_INV_DET_N)( &sM1.xMN, vDet, &sM0.xMN );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_INV_N) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_INV_N) )
{
    union
    {
        VEC_N_T(TEMPLATE__VECTOR_ROW)       xMN;
        VEC_T(TEMPLATE__VECTOR_ROW)         xMT;
    }                                   sM0, sM1;
    VAR_T()                             fDet;

    do
    {
        for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_ROW; ++uiIndex)
        {
            sM0.xMN.m_avRow[uiIndex] = FCN_V(tgMH_RAND_N)();
        };
        
        fDet = FCN_M(tgMH_DET)( &sM0.xMT );
    }
    while (FCN_F(tgPM_NAN)( fDet ) || FCN_F(tgCM_NR0)( fDet ));

    FCN_M(tgMH_INV_N)( &sM1.xMN, &sM0.xMN );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_DET_N) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_DET_N) )
{
    union
    {
        VEC_N_T(TEMPLATE__VECTOR_ROW)       xMN;
        VEC_T(TEMPLATE__VECTOR_ROW)         xMT;
    }                                   sM0;
    VEC_N_T(1)                          vDet;

    for (TgRSIZE ui0 = 0; ui0 < TEMPLATE__VECTOR_ROW * TEMPLATE__VECTOR_DIM; ++ui0)
    {
        while (0 == (sM0.xMT.m_aElement[ui0] = FCN_F(tgCM_RAND)()));
    };

    vDet = FCN_M(tgMH_DET_N)( &sM0.xMN );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_TX_N) ------------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_TX_N) )
{
    union
    {
        VEC_N_T(TEMPLATE__VECTOR_ROW)       xMN;
        VEC_T(TEMPLATE__VECTOR_ROW)         xMT;
    }                                   sM0, sM1;
    VEC_N_T(1)                          vV1_V4;
    TgUN_V128                           vV0_V4;

    for (TgRSIZE ui0 = 0; ui0 < TEMPLATE__VECTOR_ROW * TEMPLATE__VECTOR_DIM; ++ui0)
    {
        while (0 == (sM0.xMT.m_aElement[ui0] = FCN_F(tgCM_RAND)()));
    };

    while (TYPE_K(0) == (VAR_UN_1_MEMBER(vV0_V4.m_).x = FCN_F(tgCM_RAND)()));
    while (TYPE_K(0) == (VAR_UN_1_MEMBER(vV0_V4.m_).y = FCN_F(tgCM_RAND)()));
    while (TYPE_K(0) == (VAR_UN_1_MEMBER(vV0_V4.m_).z = FCN_F(tgCM_RAND)()));
    VAR_UN_1_MEMBER(vV0_V4.m_).w = TYPE_K(0);

    vV1_V4 = FCN_M(tgMH_TX_N)( &sM1.xMN, VAR_UN_1_MEMBER(vV0_V4.m_N_) );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_TX_P_N) ---------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_TX_P_N) )
{
    union
    {
        VEC_N_T(TEMPLATE__VECTOR_ROW)       xMN;
        VEC_T(TEMPLATE__VECTOR_ROW)         xMT;
    }                                   sM0, sM1;
    VEC_N_T(1)                          vV1_V4;
    TgUN_V128                           vV0_V4;

    for (TgRSIZE ui0 = 0; ui0 < TEMPLATE__VECTOR_ROW * TEMPLATE__VECTOR_DIM; ++ui0)
    {
        while (0 == (sM0.xMT.m_aElement[ui0] = FCN_F(tgCM_RAND)()));
    };

    while (TYPE_K(0) == (VAR_UN_1_MEMBER(vV0_V4.m_).x = FCN_F(tgCM_RAND)()));
    while (TYPE_K(0) == (VAR_UN_1_MEMBER(vV0_V4.m_).y = FCN_F(tgCM_RAND)()));
    while (TYPE_K(0) == (VAR_UN_1_MEMBER(vV0_V4.m_).z = FCN_F(tgCM_RAND)()));
    VAR_UN_1_MEMBER(vV0_V4.m_).w = TYPE_K(0);

    vV1_V4 = FCN_M(tgMH_TX_P_N)( &sM1.xMN, VAR_UN_1_MEMBER(vV0_V4.m_N_) );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_TX_V_N) ---------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_TX_V_N) )
{
    union
    {
        VEC_N_T(TEMPLATE__VECTOR_ROW)       xMN;
        VEC_T(TEMPLATE__VECTOR_ROW)         xMT;
    }                                   sM0, sM1;
    VEC_N_T(1)                          vV1_V4;
    TgUN_V128                           vV0_V4;

    for (TgRSIZE ui0 = 0; ui0 < TEMPLATE__VECTOR_ROW * TEMPLATE__VECTOR_DIM; ++ui0)
    {
        while (0 == (sM0.xMT.m_aElement[ui0] = FCN_F(tgCM_RAND)()));
    };

    while (TYPE_K(0) == (VAR_UN_1_MEMBER(vV0_V4.m_).x = FCN_F(tgCM_RAND)()));
    while (TYPE_K(0) == (VAR_UN_1_MEMBER(vV0_V4.m_).y = FCN_F(tgCM_RAND)()));
    while (TYPE_K(0) == (VAR_UN_1_MEMBER(vV0_V4.m_).z = FCN_F(tgCM_RAND)()));
    VAR_UN_1_MEMBER(vV0_V4.m_).w = TYPE_K(0);

    vV1_V4 = FCN_M(tgMH_TX_V_N)( &sM1.xMN, VAR_UN_1_MEMBER(vV0_V4.m_N_) );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_Get_Col_0_N) ----------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_Get_Col_0_N) )
{
    union
    {
        VEC_N_T(TEMPLATE__VECTOR_ROW)       xMN;
        VEC_T(TEMPLATE__VECTOR_ROW)         xMT;
    }                                   sM0;
    TgUN_V128                           sV0;

    for (TgRSIZE ui0 = 0; ui0 < TEMPLATE__VECTOR_ROW * TEMPLATE__VECTOR_DIM; ++ui0)
    {
        while (0 == (sM0.xMT.m_aElement[ui0] = FCN_F(tgCM_RAND)()));
    };

    VAR_UN_1_MEMBER(sV0.m_N_) = FCN_M(tgMH_Get_Col_0_N)( &sM0.xMN );

    for (TgRSIZE iIndex = 0; iIndex < TEMPLATE__VECTOR_ROW; ++iIndex)
    {
        Test__Expect_EQ( true, FCN_F(tgCM_NR0)( VAR_UN_1_MEMBER(sV0.m_).m_aData[iIndex] - sM0.xMT.m_aRowCol[iIndex][0] ) );
    }
    for (TgRSIZE iIndex = TEMPLATE__VECTOR_ROW; iIndex < 4; ++iIndex)
    {
        Test__Expect_EQ( true, FCN_F(tgCM_NR0)( VAR_UN_1_MEMBER(sV0.m_).m_aData[iIndex] ) );
    }

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_Get_Col_1_N) ----------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_Get_Col_1_N) )
{
    union
    {
        VEC_N_T(TEMPLATE__VECTOR_ROW)       xMN;
        VEC_T(TEMPLATE__VECTOR_ROW)         xMT;
    }                                   sM0, sM1;
    TgUN_V128                           sV0;

    for (TgRSIZE ui0 = 0; ui0 < TEMPLATE__VECTOR_ROW * TEMPLATE__VECTOR_DIM; ++ui0)
    {
        while (0 == (sM0.xMT.m_aElement[ui0] = FCN_F(tgCM_RAND)()));
    };

    VAR_UN_1_MEMBER(sV0.m_N_) = FCN_M(tgMH_Get_Col_1_N)( &sM1.xMN );

    for (TgRSIZE iIndex = 0; iIndex < TEMPLATE__VECTOR_ROW; ++iIndex)
    {
        Test__Expect_EQ( true, FCN_F(tgCM_NR0)( VAR_UN_1_MEMBER(sV0.m_).m_aData[iIndex] - sM1.xMT.m_aRowCol[iIndex][1] ) );
    }
    for (TgRSIZE iIndex = TEMPLATE__VECTOR_ROW; iIndex < 4; ++iIndex)
    {
        Test__Expect_EQ( true, FCN_F(tgCM_NR0)( VAR_UN_1_MEMBER(sV0.m_).m_aData[iIndex]) );
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_Get_Col_2_N) ----------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_Get_Col_2_N) )
{
    union
    {
        VEC_N_T(TEMPLATE__VECTOR_ROW)       xMN;
        VEC_T(TEMPLATE__VECTOR_ROW)         xMT;
    }                                   sM0, sM1;
    TgUN_V128                           sV0;

    for (TgRSIZE ui0 = 0; ui0 < TEMPLATE__VECTOR_ROW * TEMPLATE__VECTOR_DIM; ++ui0)
    {
        while (0 == (sM0.xMT.m_aElement[ui0] = FCN_F(tgCM_RAND)()));
    };

    VAR_UN_1_MEMBER(sV0.m_N_) = FCN_M(tgMH_Get_Col_2_N)( &sM1.xMN );

    for (TgRSIZE iIndex = 0; iIndex < TEMPLATE__VECTOR_ROW; ++iIndex)
    {
        Test__Expect_EQ( true, FCN_F(tgCM_NR0)( VAR_UN_1_MEMBER(sV0.m_).m_aData[iIndex] - sM1.xMT.m_aRowCol[iIndex][2] ) );
    };
    for (TgRSIZE iIndex = TEMPLATE__VECTOR_ROW; iIndex < 4; ++iIndex)
    {
        Test__Expect_EQ( true, FCN_F(tgCM_NR0)( VAR_UN_1_MEMBER(sV0.m_).m_aData[iIndex]) );
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_Get_Col_3_N) ----------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_Get_Col_3_N) )
{
    union
    {
        VEC_N_T(TEMPLATE__VECTOR_ROW)       xMN;
        VEC_T(TEMPLATE__VECTOR_ROW)         xMT;
    }                                   sM0, sM1;
    TgUN_V128                           sV0;

    for (TgRSIZE ui0 = 0; ui0 < TEMPLATE__VECTOR_ROW * TEMPLATE__VECTOR_DIM; ++ui0)
    {
        while (0 == (sM0.xMT.m_aElement[ui0] = FCN_F(tgCM_RAND)()));
    };

    VAR_UN_1_MEMBER(sV0.m_N_) = FCN_M(tgMH_Get_Col_3_N)( &sM1.xMN );

#if (TEMPLATE__VECTOR_DIM > 3)
    for (TgRSIZE iIndex = 0; iIndex < TEMPLATE__VECTOR_ROW; ++iIndex)
    {
        Test__Expect_EQ( true, FCN_F(tgCM_NR0)( VAR_UN_1_MEMBER(sV0.m_).m_aData[iIndex] - sM1.xMT.m_aRowCol[iIndex][3] ) );
    };
    for (TgRSIZE iIndex = TEMPLATE__VECTOR_ROW; iIndex < 4; ++iIndex)
    {
        Test__Expect_EQ( true, FCN_F(tgCM_NR1)( VAR_UN_1_MEMBER(sV0.m_).m_aData[iIndex] ) );
    };
#else
    Test__Expect_EQ(true, FCN_F(tgCM_NR0)( VAR_UN_1_MEMBER(sV0.m_).m_aData[0] ));
    Test__Expect_EQ(true, FCN_F(tgCM_NR0)( VAR_UN_1_MEMBER(sV0.m_).m_aData[1] ));
    Test__Expect_EQ(true, FCN_F(tgCM_NR0)( VAR_UN_1_MEMBER(sV0.m_).m_aData[2] ));
    Test__Expect_EQ(true, FCN_F(tgCM_NR1)( VAR_UN_1_MEMBER(sV0.m_).m_aData[3] ));
#endif

    TEST_END_METHOD( KTgS_OK );
}
