/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common [Unit Test] [Test] - Math [Vector] [N] [F].c_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Common ===================================================================================================================================================================== */

/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*  Test Functions                                                                                                                                                                 */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

/* ---- FCN_V_UT(tgMH_ADD_N) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_ADD_N) )
{
    union
    {
        VEC_N_T(1)                          vN;
        VEC_T(1)                            vT;
    }                                   sV0, sV1, sV2;

    sV0.vN = FCN_V(tgMH_RAND_N)();
    sV1.vN = FCN_V(tgMH_RAND_N)();

    sV2.vN = FCN_V(tgMH_ADD_N)( sV0.vN, sV1.vN );

    for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        Test__Expect_NE(false, FCN_F(tgCM_NR0)( sV0.vT.m_aData[uiIndex] + sV1.vT.m_aData[uiIndex] - sV2.vT.m_aData[uiIndex]));
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_MAD_N) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_MAD_N) )
{
    union
    {
        VEC_N_T(1)                          vN;
        VEC_T(1)                            vT;
    }                                   sV0, sV1, sV2, sV3;

    sV0.vN = FCN_V(tgMH_RAND_N)();
    sV1.vN = FCN_V(tgMH_RAND_N)();
    sV2.vN = FCN_V(tgMH_RAND_N)();

    sV3.vN = FCN_V(tgMH_MAD_N)( sV0.vN, sV1.vN, sV2.vN );

    for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        Test__Expect_NE(false, FCN_F(tgCM_NR0)( sV0.vT.m_aData[uiIndex] * sV1.vT.m_aData[uiIndex] + sV2.vT.m_aData[uiIndex] - sV3.vT.m_aData[uiIndex]));
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_NMS_N) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_NMS_N) )
{
    union
    {
        VEC_N_T(1)                          vN;
        VEC_T(1)                            vT;
    }                                   sV0, sV1, sV2, sV3;

    sV0.vN = FCN_V(tgMH_RAND_N)();
    sV1.vN = FCN_V(tgMH_RAND_N)();
    sV2.vN = FCN_V(tgMH_RAND_N)();

    sV3.vN = FCN_V(tgMH_NMS_N)( sV0.vN, sV1.vN, sV2.vN );

    for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        VAR_T()                             fCheck;

        fCheck = -(sV0.vT.m_aData[uiIndex] * sV1.vT.m_aData[uiIndex] - sV2.vT.m_aData[uiIndex]);
        Test__Expect_NE(false, FCN_F(tgCM_NR0)( fCheck - sV3.vT.m_aData[uiIndex] ));
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_DOT_N) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_DOT_N) )
{
    union
    {
        VEC_N_T(1)                          vN;
        VEC_T(1)                            vT;
    }                                   sV0, sV1, sV2;
    VAR_T()                             fTest;

    sV0.vN = FCN_V(tgMH_RAND_N)();
    sV1.vN = FCN_V(tgMH_RAND_N)();

    sV2.vN = FCN_V(tgMH_DOT_N)( sV0.vN, sV1.vN );
    fTest = FCN_V(tgMH_DOT)( &sV0.vT, &sV1.vT );

    Test__Expect_EQ(true, FCN_F(tgCM_NR0)( fTest - sV2.vT.x ));

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_MUL_N) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_MUL_N) )
{
    union
    {
        VEC_N_T(1)                          vN;
        VEC_T(1)                            vT;
    }                                   sV0, sV1, sV2;

    sV0.vN = FCN_V(tgMH_RAND_N)();
    sV1.vN = FCN_V(tgMH_RAND_N)();

    sV2.vN = FCN_V(tgMH_MUL_N)( sV0.vN, sV1.vN );

    for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        Test__Expect_NE(false, FCN_F(tgCM_NR0)( sV0.vT.m_aData[uiIndex] * sV1.vT.m_aData[uiIndex] - sV2.vT.m_aData[uiIndex]));
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_DIV_N) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_DIV_N) )
{
    union
    {
        VEC_N_T(1)                          vN;
        VEC_T(1)                            vT;
    }                                   sV0, sV1, sV2;

    sV0.vN = FCN_V(tgMH_RAND_N)();
    sV1.vN = FCN_V(tgMH_RAND_N)();

    sV2.vN = FCN_V(tgMH_DIV_N)( sV0.vN, sV1.vN );

    for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        Test__Expect_NE(false, FCN_F(tgCM_NR0)( sV0.vT.m_aData[uiIndex] / sV1.vT.m_aData[uiIndex] - sV2.vT.m_aData[uiIndex]));
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_SUB_N) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_SUB_N) )
{
    union
    {
        VEC_N_T(1)                          vN;
        VEC_T(1)                            vT;
    }                                   sV0, sV1, sV2;

    sV0.vN = FCN_V(tgMH_RAND_N)();
    sV1.vN = FCN_V(tgMH_RAND_N)();

    sV2.vN = FCN_V(tgMH_SUB_N)( sV0.vN, sV1.vN );

    for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        Test__Expect_NE(false, FCN_F(tgCM_NR0)( sV0.vT.m_aData[uiIndex] - sV1.vT.m_aData[uiIndex] - sV2.vT.m_aData[uiIndex]));
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_LSQ_N) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_LSQ_N) )
{
    union
    {
        VEC_N_T(1)                          vN;
        VEC_T(1)                            vT;
    }                                   sV0, sV1;
    VAR_T()                             fTest;

    sV0.vN = FCN_V(tgMH_RAND_N)();

    sV1.vN = FCN_V(tgMH_LSQ_N)( sV0.vN );
    fTest = FCN_V(tgMH_LSQ)( &sV0.vT );

    Test__Expect_EQ(true, FCN_F(tgCM_NR0)( fTest - sV1.vT.x ));

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_LEN_N) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_LEN_N) )
{
    union
    {
        VEC_N_T(1)                          vN;
        VEC_T(1)                            vT;
    }                                   sV0, sV1;
    VAR_T()                             fTest;

    sV0.vN = FCN_V(tgMH_RAND_N)();

    sV1.vN = FCN_V(tgMH_LEN_N)( sV0.vN );
    fTest = FCN_V(tgMH_LEN)( &sV0.vT );

    Test__Expect_EQ(true, FCN_F(tgCM_NR0)( fTest - sV1.vT.x ));

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_NEG_N) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_NEG_N) )
{
    union
    {
        VEC_N_T(1)                          vN;
        VEC_T(1)                            vT;
    }                                   sV0, sV1;

    sV0.vN = FCN_V(tgMH_RAND_N)();

    sV1.vN = FCN_V(tgMH_NEG_N)( sV0.vN );

    for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        Test__Expect_EQ(true, FCN_F(tgCM_NR0)( sV1.vT.m_aData[uiIndex] + sV0.vT.m_aData[uiIndex]));
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_SQRT_N) ---------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_SQRT_N) )
{
    union
    {
        VEC_N_T(1)                          vN;
        VEC_T(1)                            vT;
    }                                   sV0, sV1, sV2;

    sV0.vN = FCN_V(tgMH_ABS_N)( FCN_V(tgMH_RAND_N)() );

    sV1.vN = FCN_V(tgMH_SQRT_N)( sV0.vN );
    sV2.vT = FCN_V(tgMH_SQRT)( &sV0.vT );

    for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        Test__Expect_NE(false, FCN_F(tgCM_NR0)( sV1.vT.m_aData[uiIndex] - sV2.vT.m_aData[uiIndex] ));
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_RSQRT_N) --------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_RSQRT_N) )
{
    union
    {
        VEC_N_T(1)                          vN;
        VEC_T(1)                            vT;
    }                                   sV0, sV1, sV2;

    sV0.vN = FCN_V(tgMH_ABS_N)( FCN_V(tgMH_RAND_N)() );

    sV1.vN = FCN_V(tgMH_RSQRT_N)( sV0.vN );
    sV2.vT = FCN_V(tgMH_RSQRT)( &sV0.vT );

    for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        Test__Expect_NE(false, FCN_F(tgCM_NR0)( sV1.vT.m_aData[uiIndex] - sV2.vT.m_aData[uiIndex] ));
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_NORM_LEN_N) ------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_NORM_LEN_N) )
{
    union
    {
        VEC_N_T(1)                          vN;
        VEC_T(1)                            vT;
    }                                   sV0, sV1, sV2, sV3;
    VAR_T()                             fTest;

    sV0.vN = FCN_V(tgMH_RAND_N)();

    sV1.vN = FCN_V(tgMH_NORM_LEN_N)( &sV2.vN, sV0.vN );
    sV3.vT = FCN_V(tgMH_NORM_LEN)( &fTest, &sV0.vT );

    Test__Expect_EQ(true, FCN_F(tgCM_NR0)( sV2.vT.x - fTest ) );
    Test__Expect_EQ(true, FCN_V(tgMH_PRX4)( &sV1.vT, &sV3.vT ) );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_NORM_N) ---------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_NORM_N) )
{
    union
    {
        VEC_N_T(1)                          vN;
        VEC_T(1)                            vT;
    }                                   sV0, sV1, sV2;

    sV0.vN = FCN_V(tgMH_RAND_N)();

    sV1.vN = FCN_V(tgMH_NORM_N)( sV0.vN );
    sV2.vT = FCN_V(tgMH_NORM)( &sV0.vT );

    Test__Expect_EQ(true, FCN_V(tgMH_PRX4)( &sV1.vT, &sV2.vT ) );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_FLR_N) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_FLR_N) )
{
    union
    {
        VEC_N_T(1)                          vN;
        VEC_T(1)                            vT;
    }                                   sV0, sV1;

    sV0.vN = FCN_V(tgMH_RAND_N)();

    sV1.vN = FCN_V(tgMH_FLR_N)( sV0.vN );

    for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        Test__Expect_NE(false, FCN_F(tgCM_NR0) (FCN_F(tgPM_FLOOR)( sV0.vT.m_aData[uiIndex] ) - sV1.vT.m_aData[uiIndex] ));
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_CEL_N) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_CEL_N) )
{
    union
    {
        VEC_N_T(1)                          vN;
        VEC_T(1)                            vT;
    }                                   sV0, sV1;

    sV0.vN = FCN_V(tgMH_RAND_N)();

    sV1.vN = FCN_V(tgMH_CEL_N)( sV0.vN );

    for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        Test__Expect_NE(false, FCN_F(tgCM_NR0) (FCN_F(tgPM_CEIL)( sV0.vT.m_aData[uiIndex] ) - sV1.vT.m_aData[uiIndex] ));
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_CLP_N) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_CLP_N) )
{
    union
    {
        VEC_N_T(1)                          vN;
        VEC_T(1)                            vT;
    }                                   sV0, sV1, sV2, sV3;

    sV0.vN = FCN_V(tgMH_SET1_N)(0);
    sV1.vN = FCN_V(tgMH_SET1_N)(1);
    sV2.vN = FCN_V(tgMH_SET1_N)(2);

    for (TgRSIZE ui0 = 0; ui0 < TEMPLATE__VECTOR_DIM; ++ui0)
    {
        while (          TYPE_K(0) == (sV0.vT.m_aData[ui0] = FCN_F(tgCM_RAND)()));
        while (sV0.vT.m_aData[ui0] >= (sV1.vT.m_aData[ui0] = FCN_F(tgCM_RAND)()));
        while (sV1.vT.m_aData[ui0] >= (sV2.vT.m_aData[ui0] = FCN_F(tgCM_RAND)()));
    };

    sV3.vN = FCN_V(tgMH_CLP_N)( sV1.vN, sV0.vN, sV2.vN );
    for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        VAR_T(C)                            tMin = FCN_F(tgCM_MIN)( sV0.vT.m_aData[uiIndex], sV2.vT.m_aData[uiIndex] );
        VAR_T(C)                            tMax = FCN_F(tgCM_MAX)( sV1.vT.m_aData[uiIndex], tMin );

        Test__Expect_NE(false, FCN_F(tgCM_NR0)( tMax - sV3.vT.m_aData[uiIndex] ));
    };

    sV3.vN = FCN_V(tgMH_CLP_N)( sV0.vN, sV1.vN, sV2.vN );
    for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        VAR_T(C)                            tMin = FCN_F(tgCM_MIN)( sV0.vT.m_aData[uiIndex], sV2.vT.m_aData[uiIndex] );
        VAR_T(C)                            tMax = FCN_F(tgCM_MAX)( sV1.vT.m_aData[uiIndex], tMin);

        Test__Expect_NE(false, FCN_F(tgCM_NR0)( tMax - sV3.vT.m_aData[uiIndex] ));
    };

    sV3.vN = FCN_V(tgMH_CLP_N)( sV2.vN, sV0.vN, sV1.vN );
    for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        VAR_T(C)                            tMin = FCN_F(tgCM_MIN)( sV0.vT.m_aData[uiIndex], sV2.vT.m_aData[uiIndex] );
        VAR_T(C)                            tMax = FCN_F(tgCM_MAX)( sV1.vT.m_aData[uiIndex], tMin);

        Test__Expect_NE(false, FCN_F(tgCM_NR0)( tMax - sV3.vT.m_aData[uiIndex] ));
    };


    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_SAT_N) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_SAT_N) )
{
    union
    {
        VEC_N_T(1)                          vN;
        VEC_T(1)                            vT;
    }                                   sV0, sV1;

    sV0.vN = FCN_V(tgMH_RAND_N)();

    sV1.vN = FCN_V(tgMH_SAT_N)( sV0.vN );

    for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        VAR_T(C)                            tMin = FCN_F(tgCM_MIN)( sV0.vT.m_aData[uiIndex], TYPE_K(1) );
        VAR_T(C)                            tMax = FCN_F(tgCM_MAX)( TYPE_K(0), tMin );

        Test__Expect_NE(false, FCN_F(tgCM_NR0)( tMax - sV1.vT.m_aData[uiIndex] ));
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_NaN_N) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_NaN_N) )
{
    union
    {
        VEC_N_T(1)                          vN;
        VEC_T(1)                            vT;
    }                                   sV0, sV1, sV3, sV4;
    VAR_T()                             tInvalid, tZero;

    sV0.vN = FCN_V(tgMH_RAND_N)();
    sV1.vN = FCN_V(tgMH_RAND_N)();

    tgMM_Set_U08_0xFF( &tInvalid, sizeof( VAR_T() ) );
    tgMM_Set_U08_0x00( &tZero, sizeof( VAR_T() ) );

    for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        TgRSIZE                             uiIndex2;

        sV3.vN = sV1.vN;
        sV4.vN = FCN_V(tgMH_NaN_N)( sV3.vN );
        uiIndex2 = 0;
        for (; uiIndex2 < TEMPLATE__VECTOR_DIM; ++uiIndex2)
        {
            Test__Expect_EQ(0, memcmp( &tZero, sV4.vT.m_aData + uiIndex2, sizeof( VAR_T() ) ));
        };

        sV3.vT.m_aData[uiIndex] = tInvalid;
        sV4.vN = FCN_V(tgMH_NaN_N)( sV3.vN );
        uiIndex2 = 0;
        for (; uiIndex2 < uiIndex && uiIndex2 < TEMPLATE__VECTOR_DIM; ++uiIndex2)
        {
            Test__Expect_EQ(0, memcmp( &tZero, sV4.vT.m_aData + uiIndex2, sizeof( VAR_T() ) ));
        };
        for (; uiIndex2 < (uiIndex + 1) && uiIndex2 < TEMPLATE__VECTOR_DIM; ++uiIndex2)
        {
            Test__Expect_EQ(0, memcmp( &tInvalid, sV4.vT.m_aData + uiIndex2, sizeof( VAR_T() ) ));
        };
        for (; uiIndex2 < TEMPLATE__VECTOR_DIM; ++uiIndex2)
        {
            Test__Expect_EQ(0, memcmp( &tZero, sV4.vT.m_aData + uiIndex2, sizeof( VAR_T() ) ));
        };
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_BND_N) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_BND_N) )
{
    union
    {
        VEC_N_T(1)                          vN;
        VEC_T(1)                            vT;
    }                                   sV0, sV1, sV2;
    VAR_T()                             tTrue, tFalse;
    TgBOOL                              bBnd_Test = true;

    sV0.vN = FCN_V(tgMH_RAND_N)();
    sV1.vN = FCN_V(tgMH_ABS_N)( FCN_V(tgMH_RAND_N)() );

    sV2.vN = FCN_V(tgMH_BND_N)( sV0.vN, sV1.vN );

    tgMM_Set_U08_0xFF( &tTrue, sizeof( VAR_T() ) );
    tgMM_Set_U08_0x00( &tFalse, sizeof( VAR_T() ) );

    for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM && bBnd_Test; ++uiIndex)
    {
        if ((sV0.vT.m_aData[uiIndex] < -sV1.vT.m_aData[uiIndex]) || (sV0.vT.m_aData[uiIndex] > sV1.vT.m_aData[uiIndex]))
        {
            Test__Expect_EQ(0, memcmp( &tFalse, sV2.vT.m_aData + uiIndex, sizeof( VAR_T() ) ));
        }
        else
        {
            Test__Expect_EQ(0, memcmp( &tTrue, sV2.vT.m_aData + uiIndex, sizeof( VAR_T() ) ));
        };
    };

    TEST_END_METHOD( KTgS_OK );
}
