/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common [Unit Test] [Test] - Math [Matrix] [F] [44].c_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Common ===================================================================================================================================================================== */

/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*  Test Functions                                                                                                                                                                 */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

/* ---- FCN_M_UT(tgMH_ADD) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_ADD) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0, xM1, xM2;

    for (TgRSIZE ui0 = 0; ui0 < TEMPLATE__VECTOR_ROW*TEMPLATE__VECTOR_DIM; ++ui0)
    {
        while (0 == (xM0.m_aElement[ui0] = FCN_F(tgCM_RAND)()));
        while (0 == (xM1.m_aElement[ui0] = FCN_F(tgCM_RAND)()));
    };

    FCN_M(tgMH_ADD)( &xM2, &xM0, &xM1 );

    for (TgRSIZE uiRow = 0; uiRow < TEMPLATE__VECTOR_ROW; ++uiRow)
    {
        for (TgRSIZE uiCol = 0; uiCol < TEMPLATE__VECTOR_DIM; ++uiCol)
        {
            Test__Expect_EQ( xM2.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol],
                             xM0.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol] + xM1.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol] );
        };
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_MUL) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_MUL) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0, xM1, xM2;

    for (TgRSIZE ui0 = 0; ui0 < TEMPLATE__VECTOR_ROW*TEMPLATE__VECTOR_DIM; ++ui0)
    {
        while (0 == (xM0.m_aElement[ui0] = FCN_F(tgCM_RAND)()));
        while (0 == (xM1.m_aElement[ui0] = FCN_F(tgCM_RAND)()));
    };

    FCN_M(tgMH_MUL)( &xM2, &xM0, &xM1 );

    for (TgRSIZE uiRow = 0; uiRow < TEMPLATE__VECTOR_ROW; ++uiRow)
    {
        for (TgRSIZE uiCol = 0; uiCol < TEMPLATE__VECTOR_DIM; ++uiCol)
        {
            Test__Expect_EQ( xM2.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol],
                             xM0.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol] * xM1.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol] );
        };
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_MUL_SM) ---------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_MUL_SM) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0, xM1, xM2;

    for (TgRSIZE ui0 = 0; ui0 < TEMPLATE__VECTOR_ROW*TEMPLATE__VECTOR_DIM; ++ui0)
    {
        while (0 == (xM0.m_aElement[ui0] = FCN_F(tgCM_RAND)()));
        while (0 == (xM1.m_aElement[ui0] = FCN_F(tgCM_RAND)()));
    };

    FCN_M(tgMH_MUL_SM)( &xM2, TYPE_K(2,0), &xM1 );

    for (TgRSIZE uiRow = 0; uiRow < TEMPLATE__VECTOR_ROW; ++uiRow)
    {
        for (TgRSIZE uiCol = 0; uiCol < TEMPLATE__VECTOR_DIM; ++uiCol)
        {
            Test__Expect_EQ( xM2.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol], TYPE_K(2,0) * xM1.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol] );
        };
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_MUL_MS) ---------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_MUL_MS) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0, xM1, xM2;

    for (TgRSIZE ui0 = 0; ui0 < TEMPLATE__VECTOR_ROW*TEMPLATE__VECTOR_DIM; ++ui0)
    {
        while (0 == (xM0.m_aElement[ui0] = FCN_F(tgCM_RAND)()));
        while (0 == (xM1.m_aElement[ui0] = FCN_F(tgCM_RAND)()));
    };

    FCN_M(tgMH_MUL_MS)( &xM2, &xM0, TYPE_K(3,0) );

    for (TgRSIZE uiRow = 0; uiRow < TEMPLATE__VECTOR_ROW; ++uiRow)
    {
        for (TgRSIZE uiCol = 0; uiCol < TEMPLATE__VECTOR_DIM; ++uiCol)
        {
            Test__Expect_EQ( xM2.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol], xM0.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol] * TYPE_K(3,0) );
        };
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_DIV) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_DIV) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0, xM1, xM2;

    for (TgRSIZE ui0 = 0; ui0 < TEMPLATE__VECTOR_ROW*TEMPLATE__VECTOR_DIM; ++ui0)
    {
        while (0 == (xM0.m_aElement[ui0] = FCN_F(tgCM_RAND)()));
        while (0 == (xM1.m_aElement[ui0] = FCN_F(tgCM_RAND)()));
    };

    FCN_M(tgMH_DIV)( &xM2, &xM0, &xM1 );

    for (TgRSIZE uiRow = 0; uiRow < TEMPLATE__VECTOR_ROW; ++uiRow)
    {
        for (TgRSIZE uiCol = 0; uiCol < TEMPLATE__VECTOR_DIM; ++uiCol)
        {
            Test__Expect_EQ( xM2.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol], xM0.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol] / xM1.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol] );
        };
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_DIV_SM) ---------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_DIV_SM) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0, xM1, xM2;

    for (TgRSIZE ui0 = 0; ui0 < TEMPLATE__VECTOR_ROW*TEMPLATE__VECTOR_DIM; ++ui0)
    {
        while (0 == (xM0.m_aElement[ui0] = FCN_F(tgCM_RAND)()));
        while (0 == (xM1.m_aElement[ui0] = FCN_F(tgCM_RAND)()));
    };

    FCN_M(tgMH_DIV_SM)( &xM2, TYPE_K(2,0), &xM1 );

    for (TgRSIZE uiRow = 0; uiRow < TEMPLATE__VECTOR_ROW; ++uiRow)
    {
        for (TgRSIZE uiCol = 0; uiCol < TEMPLATE__VECTOR_DIM; ++uiCol)
        {
            Test__Expect_EQ( xM2.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol], TYPE_K(2,0) / xM1.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol] );
        };
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_DIV_MS) ---------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_DIV_MS) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0, xM1, xM2;

    for (TgRSIZE ui0 = 0; ui0 < TEMPLATE__VECTOR_ROW*TEMPLATE__VECTOR_DIM; ++ui0)
    {
        while (0 == (xM0.m_aElement[ui0] = FCN_F(tgCM_RAND)()));
        while (0 == (xM1.m_aElement[ui0] = FCN_F(tgCM_RAND)()));
    };

    FCN_M(tgMH_DIV_MS)( &xM2, &xM0, TYPE_K(3,0) );

    for (TgRSIZE uiRow = 0; uiRow < TEMPLATE__VECTOR_ROW; ++uiRow)
    {
        for (TgRSIZE uiCol = 0; uiCol < TEMPLATE__VECTOR_DIM; ++uiCol)
        {
            Test__Expect_EQ(true, FCN_F(tgCM_NR0)( xM2.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol] - xM0.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol] / TYPE_K(3,0) ));
        };
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_SUB) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_SUB) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0, xM1, xM2;

    for (TgRSIZE ui0 = 0; ui0 < TEMPLATE__VECTOR_ROW*TEMPLATE__VECTOR_DIM; ++ui0)
    {
        while (0 == (xM0.m_aElement[ui0] = FCN_F(tgCM_RAND)()));
        while (0 == (xM1.m_aElement[ui0] = FCN_F(tgCM_RAND)()));
    };

    FCN_M(tgMH_SUB)( &xM2, &xM0, &xM1 );

    for (TgRSIZE uiRow = 0; uiRow < TEMPLATE__VECTOR_ROW; ++uiRow)
    {
        for (TgRSIZE uiCol = 0; uiCol < TEMPLATE__VECTOR_DIM; ++uiCol)
        {
            Test__Expect_EQ( xM2.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol],
                             xM0.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol] - xM1.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol] );
        };
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_NEG) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_NEG) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0, xM1, xM2;

    for (TgRSIZE ui0 = 0; ui0 < TEMPLATE__VECTOR_ROW*TEMPLATE__VECTOR_DIM; ++ui0)
    {
        while (0 == (xM0.m_aElement[ui0] = FCN_F(tgCM_RAND)()));
        while (0 == (xM1.m_aElement[ui0] = FCN_F(tgCM_RAND)()));
    };

    FCN_M(tgMH_NEG)( &xM2, &xM0 );

    for (TgRSIZE uiRow = 0; uiRow < TEMPLATE__VECTOR_ROW; ++uiRow)
    {
        for (TgRSIZE uiCol = 0; uiCol < TEMPLATE__VECTOR_DIM; ++uiCol)
        {
            Test__Expect_EQ( xM2.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol], -xM0.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol] );
        };
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_Set_Euler) ------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_Set_Euler) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;
    TgSINT_F32                          uiRow, uiCol;
    VEC_T(1)                            v4_0;

    FCN_M(tgMH_CLI)( &xM0 );

    for (uiRow = 0; uiRow < TEMPLATE__VECTOR_ROW; ++uiRow)
    {
        for (uiCol = 0; uiCol < TEMPLATE__VECTOR_DIM; ++uiCol)
        {
            Test__Expect_EQ( uiRow ==uiCol ? TYPE_K(1) : TYPE_K(0), xM0.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol] );
        };
    };

    v4_0.x = TYPE_K(0,1) * VAR_K(KTgPI);
    v4_0.y = TYPE_K(0,2) * VAR_K(KTgPI);
    v4_0.z = TYPE_K(0,3) * VAR_K(KTgPI);
    v4_0.w = TYPE_K(0);

    FCN_M(tgMH_Set_Euler)( &xM0, &v4_0 );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_Set_Euler_S) ----------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_Set_Euler_S) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;
    TgSINT_F32                          uiRow, uiCol;
    VEC_T(1)                            v4_0;

    FCN_M(tgMH_CLI)( &xM0 );

    for (uiRow = 0; uiRow < TEMPLATE__VECTOR_ROW; ++uiRow)
    {
        for (uiCol = 0; uiCol < TEMPLATE__VECTOR_DIM; ++uiCol)
        {
            Test__Expect_EQ( uiRow ==uiCol ? TYPE_K(1) : TYPE_K(0), xM0.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol] );
        };
    };

    v4_0.x = TYPE_K(0,1) * VAR_K(KTgPI);
    v4_0.y = TYPE_K(0,2) * VAR_K(KTgPI);
    v4_0.z = TYPE_K(0,3) * VAR_K(KTgPI);
    v4_0.w = TYPE_K(0);

    FCN_M(tgMH_Set_Euler_S)( &xM0, v4_0.x, v4_0.y, v4_0.z );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_Set_EulerX) ------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_Set_EulerX) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;
    TgSINT_F32                          uiRow, uiCol;
    VEC_T(1)                            v4_0;

    FCN_M(tgMH_CLI)( &xM0 );

    for (uiRow = 0; uiRow < TEMPLATE__VECTOR_ROW; ++uiRow)
    {
        for (uiCol = 0; uiCol < TEMPLATE__VECTOR_DIM; ++uiCol)
        {
            Test__Expect_EQ( uiRow ==uiCol ? TYPE_K(1) : TYPE_K(0), xM0.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol] );
        };
    };

    v4_0.x = TYPE_K(0,1) * VAR_K(KTgPI);
    v4_0.y = TYPE_K(0,2) * VAR_K(KTgPI);
    v4_0.z = TYPE_K(0,3) * VAR_K(KTgPI);
    v4_0.w = TYPE_K(0);

    FCN_M(tgMH_Set_EulerX)( &xM0, v4_0.x );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_Set_EulerY) ------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_Set_EulerY) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;
    TgSINT_F32                          uiRow, uiCol;
    VEC_T(1)                            v4_0;

    FCN_M(tgMH_CLI)( &xM0 );

    for (uiRow = 0; uiRow < TEMPLATE__VECTOR_ROW; ++uiRow)
    {
        for (uiCol = 0; uiCol < TEMPLATE__VECTOR_DIM; ++uiCol)
        {
            Test__Expect_EQ( uiRow ==uiCol ? TYPE_K(1) : TYPE_K(0), xM0.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol] );
        };
    };

    v4_0.x = TYPE_K(0,1) * VAR_K(KTgPI);
    v4_0.y = TYPE_K(0,2) * VAR_K(KTgPI);
    v4_0.z = TYPE_K(0,3) * VAR_K(KTgPI);
    v4_0.w = TYPE_K(0);

    FCN_M(tgMH_Set_EulerY)( &xM0, v4_0.y );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_Set_EulerZ) ------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_Set_EulerZ) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;
    TgSINT_F32                          uiRow, uiCol;
    VEC_T(1)                            v4_0;

    FCN_M(tgMH_CLI)( &xM0 );

    for (uiRow = 0; uiRow < TEMPLATE__VECTOR_ROW; ++uiRow)
    {
        for (uiCol = 0; uiCol < TEMPLATE__VECTOR_DIM; ++uiCol)
        {
            Test__Expect_EQ( uiRow ==uiCol ? TYPE_K(1) : TYPE_K(0), xM0.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol] );
        };
    };

    v4_0.x = TYPE_K(0,1) * VAR_K(KTgPI);
    v4_0.y = TYPE_K(0,2) * VAR_K(KTgPI);
    v4_0.z = TYPE_K(0,3) * VAR_K(KTgPI);
    v4_0.w = TYPE_K(0);

    FCN_M(tgMH_Set_EulerZ)( &xM0, v4_0.z );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_Set_Quat) -------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_Set_Quat) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;
    TgSINT_F32                          uiRow, uiCol;
    VEC_T(1)                            v4_0;

    FCN_M(tgMH_CLI)( &xM0 );

    for (uiRow = 0; uiRow < TEMPLATE__VECTOR_ROW; ++uiRow)
    {
        for (uiCol = 0; uiCol < TEMPLATE__VECTOR_DIM; ++uiCol)
        {
            Test__Expect_EQ( uiRow ==uiCol ? TYPE_K(1) : TYPE_K(0), xM0.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol] );
        };
    };

    v4_0.x = TYPE_K(0,1) * VAR_K(KTgPI);
    v4_0.y = TYPE_K(0,2) * VAR_K(KTgPI);
    v4_0.z = TYPE_K(0,3) * VAR_K(KTgPI);
    v4_0.w = TYPE_K(0);

    FCN_M(tgMH_Set_Quat)( &xM0, &v4_0 );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_NaN) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_NaN) )
{
    VAR_T()                             tInvalid = 0;
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0, xM1;
    TgSINT_F32                          iIndex;

    tgMM_Set_U08_0xFF( &tInvalid, sizeof( VAR_T() ) );
    FCN_M(tgMH_CLI)( &xM1 );
    for (iIndex = 0; iIndex < TEMPLATE__VECTOR_ROW * TEMPLATE__VECTOR_DIM; ++iIndex)
    {
        xM0 = xM1;
        Test__Expect_EQ(false, FCN_M(tgMH_NaN)( &xM0 ));
        xM0.m_aElement[iIndex] = tInvalid;
        Test__Expect_NE(false, FCN_M(tgMH_NaN)( &xM0 ));
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_CLI) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_CLI) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;

    FCN_M(tgMH_CLI)( &xM0 );

    for (TgRSIZE uiRow = 0; uiRow < TEMPLATE__VECTOR_ROW; ++uiRow)
    {
        for (TgRSIZE uiCol = 0; uiCol < TEMPLATE__VECTOR_DIM; ++uiCol)
        {
            Test__Expect_EQ( uiRow ==uiCol ? TYPE_K(1) : TYPE_K(0), xM0.m_aElement[uiRow*TEMPLATE__VECTOR_DIM + uiCol] );
        };
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_SET_ROT) --------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_SET_ROT) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0, xM1;

    FCN_M(tgMH_SET_ROT)( &xM0, &xM1 );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_SET_T) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_SET_T) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;
    VEC_T(1)                            v4_0;

    v4_0.x = TYPE_K(0,1) * VAR_K(KTgPI);
    v4_0.y = TYPE_K(0,2) * VAR_K(KTgPI);
    v4_0.z = TYPE_K(0,3) * VAR_K(KTgPI);
    v4_0.w = TYPE_K(0);

    FCN_M(tgMH_SET_T)( &xM0, &v4_0 );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_SET_S_T) --------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_SET_S_T) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;
    VEC_T(1)                            v4_0;

    v4_0.x = TYPE_K(0,1) * VAR_K(KTgPI);
    v4_0.y = TYPE_K(0,2) * VAR_K(KTgPI);
    v4_0.z = TYPE_K(0,3) * VAR_K(KTgPI);
    v4_0.w = TYPE_K(0);

    FCN_M(tgMH_SET_S_T)( &xM0, v4_0.x, v4_0.y, v4_0.z );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_INIT_ROT) -------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_INIT_ROT) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0, xM1;

    FCN_M(tgMH_INIT_ROT)( &xM0, &xM1 );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_INIT_T) ---------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_INIT_T) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;
    VEC_T(1)                            v4_0;

    v4_0.x = TYPE_K(0,1) * VAR_K(KTgPI);
    v4_0.y = TYPE_K(0,2) * VAR_K(KTgPI);
    v4_0.z = TYPE_K(0,3) * VAR_K(KTgPI);
    v4_0.w = TYPE_K(0);

    FCN_M(tgMH_INIT_T)( &xM0, &v4_0 );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_INIT_T_S) ------------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_INIT_T_S) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;
    VEC_T(1)                            v4_0;

    v4_0.x = TYPE_K(0,1) * VAR_K(KTgPI);
    v4_0.y = TYPE_K(0,2) * VAR_K(KTgPI);
    v4_0.z = TYPE_K(0,3) * VAR_K(KTgPI);
    v4_0.w = TYPE_K(0);

    FCN_M(tgMH_INIT_T_S)( &xM0, v4_0.x, v4_0.y, v4_0.z );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_Init_Euler) ------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_Init_Euler) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;
    VEC_T(1)                            v4_0;

    v4_0.x = TYPE_K(0,1) * VAR_K(KTgPI);
    v4_0.y = TYPE_K(0,2) * VAR_K(KTgPI);
    v4_0.z = TYPE_K(0,3) * VAR_K(KTgPI);
    v4_0.w = TYPE_K(0);

    FCN_M(tgMH_Init_Euler)( &xM0, &v4_0 );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_Init_Euler_S) -------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_Init_Euler_S) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;
    VEC_T(1)                            v4_0;

    v4_0.x = TYPE_K(0,1) * VAR_K(KTgPI);
    v4_0.y = TYPE_K(0,2) * VAR_K(KTgPI);
    v4_0.z = TYPE_K(0,3) * VAR_K(KTgPI);
    v4_0.w = TYPE_K(0);

    FCN_M(tgMH_Init_Euler_S)( &xM0, v4_0.x, v4_0.y, v4_0.z );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_Init_EulerX) ------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_Init_EulerX) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;
    VEC_T(1)                            v4_0;

    v4_0.x = TYPE_K(0,1) * VAR_K(KTgPI);
    v4_0.y = TYPE_K(0,2) * VAR_K(KTgPI);
    v4_0.z = TYPE_K(0,3) * VAR_K(KTgPI);
    v4_0.w = TYPE_K(0);

    FCN_M(tgMH_Init_EulerX)( &xM0, v4_0.x );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_Init_EulerY) ------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_Init_EulerY) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;
    VEC_T(1)                            v4_0;

    v4_0.x = TYPE_K(0,1) * VAR_K(KTgPI);
    v4_0.y = TYPE_K(0,2) * VAR_K(KTgPI);
    v4_0.z = TYPE_K(0,3) * VAR_K(KTgPI);
    v4_0.w = TYPE_K(0);

    FCN_M(tgMH_Init_EulerY)( &xM0, v4_0.y );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_Init_EulerZ) ------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_Init_EulerZ) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;
    VEC_T(1)                            v4_0;

    v4_0.x = TYPE_K(0,1) * VAR_K(KTgPI);
    v4_0.y = TYPE_K(0,2) * VAR_K(KTgPI);
    v4_0.z = TYPE_K(0,3) * VAR_K(KTgPI);
    v4_0.w = TYPE_K(0);

    FCN_M(tgMH_Init_EulerZ)( &xM0, v4_0.z );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_Init_Quat) ------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_Init_Quat) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;
    VEC_T(1)                            v4_0;

    v4_0.x = TYPE_K(0,1) * VAR_K(KTgPI);
    v4_0.y = TYPE_K(0,2) * VAR_K(KTgPI);
    v4_0.z = TYPE_K(0,3) * VAR_K(KTgPI);
    v4_0.w = TYPE_K(0);

    FCN_M(tgMH_Init_Quat)( &xM0, &v4_0 );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_CAT) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_CAT) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0, xM1, xM2;
    TgSINT_F32                          i0, iIndex;

    for (i0 = 0; i0 < TEMPLATE__VECTOR_ROW*TEMPLATE__VECTOR_DIM; ++i0)
    {
        while (0 == (xM1.m_aElement[i0] = FCN_F(tgCM_RAND)()));
        while (0 == (xM2.m_aElement[i0] = FCN_F(tgCM_RAND)()));
    };

    FCN_M(tgMH_CAT)(&xM0, &xM1, &xM2);

    for (i0 = 0; i0 < TEMPLATE__VECTOR_ROW*TEMPLATE__VECTOR_DIM; ++i0)
    {
        VAR_T()                             tTotal;

        tTotal = TYPE_K(0);
        for (iIndex = 0; iIndex < tgCM_MIN_S32( TEMPLATE__VECTOR_ROW, TEMPLATE__VECTOR_DIM ); ++iIndex)
        {
            tTotal += xM1.m_aRowCol[i0 / TEMPLATE__VECTOR_DIM][iIndex] * xM2.m_aRowCol[iIndex][i0 % TEMPLATE__VECTOR_DIM];
        };
    #if (TEMPLATE__VECTOR_ROW == 3 && TEMPLATE__VECTOR_DIM == 4)
        tTotal += 3 == (i0 % TEMPLATE__VECTOR_DIM) ? xM1.m_aRowCol[i0 / TEMPLATE__VECTOR_DIM][3] : TYPE_K(0);
    #endif
        Test__Expect_EQ(true, FCN_F(tgCM_NR0)( tTotal - xM0.m_aElement[i0] ));
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_INV_DET) --------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_INV_DET) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0, xM2;
    VAR_T()                             tDet;
    TgSINT_F32                          iIndex;

    for (iIndex = 0; iIndex < TEMPLATE__VECTOR_ROW * TEMPLATE__VECTOR_DIM; ++iIndex)
    {
        while (0 == (xM0.m_aElement[iIndex] = FCN_F(tgCM_RAND)()));
    };

    tDet = FCN_M(tgMH_DET)( &xM0 );
    FCN_M(tgMH_INV_DET)( &xM2, tDet, &xM0 );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_INV) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_INV) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0, xM1;
    TgSINT_F32                          iIndex;

    for (iIndex = 0; iIndex < TEMPLATE__VECTOR_ROW * TEMPLATE__VECTOR_DIM; ++iIndex)
    {
        while (0 == (xM0.m_aElement[iIndex] = FCN_F(tgCM_RAND)()));
    };

    FCN_M(tgMH_INV)( &xM1, &xM0 );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_DET) ------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_DET) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;
    VAR_T()                             tDet;
    TgSINT_F32                          iIndex;

    for (iIndex = 0; iIndex < TEMPLATE__VECTOR_ROW * TEMPLATE__VECTOR_DIM; ++iIndex)
    {
        while (0 == (xM0.m_aElement[iIndex] = FCN_F(tgCM_RAND)()));
    };

    tDet = FCN_M(tgMH_DET)( &xM0 );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_TX) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_TX) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM1;
    VEC_T(1)                            vV0_V4, vV1_V4;
    TgSINT_F32                          iIndex;

    for (iIndex = 0; iIndex < TEMPLATE__VECTOR_ROW * TEMPLATE__VECTOR_DIM; ++iIndex)
    {
        while (0 == (xM1.m_aElement[iIndex] = FCN_F(tgCM_RAND)()));
    };

    while (TYPE_K(0) == (vV0_V4.x = FCN_F(tgCM_RAND)()));
    while (TYPE_K(0) == (vV0_V4.y = FCN_F(tgCM_RAND)()));
    while (TYPE_K(0) == (vV0_V4.z = FCN_F(tgCM_RAND)()));
    vV0_V4.w = TYPE_K(0);

    vV1_V4 = FCN_M(tgMH_TX)( &xM1, &vV0_V4 );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_TX_P) ------------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_TX_P) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM1;
    VEC_T(1)                            vV0_V4, vV1_V4;
    TgSINT_F32                          iIndex;

    for (iIndex = 0; iIndex < TEMPLATE__VECTOR_ROW * TEMPLATE__VECTOR_DIM; ++iIndex)
    {
        while (0 == (xM1.m_aElement[iIndex] = FCN_F(tgCM_RAND)()));
    };

    while (TYPE_K(0) == (vV0_V4.x = FCN_F(tgCM_RAND)()));
    while (TYPE_K(0) == (vV0_V4.y = FCN_F(tgCM_RAND)()));
    while (TYPE_K(0) == (vV0_V4.z = FCN_F(tgCM_RAND)()));
    vV0_V4.w = TYPE_K(0);

    vV1_V4 = FCN_M(tgMH_TX_P)( &xM1, &vV0_V4 );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_TX_V) ------------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_TX_V) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM1;
    VEC_T(1)                            vV0_V4, vV1_V4;
    TgSINT_F32                          iIndex;

    for (iIndex = 0; iIndex < TEMPLATE__VECTOR_ROW * TEMPLATE__VECTOR_DIM; ++iIndex)
    {
        while (0 == (xM1.m_aElement[iIndex] = FCN_F(tgCM_RAND)()));
    };

    while (TYPE_K(0) == (vV0_V4.x = FCN_F(tgCM_RAND)()));
    while (TYPE_K(0) == (vV0_V4.y = FCN_F(tgCM_RAND)()));
    while (TYPE_K(0) == (vV0_V4.z = FCN_F(tgCM_RAND)()));
    vV0_V4.w = TYPE_K(0);

    vV1_V4 = FCN_M(tgMH_TX_V)( &xM1, &vV0_V4 );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_Get_Col_0) ------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_Get_Col_0) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM1;
    VEC_T(1)                            vV0_V4;
    TgSINT_F32                          iIndex;

    for (iIndex = 0; iIndex < TEMPLATE__VECTOR_ROW * TEMPLATE__VECTOR_DIM; ++iIndex)
    {
        while (0 == (xM1.m_aElement[iIndex] = FCN_F(tgCM_RAND)()));
    };

    vV0_V4 = FCN_M(tgMH_Get_Col_0)( &xM1 );
    for (iIndex = 0; iIndex < TEMPLATE__VECTOR_ROW; ++iIndex)
        Test__Expect_EQ( true, FCN_F(tgCM_NR0)(vV0_V4.m_aData[iIndex] - xM1.m_aRowCol[iIndex][0]) );
    for (; iIndex < 4; ++iIndex)
        Test__Expect_EQ( true, FCN_F(tgCM_NR0)( vV0_V4.m_aData[iIndex]) );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_Get_Col_1) ------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_Get_Col_1) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM1;
    VEC_T(1)                            vV0_V4;
    TgSINT_F32                          iIndex;

    for (iIndex = 0; iIndex < TEMPLATE__VECTOR_ROW * TEMPLATE__VECTOR_DIM; ++iIndex)
    {
        while (0 == (xM1.m_aElement[iIndex] = FCN_F(tgCM_RAND)()));
    };

    vV0_V4 = FCN_M(tgMH_Get_Col_1)( &xM1 );
    for (iIndex = 0; iIndex < TEMPLATE__VECTOR_ROW; ++iIndex)
        Test__Expect_EQ( true, FCN_F(tgCM_NR0)(vV0_V4.m_aData[iIndex] - xM1.m_aRowCol[iIndex][1]) );
    for (; iIndex < 4; ++iIndex)
        Test__Expect_EQ( true, FCN_F(tgCM_NR0)( vV0_V4.m_aData[iIndex]) );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_Get_Col_2) ------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_Get_Col_2) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM1;
    VEC_T(1)                            vV0_V4;
    TgSINT_F32                          iIndex;

    for (iIndex = 0; iIndex < TEMPLATE__VECTOR_ROW * TEMPLATE__VECTOR_DIM; ++iIndex)
    {
        while (0 == (xM1.m_aElement[iIndex] = FCN_F(tgCM_RAND)()));
    };

    vV0_V4 = FCN_M(tgMH_Get_Col_2)( &xM1 );
    for (iIndex = 0; iIndex < TEMPLATE__VECTOR_ROW; ++iIndex)
        Test__Expect_EQ( true, FCN_F(tgCM_NR0)(vV0_V4.m_aData[iIndex] - xM1.m_aRowCol[iIndex][2]) );
    for (; iIndex < 4; ++iIndex)
        Test__Expect_EQ( true, FCN_F(tgCM_NR0)( vV0_V4.m_aData[iIndex]) );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_Get_Col_3) ------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_Get_Col_3) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM1;
    VEC_T(1)                            vV0_V4;
    TgSINT_F32                          iIndex;

    for (iIndex = 0; iIndex < TEMPLATE__VECTOR_ROW * TEMPLATE__VECTOR_DIM; ++iIndex)
    {
        while (0 == (xM1.m_aElement[iIndex] = FCN_F(tgCM_RAND)()));
    };

    vV0_V4 = FCN_M(tgMH_Get_Col_3)( &xM1 );
    iIndex = 0;
#if (TEMPLATE__VECTOR_DIM > 3)
    for (iIndex = 0; iIndex < TEMPLATE__VECTOR_ROW; ++iIndex)
        Test__Expect_EQ( true, FCN_F(tgCM_NR0)(vV0_V4.m_aData[iIndex] - xM1.m_aRowCol[iIndex][3]) );
    for (; iIndex < 4; ++iIndex)
        Test__Expect_EQ( true, FCN_F(tgCM_NR1)(vV0_V4.m_aData[iIndex]) );
#else
    Test__Expect_EQ(true, FCN_F(tgCM_NR0)( vV0_V4.m_aData[0] ));
    Test__Expect_EQ(true, FCN_F(tgCM_NR0)( vV0_V4.m_aData[1] ));
    Test__Expect_EQ(true, FCN_F(tgCM_NR0)( vV0_V4.m_aData[2] ));
    Test__Expect_EQ(true, FCN_F(tgCM_NR1)( vV0_V4.m_aData[3] ));
#endif

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_Matrix2Euler_S) -------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_Matrix2Euler_S) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM1;
    VEC_T(1)                            vV0_V4;

    FCN_M(tgMH_Matrix2Euler_S)( &vV0_V4.x, &vV0_V4.y, &vV0_V4.z, &xM1 );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_Matrix2Euler) ---------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_Matrix2Euler) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM1;
    VEC_T(1)                            vV0_V4;

    FCN_M(tgMH_Matrix2Euler)( &vV0_V4, &xM1 );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_Matrix2Quat) ----------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_Matrix2Quat) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM1;
    VEC_T(1)                            vV0_V4;

    FCN_M(tgMH_Matrix2Quat)( &vV0_V4, &xM1 );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_Init_Basis_From_Vector) ------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_Init_Basis_From_Vector) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;
    VEC_T(1)                            v4_0;

    v4_0.x = TYPE_K(0,1) * VAR_K(KTgPI);
    v4_0.y = TYPE_K(0,2) * VAR_K(KTgPI);
    v4_0.z = TYPE_K(0,3) * VAR_K(KTgPI);
    v4_0.w = TYPE_K(0);

    v4_0 = FCN_V(tgMH_NORM)( &v4_0 );
    FCN_M(tgMH_Init_Basis_From_Vector)( &xM0, &v4_0 );

    TEST_END_METHOD( KTgS_OK );
}
