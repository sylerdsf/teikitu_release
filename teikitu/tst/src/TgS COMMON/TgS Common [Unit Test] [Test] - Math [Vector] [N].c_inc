/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common [Unit Test] [Test] - Math API [Vector] [N].c_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Common ===================================================================================================================================================================== */

/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*  Test Functions                                                                                                                                                                 */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

/* ---- FCN_V_UT(tgMH_SETU_N) ---------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_SETU_N) )
{
    union
    {
        VEC_N_T(1)                          vN;
        VEC_T(1)                            vT;
    }                                   sV0;
    VAR_T() TgALIGN(16)                 at1[TEMPLATE__VECTOR_DIM*2];

    for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM*2; ++uiIndex)
    {
        at1[uiIndex] = (VAR_T())(uiIndex + 1);
    };

    for (TgRSIZE uiStart = 0; uiStart < TEMPLATE__VECTOR_DIM; ++uiStart)
    {
        sV0.vN = FCN_V(tgMH_SETU_N)( at1 + uiStart );

        for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
        {
            Test__Expect_EQ( (VAR_T())(uiStart + uiIndex + 1), sV0.vT.m_aData[uiIndex] );
        };
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_SETA_N) ---------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_SETA_N) )
{
    union
    {
        VEC_N_T(1)                          vN;
        VEC_T(1)                            vT;
    }                                   sV0;
    VAR_T() TgALIGN(16)                 at1[TEMPLATE__VECTOR_DIM];
    TgRSIZE                             uiIndex;

    for (uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        at1[uiIndex] = (VAR_T())(uiIndex + 1);
    };

    sV0.vN = FCN_V(tgMH_SETA_N)( at1 );

    for (uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        Test__Expect_EQ( (VAR_T())(uiIndex + 1), sV0.vT.m_aData[uiIndex] );
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_SET1_N) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_SET1_N) )
{
    union
    {
        VEC_N_T(1)                          vN;
        VEC_T(1)                            vT;
    }                                   sV0;
    TgRSIZE                             uiIndex;

    sV0.vN = FCN_V(tgMH_SET1_N)( 3 );

    for (uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        Test__Expect_EQ((VAR_T())3, sV0.vT.m_aData[uiIndex]);
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_SEL_N) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_SEL_N) )
{
    union
    {
        VEC_N_T(1)                          vN;
        VEC_T(1)                            vT;
        TgUINT_E08                          auiM0[sizeof( VEC_N_T(1) )];
    }                                   sV0, sV1, sV2, sV3;
    TgUINT_F08                          ui08_0;

    for (TgRSIZE ui0 = 0; ui0 < sizeof( VEC_N_T(1) ); ++ui0)
    {
        sV0.auiM0[ui0] = tgCM_RAND_U08();
        sV1.auiM0[ui0] = tgCM_RAND_U08();
        ui08_0 = tgCM_RAND_U08();
        sV2.auiM0[ui0] = (ui08_0 & KTgPERM_PARAM_SELECT_BIT) + (ui08_0 % TEMPLATE__VECTOR_DIM);
    };

    sV3.vN = FCN_V(tgMH_SEL_N)( sV0.vN, sV1.vN, sV2.vN );

    for (TgRSIZE ui0 = 0; ui0 < sizeof( VEC_N_T(1) ); ++ui0)
    {
        ui08_0  = sV0.auiM0[ui0] & ~sV2.auiM0[ui0];
        ui08_0 |= sV1.auiM0[ui0] & sV2.auiM0[ui0];
        Test__Expect_EQ( sV3.auiM0[ui0], ui08_0 );
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_AND_N) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_AND_N) )
{
    union
    {
        VEC_N_T(1)                          vN;
        VEC_T(1)                            vT;
        TgUINT_E08                          auiM0[sizeof( VEC_N_T(1) )];
    }                                   sV0, sV1, sV2;

    for (TgRSIZE ui0 = 0; ui0 < sizeof( VEC_N_T(1) ); ++ui0)
    {
        sV1.auiM0[ui0] = tgCM_RAND_U08();
        sV2.auiM0[ui0] = tgCM_RAND_U08();
    };

    sV0.vN = FCN_V(tgMH_AND_N)( sV1.vN, sV2.vN );

    for (TgRSIZE ui0 = 0; ui0 < sizeof( VEC_N_T(1) ); ++ui0)
    {
        Test__Expect_EQ(sV0.auiM0[ui0], sV1.auiM0[ui0] & sV2.auiM0[ui0] );
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_OR_N) ------------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_OR_N) )
{
    union
    {
        VEC_N_T(1)                          vN;
        VEC_T(1)                            vT;
        TgUINT_E08                          auiM0[sizeof( VEC_N_T(1) )];
    }                                   sV0, sV1, sV2;

    for (TgRSIZE ui0 = 0; ui0 < sizeof( VEC_N_T(1) ); ++ui0)
    {
        sV1.auiM0[ui0] = tgCM_RAND_U08();
        sV2.auiM0[ui0] = tgCM_RAND_U08();
    };

    sV0.vN = FCN_V(tgMH_OR_N)( sV1.vN, sV2.vN );

    for (TgRSIZE ui0 = 0; ui0 < sizeof( VEC_N_T(1) ); ++ui0)
    {
        Test__Expect_EQ(sV0.auiM0[ui0], sV1.auiM0[ui0] | sV2.auiM0[ui0] );
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_XOR_N) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_XOR_N) )
{
    union
    {
        VEC_N_T(1)                          vN;
        VEC_T(1)                            vT;
        TgUINT_E08                          auiM0[sizeof( VEC_N_T(1) )];
    }                                   sV0, sV1, sV2;

    for (TgRSIZE ui0 = 0; ui0 < sizeof( VEC_N_T(1) ); ++ui0)
    {
        sV1.auiM0[ui0] = tgCM_RAND_U08();
        sV2.auiM0[ui0] = tgCM_RAND_U08();
    };

    sV0.vN = FCN_V(tgMH_XOR_N)( sV1.vN, sV2.vN );

    for (TgRSIZE ui0 = 0; ui0 < sizeof( VEC_N_T(1) ); ++ui0)
    {
        Test__Expect_EQ(sV0.auiM0[ui0], sV1.auiM0[ui0] ^ sV2.auiM0[ui0] );
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_MAX_N) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_MAX_N) )
{
    union
    {
        VEC_N_T(1)                          vN;
        VEC_T(1)                            vT;
    }                                   sV0, sV1, sV2;

    sV0.vN = FCN_V(tgMH_SET1_N)( VAR_K(KTgMIN) );
    sV1.vN = FCN_V(tgMH_SET1_N)( 2 );

    sV2.vN = FCN_V(tgMH_MAX_N)( sV0.vN, sV1.vN ); /* Test a larger negative number vs a positive value */
    Test__Expect_EQ(0, memcmp( &sV2, &sV1, sizeof( VEC_T(1) ) ));

    sV2.vN = FCN_V(tgMH_MAX_N)( sV1.vN, sV1.vN ); /* Test using the same inputs */
    Test__Expect_EQ(0, memcmp( &sV2, &sV1, sizeof( VEC_T(1) ) ));

    sV1.vN = FCN_V(tgMH_SET1_N)( 5 );
    sV2.vN = FCN_V(tgMH_MAX_N)( sV0.vN, sV1.vN ); /* Re-Test the first case */
    Test__Expect_EQ(0, memcmp( &sV2, &sV1, sizeof( VEC_T(1) ) ));

    sV0.vN = FCN_V(tgMH_SET1_N)( 9 );
    sV2.vN = FCN_V(tgMH_MAX_N)( sV0.vN, sV1.vN ); /* Validate that we are not just returning the second vector */
    Test__Expect_EQ(0, memcmp( &sV2, &sV0, sizeof( VEC_T(1) ) ));

    sV0.vN = FCN_V(tgMH_SET1_N)( VAR_K(KTgMIN) + 9 );
    sV1.vN = FCN_V(tgMH_SET1_N)( VAR_K(KTgMIN) + 4 );
    sV2.vN = FCN_V(tgMH_MAX_N)( sV0.vN, sV1.vN ); /* Test negative values */
    Test__Expect_EQ(0, memcmp( &sV2, &sV0, sizeof( VEC_T(1) ) ));

    for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        sV0.vN = FCN_V(tgMH_SET1_N)(1);
        sV1.vN = FCN_V(tgMH_SET1_N)(1);

        sV1.vT.m_aData[uiIndex] = 0;
        sV2.vN = FCN_V(tgMH_MAX_N)( sV0.vN, sV1.vN );
        Test__Expect_EQ(0, memcmp( &sV2, &sV0, sizeof( VEC_T(1) ) ));

        sV1.vT.m_aData[uiIndex] = 2;
        sV2.vN = FCN_V(tgMH_MAX_N)( sV0.vN, sV1.vN );
        Test__Expect_EQ(0, memcmp( &sV2, &sV1, sizeof( VEC_T(1) ) ));
    };

    sV0.vN = FCN_V(tgMH_RAND_N)();
    sV1.vN = FCN_V(tgMH_RAND_N)();
    sV2.vN = FCN_V(tgMH_MAX_N)( sV0.vN, sV1.vN ); /* Test random values */

    for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        Test__Expect_EQ( sV2.vT.m_aData[uiIndex], FCN_F(tgCM_MAX)( sV0.vT.m_aData[uiIndex], sV1.vT.m_aData[uiIndex] ));
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_MIN_N) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_MIN_N) )
{
    union
    {
        VEC_N_T(1)                          vN;
        VEC_T(1)                            vT;
    }                                   sV0, sV1, sV2;

    sV0.vN = FCN_V(tgMH_SET1_N)( VAR_K(KTgMIN) );
    sV1.vN = FCN_V(tgMH_SET1_N)( 2 );

    sV2.vN = FCN_V(tgMH_MIN_N)( sV0.vN, sV1.vN ); /* Test a larger negative number vs a positive value */
    Test__Expect_EQ(0, memcmp( &sV2, &sV0, sizeof( VEC_T(1) ) ));

    sV2.vN = FCN_V(tgMH_MIN_N)( sV1.vN, sV1.vN ); /* Test using the same inputs */
    Test__Expect_EQ(0, memcmp( &sV2, &sV1, sizeof( VEC_T(1) ) ));

    sV1.vN = FCN_V(tgMH_SET1_N)( 5 );
    sV2.vN = FCN_V(tgMH_MIN_N)( sV0.vN, sV1.vN ); /* Re-Test the first case */
    Test__Expect_EQ(0, memcmp( &sV2, &sV0, sizeof( VEC_T(1) ) ));

    sV0.vN = FCN_V(tgMH_SET1_N)( 9 );
    sV2.vN = FCN_V(tgMH_MIN_N)( sV0.vN, sV1.vN ); /* Validate that we are not just returning the first vector */
    Test__Expect_EQ(0, memcmp( &sV2, &sV1, sizeof( VEC_T(1) ) ));

    sV0.vN = FCN_V(tgMH_SET1_N)( VAR_K(KTgMIN) + 9 );
    sV1.vN = FCN_V(tgMH_SET1_N)( VAR_K(KTgMIN) + 4 );
    sV2.vN = FCN_V(tgMH_MIN_N)( sV0.vN, sV1.vN ); /* Test negative values */
    Test__Expect_EQ(0, memcmp( &sV2, &sV1, sizeof( VEC_T(1) ) ));

    for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        sV0.vN = FCN_V(tgMH_SET1_N)(1);
        sV1.vN = FCN_V(tgMH_SET1_N)(1);

        sV1.vT.m_aData[uiIndex] = 0;
        sV2.vN = FCN_V(tgMH_MIN_N)( sV0.vN, sV1.vN );
        Test__Expect_EQ(0, memcmp( &sV2, &sV1, sizeof( VEC_T(1) ) ));

        sV1.vT.m_aData[uiIndex] = 2;
        sV2.vN = FCN_V(tgMH_MIN_N)( sV0.vN, sV1.vN );
        Test__Expect_EQ(0, memcmp( &sV2, &sV0, sizeof( VEC_T(1) ) ));
    };

    sV0.vN = FCN_V(tgMH_RAND_N)();
    sV1.vN = FCN_V(tgMH_RAND_N)();
    sV2.vN = FCN_V(tgMH_MIN_N)( sV0.vN, sV1.vN ); /* Test random values */

    for (TgRSIZE uiIndex = 0; uiIndex < TEMPLATE__VECTOR_DIM; ++uiIndex)
    {
        Test__Expect_EQ( sV2.vT.m_aData[uiIndex], FCN_F(tgCM_MIN)( sV0.vT.m_aData[uiIndex], sV1.vT.m_aData[uiIndex] ));
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_CMP_EQ_N) -------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_CMP_EQ_N) )
{
    VEC_N_T(1)                          vV0, vV1, vV2, vV3, vT, vF;

    vV0 = FCN_V(tgMH_SET1_N)(0);
    vV1 = FCN_V(tgMH_SET1_N)(1);
    vV2 = FCN_V(tgMH_SET1_N)(2);

    tgMM_Set_U08_0xFF( &vT, sizeof( VEC_T(1) ) );
    tgMM_Set_U08_0x00( &vF, sizeof( VEC_T(1) ) );

    vV3 = FCN_V(tgMH_CMP_EQ_N)( vV0, vV0 ); Test__Expect_EQ(0, memcmp( &vT, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_EQ_N)( vV0, vV1 ); Test__Expect_EQ(0, memcmp( &vF, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_EQ_N)( vV0, vV2 ); Test__Expect_EQ(0, memcmp( &vF, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_EQ_N)( vV1, vV0 ); Test__Expect_EQ(0, memcmp( &vF, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_EQ_N)( vV1, vV1 ); Test__Expect_EQ(0, memcmp( &vT, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_EQ_N)( vV1, vV2 ); Test__Expect_EQ(0, memcmp( &vF, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_EQ_N)( vV2, vV0 ); Test__Expect_EQ(0, memcmp( &vF, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_EQ_N)( vV2, vV1 ); Test__Expect_EQ(0, memcmp( &vF, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_EQ_N)( vV2, vV2 ); Test__Expect_EQ(0, memcmp( &vT, &vV3, sizeof( VEC_N_T(1) ) ));

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_CMP_NE_N) -------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_CMP_NE_N) )
{
    VEC_N_T(1)                          vV0, vV1, vV2, vV3, vT, vF;

    vV0 = FCN_V(tgMH_SET1_N)(0);
    vV1 = FCN_V(tgMH_SET1_N)(1);
    vV2 = FCN_V(tgMH_SET1_N)(2);

    tgMM_Set_U08_0xFF( &vT, sizeof( VEC_T(1) ) );
    tgMM_Set_U08_0x00( &vF, sizeof( VEC_T(1) ) );

    vV3 = FCN_V(tgMH_CMP_NE_N)( vV0, vV0 ); Test__Expect_EQ(0, memcmp( &vF, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_NE_N)( vV0, vV1 ); Test__Expect_EQ(0, memcmp( &vT, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_NE_N)( vV0, vV2 ); Test__Expect_EQ(0, memcmp( &vT, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_NE_N)( vV1, vV0 ); Test__Expect_EQ(0, memcmp( &vT, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_NE_N)( vV1, vV1 ); Test__Expect_EQ(0, memcmp( &vF, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_NE_N)( vV1, vV2 ); Test__Expect_EQ(0, memcmp( &vT, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_NE_N)( vV2, vV0 ); Test__Expect_EQ(0, memcmp( &vT, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_NE_N)( vV2, vV1 ); Test__Expect_EQ(0, memcmp( &vT, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_NE_N)( vV2, vV2 ); Test__Expect_EQ(0, memcmp( &vF, &vV3, sizeof( VEC_N_T(1) ) ));

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_CMP_GE_N) -------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_CMP_GE_N) )
{
    VEC_N_T(1)                          vV0, vV1, vV2, vV3, vT, vF;

    vV0 = FCN_V(tgMH_SET1_N)(0);
    vV1 = FCN_V(tgMH_SET1_N)(1);
    vV2 = FCN_V(tgMH_SET1_N)(2);

    tgMM_Set_U08_0xFF( &vT, sizeof( VEC_T(1) ) );
    tgMM_Set_U08_0x00( &vF, sizeof( VEC_T(1) ) );

    vV3 = FCN_V(tgMH_CMP_GE_N)( vV0, vV0 ); Test__Expect_EQ(0, memcmp( &vT, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_GE_N)( vV0, vV1 ); Test__Expect_EQ(0, memcmp( &vF, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_GE_N)( vV0, vV2 ); Test__Expect_EQ(0, memcmp( &vF, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_GE_N)( vV1, vV0 ); Test__Expect_EQ(0, memcmp( &vT, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_GE_N)( vV1, vV1 ); Test__Expect_EQ(0, memcmp( &vT, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_GE_N)( vV1, vV2 ); Test__Expect_EQ(0, memcmp( &vF, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_GE_N)( vV2, vV0 ); Test__Expect_EQ(0, memcmp( &vT, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_GE_N)( vV2, vV1 ); Test__Expect_EQ(0, memcmp( &vT, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_GE_N)( vV2, vV2 ); Test__Expect_EQ(0, memcmp( &vT, &vV3, sizeof( VEC_N_T(1) ) ));

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_CMP_GT_N) -------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_CMP_GT_N) )
{
    VEC_N_T(1)                          vV0, vV1, vV2, vV3, vT, vF;

    vV0 = FCN_V(tgMH_SET1_N)(0);
    vV1 = FCN_V(tgMH_SET1_N)(1);
    vV2 = FCN_V(tgMH_SET1_N)(2);

    tgMM_Set_U08_0xFF( &vT, sizeof( VEC_T(1) ) );
    tgMM_Set_U08_0x00( &vF, sizeof( VEC_T(1) ) );

    vV3 = FCN_V(tgMH_CMP_GT_N)( vV0, vV0 ); Test__Expect_EQ(0, memcmp( &vF, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_GT_N)( vV0, vV1 ); Test__Expect_EQ(0, memcmp( &vF, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_GT_N)( vV0, vV2 ); Test__Expect_EQ(0, memcmp( &vF, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_GT_N)( vV1, vV0 ); Test__Expect_EQ(0, memcmp( &vT, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_GT_N)( vV1, vV1 ); Test__Expect_EQ(0, memcmp( &vF, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_GT_N)( vV1, vV2 ); Test__Expect_EQ(0, memcmp( &vF, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_GT_N)( vV2, vV0 ); Test__Expect_EQ(0, memcmp( &vT, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_GT_N)( vV2, vV1 ); Test__Expect_EQ(0, memcmp( &vT, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_GT_N)( vV2, vV2 ); Test__Expect_EQ(0, memcmp( &vF, &vV3, sizeof( VEC_N_T(1) ) ));

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_CMP_LE_N) -------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_CMP_LE_N) )
{
    VEC_N_T(1)                          vV0, vV1, vV2, vV3, vT, vF;

    vV0 = FCN_V(tgMH_SET1_N)(0);
    vV1 = FCN_V(tgMH_SET1_N)(1);
    vV2 = FCN_V(tgMH_SET1_N)(2);

    tgMM_Set_U08_0xFF( &vT, sizeof( VEC_T(1) ) );
    tgMM_Set_U08_0x00( &vF, sizeof( VEC_T(1) ) );

    vV3 = FCN_V(tgMH_CMP_LE_N)( vV0, vV0 ); Test__Expect_EQ(0, memcmp( &vT, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_LE_N)( vV0, vV1 ); Test__Expect_EQ(0, memcmp( &vT, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_LE_N)( vV0, vV2 ); Test__Expect_EQ(0, memcmp( &vT, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_LE_N)( vV1, vV0 ); Test__Expect_EQ(0, memcmp( &vF, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_LE_N)( vV1, vV1 ); Test__Expect_EQ(0, memcmp( &vT, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_LE_N)( vV1, vV2 ); Test__Expect_EQ(0, memcmp( &vT, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_LE_N)( vV2, vV0 ); Test__Expect_EQ(0, memcmp( &vF, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_LE_N)( vV2, vV1 ); Test__Expect_EQ(0, memcmp( &vF, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_LE_N)( vV2, vV2 ); Test__Expect_EQ(0, memcmp( &vT, &vV3, sizeof( VEC_N_T(1) ) ));

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_CMP_LT_N) -------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_CMP_LT_N) )
{
    VEC_N_T(1)                          vV0, vV1, vV2, vV3, vT, vF;

    vV0 = FCN_V(tgMH_SET1_N)(0);
    vV1 = FCN_V(tgMH_SET1_N)(1);
    vV2 = FCN_V(tgMH_SET1_N)(2);

    tgMM_Set_U08_0xFF( &vT, sizeof( VEC_T(1) ) );
    tgMM_Set_U08_0x00( &vF, sizeof( VEC_T(1) ) );

    vV3 = FCN_V(tgMH_CMP_LT_N)( vV0, vV0 ); Test__Expect_EQ(0, memcmp( &vF, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_LT_N)( vV0, vV1 ); Test__Expect_EQ(0, memcmp( &vT, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_LT_N)( vV0, vV2 ); Test__Expect_EQ(0, memcmp( &vT, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_LT_N)( vV1, vV0 ); Test__Expect_EQ(0, memcmp( &vF, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_LT_N)( vV1, vV1 ); Test__Expect_EQ(0, memcmp( &vF, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_LT_N)( vV1, vV2 ); Test__Expect_EQ(0, memcmp( &vT, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_LT_N)( vV2, vV0 ); Test__Expect_EQ(0, memcmp( &vF, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_LT_N)( vV2, vV1 ); Test__Expect_EQ(0, memcmp( &vF, &vV3, sizeof( VEC_N_T(1) ) ));
    vV3 = FCN_V(tgMH_CMP_LT_N)( vV2, vV2 ); Test__Expect_EQ(0, memcmp( &vF, &vV3, sizeof( VEC_N_T(1) ) ));

    TEST_END_METHOD( KTgS_OK );
}
