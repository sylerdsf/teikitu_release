/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common [Unit Test] [Test] - Math [Matrix] [F] [44].c_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.17 / »GUID« 3ED3C595-046B-47FB-8785-5C167178CD24 */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Common ===================================================================================================================================================================== */

/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*  Test Functions                                                                                                                                                                 */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

/* ---- FCN_M_UT(tgMH_CAT_34_44) ------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_CAT_34_44) )
{
    union
    {
        VEC_T(4)                            m4_V;
        VEC_S_T(4)                          m4_S;
        VEC_T(3)                            m3_V;
        VEC_S_T(3)                          m3_S;
    }                                   uM0, uM1, uMX, uMZ;

    for (TgRSIZE uiIndex = 0; uiIndex < 4; ++uiIndex)
    {
        uM0.m4_S.m_avCol[uiIndex] = FCN_V(tgMH_RAND_S)();
        uM1.m4_S.m_avCol[uiIndex] = FCN_V(tgMH_RAND_S)();
    };

    FCN_M(tgMH_CAT_34_44_S)( &uMZ.m4_S, &uM0.m3_S, &uM1.m4_S );
    FCN_M(tgMH_CAT_34_44)( &uMX.m4_V, &uM0.m3_V, &uM1.m4_V );

    for (TgRSIZE uiIndex = 0; uiIndex < 16; ++uiIndex)
    {
        Test__Expect_EQ( true, FCN_F(tgCM_NR0)( uMX.m4_S.m_aElement[uiIndex] - uMZ.m4_S.m_aElement[uiIndex] ) );
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_CAT_44_34) ------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_CAT_44_34) )
{
    union
    {
        VEC_T(4)                            m4_V;
        VEC_S_T(4)                          m4_S;
        VEC_T(3)                            m3_V;
        VEC_S_T(3)                          m3_S;
    }                                   uM0, uM1, uMX, uMZ;

    for (TgRSIZE uiIndex = 0; uiIndex < 4; ++uiIndex)
    {
        uM0.m4_S.m_avCol[uiIndex] = FCN_V(tgMH_RAND_S)();
        uM1.m4_S.m_avCol[uiIndex] = FCN_V(tgMH_RAND_S)();
    };

    FCN_M(tgMH_CAT_44_34_S)( &uMZ.m4_S, &uM0.m4_S, &uM1.m3_S );
    FCN_M(tgMH_CAT_44_34)( &uMX.m4_V, &uM0.m4_V, &uM1.m3_V );

    for (TgRSIZE uiIndex = 0; uiIndex < 16; ++uiIndex)
    {
        Test__Expect_EQ( true, FCN_F(tgCM_NR0)( uMX.m4_S.m_aElement[uiIndex] - uMZ.m4_S.m_aElement[uiIndex] ) );
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_TR) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_TR) )
{
    union
    {
        VEC_T(4)                            mMV;
        VEC_S_T(4)                          mMS;
    }                                   uM0, uMX, uMZ;

    for (TgRSIZE uiIndex = 0; uiIndex < 4; ++uiIndex)
    {
        uM0.mMS.m_avCol[uiIndex] = FCN_V(tgMH_RAND_S)();
    };

    FCN_M(tgMH_TR_S)( &uMZ.mMS, &uM0.mMS );
    FCN_M(tgMH_TR)( &uMX.mMV, &uM0.mMV );

    for (TgRSIZE uiIndex = 0; uiIndex < 16; ++uiIndex)
    {
        Test__Expect_EQ( true, FCN_F(tgCM_NR0)( uMX.mMS.m_aElement[uiIndex] - uMZ.mMS.m_aElement[uiIndex] ) );
    };

    TEST_END_METHOD( KTgS_OK );
}
