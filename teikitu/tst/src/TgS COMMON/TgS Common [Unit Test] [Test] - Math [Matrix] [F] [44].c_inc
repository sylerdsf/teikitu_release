/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common [Unit Test] [Test] - Math [Matrix] [F] [44].c_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Common ===================================================================================================================================================================== */

/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*  Test Functions                                                                                                                                                                 */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

/* ---- FCN_M_UT(tgMH_CAT_34_44) ------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_CAT_34_44) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0, xM1;
    VEC_T(3)                            xM2;

    for (TgRSIZE uiIndex = 0; uiIndex < 12; ++uiIndex)
    {
        while (0 == (xM1.m_aElement[uiIndex] = FCN_F(tgCM_RAND)()));
        while (0 == (xM2.m_aElement[uiIndex] = FCN_F(tgCM_RAND)()));
    };
    for (TgRSIZE uiIndex = 12; uiIndex < 16; ++uiIndex)
    {
        while (0 == (xM1.m_aElement[uiIndex] = FCN_F(tgCM_RAND)()));
    };

    FCN_M(tgMH_CAT_34_44)( &xM0, &xM2, &xM1 );

    for (TgRSIZE i0 = 0; i0 < 12; ++i0)
    {
        VAR_T()                             tTotal;

        tTotal = TYPE_K(0);
        for (TgRSIZE iIndex = 0; iIndex < 4; ++iIndex)
        {
            tTotal += xM2.m_aRowCol[i0 / 4][iIndex] * xM1.m_aRowCol[iIndex][i0 % 4];
        };
        Test__Expect_EQ(true, FCN_F(tgCM_NR0)( tTotal - xM0.m_aElement[i0] ));
    };
    Test__Expect_EQ(true, FCN_F(tgCM_NR0)( xM1._41 - xM0._41 ));
    Test__Expect_EQ(true, FCN_F(tgCM_NR0)( xM1._42 - xM0._42 ));
    Test__Expect_EQ(true, FCN_F(tgCM_NR0)( xM1._43 - xM0._43 ));
    Test__Expect_EQ(true, FCN_F(tgCM_NR0)( xM1._44 - xM0._44 ));

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_CAT_44_34) ------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_CAT_44_34) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0, xM1;
    VEC_T(3)                            xM2;

    for (TgRSIZE uiIndex = 0; uiIndex < 12; ++uiIndex)
    {
        while (0 == (xM1.m_aElement[uiIndex] = FCN_F(tgCM_RAND)()));
        while (0 == (xM2.m_aElement[uiIndex] = FCN_F(tgCM_RAND)()));
    };
    for (TgRSIZE uiIndex = 12; uiIndex < 16; ++uiIndex)
    {
        while (0 == (xM1.m_aElement[uiIndex] = FCN_F(tgCM_RAND)()));
    };

    FCN_M(tgMH_CAT_44_34)( &xM0, &xM1, &xM2 );

    for (TgRSIZE i0 = 0; i0 < 16; ++i0)
    {
        VAR_T()                             tTotal;

        tTotal = TYPE_K(0);
        for (TgRSIZE iIndex = 0; iIndex < 3; ++iIndex)
        {
            tTotal += xM1.m_aRowCol[i0 / 4][iIndex] * xM2.m_aRowCol[iIndex][i0 % 4];
        };
        if (3 == (i0 % 4)) tTotal += xM1.m_aRowCol[i0 / 4][3];
        Test__Expect_EQ(true, FCN_F(tgCM_NR0)( tTotal - xM0.m_aElement[i0] ));
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_TR) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_TR) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0, xM1;

    for (TgRSIZE iIndex = 0; iIndex < TEMPLATE__VECTOR_ROW * TEMPLATE__VECTOR_DIM; ++iIndex)
    {
        while (0 == (xM1.m_aElement[iIndex] = FCN_F(tgCM_RAND)()));
    };

    FCN_M(tgMH_TR)( &xM0, &xM1 );

    for (TgRSIZE iRow = 0; iRow < 4; ++iRow)
    {
        for (TgRSIZE iCol = 0; iCol < 4; ++iCol)
        {
            Test__Expect_EQ( xM0.m_aRowCol[iCol][iRow], xM1.m_aRowCol[iRow][iCol] );
        };
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_Look) ------------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_Look) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;
    VEC_T(1)                            vFrom, vTo, vUp, vT;

    for (TgRSIZE iIndex = 0; iIndex < 3; ++iIndex)
    {
        while (0 == (vUp.m_aData[iIndex] = FCN_F(tgCM_RAND)()));
        while (0 == (vFrom.m_aData[iIndex] = FCN_F(tgCM_RAND)()));
        while (0 == (vTo.m_aData[iIndex] = FCN_F(tgCM_RAND)()));
    };
    vFrom.w = TYPE_K(1);
    vTo.w = TYPE_K(1);
    vUp.w = TYPE_K(0);

    vT = FCN_V(tgMH_SET1)( TYPE_K(0) );
    vT.x = vUp.x;
    vT.y = vUp.y;
    vT.z = vUp.z;
    FCN_V(tgMH_NORM)( &vT );

    FCN_M(tgMH_Look)( &xM0, &vFrom, &vTo, &vT );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_LookLH) ---------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_LookLH) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;
    VEC_T(1)                            vFrom, vTo, vUp, vT;

    for (TgRSIZE iIndex = 0; iIndex < 3; ++iIndex)
    {
        while (0 == (vUp.m_aData[iIndex] = FCN_F(tgCM_RAND)()));
        while (0 == (vFrom.m_aData[iIndex] = FCN_F(tgCM_RAND)()));
        while (0 == (vTo.m_aData[iIndex] = FCN_F(tgCM_RAND)()));
    };
    vFrom.w = TYPE_K(1);
    vTo.w = TYPE_K(1);
    vUp.w = TYPE_K(0);

    vT = FCN_V(tgMH_SET1)( TYPE_K(0) );
    vT.x = vUp.x;
    vT.y = vUp.y;
    vT.z = vUp.z;
    FCN_V(tgMH_NORM)( &vT );

    /* #UNITTEST */
    FCN_M(tgMH_LookLH)(&xM0, &vFrom, &vTo, &vT );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_LookRH) ---------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_LookRH) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;
    VEC_T(1)                            vFrom, vTo, vUp, vT;

    for (TgRSIZE iIndex = 0; iIndex < 3; ++iIndex)
    {
        while (0 == (vUp.m_aData[iIndex] = FCN_F(tgCM_RAND)()));
        while (0 == (vFrom.m_aData[iIndex] = FCN_F(tgCM_RAND)()));
        while (0 == (vTo.m_aData[iIndex] = FCN_F(tgCM_RAND)()));
    };
    vFrom.w = TYPE_K(1);
    vTo.w = TYPE_K(1);
    vUp.w = TYPE_K(0);

    vT = FCN_V(tgMH_SET1)( TYPE_K(0) );
    vT.x = vUp.x;
    vT.y = vUp.y;
    vT.z = vUp.z;
    FCN_V(tgMH_NORM)( &vT );

    FCN_M(tgMH_LookRH)( &xM0, &vFrom, &vTo, &vT );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_PProjLH) --------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_PProjLH) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;

    FCN_M(tgMH_PProjLH)( &xM0, TYPE_K(1), TYPE_K(2,0), TYPE_K(3,0), TYPE_K(4,0) );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_PProjRH) --------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_PProjRH) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;

    FCN_M(tgMH_PProjRH)( &xM0, TYPE_K(1), TYPE_K(2,0), TYPE_K(3,0), TYPE_K(4,0) );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_PProj) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_PProj) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;

    FCN_M(tgMH_PProj)( &xM0, TYPE_K(1), TYPE_K(2,0), TYPE_K(3,0), TYPE_K(4,0) );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_PProj_OffsetLH) -------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_PProj_OffsetLH) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;

    FCN_M(tgMH_PProj_OffsetLH)( &xM0, TYPE_K(1), TYPE_K(2,0), TYPE_K(3,0), TYPE_K(4,0), TYPE_K(5,0), TYPE_K(6,0) );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_PProj_OffsetRH) -------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_PProj_OffsetRH) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;

    FCN_M(tgMH_PProj_OffsetRH)( &xM0, TYPE_K(1), TYPE_K(2,0), TYPE_K(3,0), TYPE_K(4,0), TYPE_K(5,0), TYPE_K(6,0) );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_PProj_Offset) ---------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_PProj_Offset) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;

    FCN_M(tgMH_PProj_Offset)( &xM0, TYPE_K(1), TYPE_K(2,0), TYPE_K(3,0), TYPE_K(4,0), TYPE_K(5,0), TYPE_K(6,0) );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_PProj_FoV) ------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_PProj_FoV) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;

    FCN_M(tgMH_PProj_FoVLH)( &xM0, TYPE_K(1), TYPE_K(2,0), TYPE_K(3,0), TYPE_K(4,0) );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_PProj_FoVLH) ----------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_PProj_FoVLH) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;

    FCN_M(tgMH_PProj_FoVRH)( &xM0, TYPE_K(1), TYPE_K(2,0), TYPE_K(3,0), TYPE_K(4,0) );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_PProj_FoVRH) ----------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_PProj_FoVRH) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;

    FCN_M(tgMH_PProj_FoV)( &xM0, TYPE_K(1), TYPE_K(2,0), TYPE_K(3,0), TYPE_K(4,0) );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_OrthoLH) --------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_OrthoLH) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;

    FCN_M(tgMH_OrthoLH)(&xM0, TYPE_K(1), TYPE_K(2,0), TYPE_K(3,0), TYPE_K(4,0) );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_OrthoRH) --------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_OrthoRH) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;

    FCN_M(tgMH_OrthoRH)( &xM0, TYPE_K(1), TYPE_K(2,0), TYPE_K(3,0), TYPE_K(4,0) );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_Ortho) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_Ortho) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;

    FCN_M(tgMH_Ortho)( &xM0, TYPE_K(1), TYPE_K(2,0), TYPE_K(3,0), TYPE_K(4,0) );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_Ortho_OffsetLH) -------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_Ortho_OffsetLH) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;

    FCN_M(tgMH_Ortho_OffsetLH)( &xM0, TYPE_K(1), TYPE_K(2,0), TYPE_K(3,0), TYPE_K(4,0), TYPE_K(5,0), TYPE_K(6,0) );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_Ortho_OffsetRH) -------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_Ortho_OffsetRH) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;

    FCN_M(tgMH_Ortho_OffsetRH)( &xM0, TYPE_K(1), TYPE_K(2,0), TYPE_K(3,0), TYPE_K(4,0), TYPE_K(5,0), TYPE_K(6,0) );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_Ortho_Offset) ---------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_Ortho_Offset) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;

    FCN_M(tgMH_Ortho_Offset)( &xM0, TYPE_K(1), TYPE_K(2,0), TYPE_K(3,0), TYPE_K(4,0), TYPE_K(5,0), TYPE_K(6,0) );

    TEST_END_METHOD( KTgS_OK );
}
