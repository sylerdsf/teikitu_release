/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common [Unit Test] [Test] - Math API [Vector] [N] [I].c_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Common ===================================================================================================================================================================== */

/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*  Test Functions                                                                                                                                                                 */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

/* ---- FCN_V_UT(tgMH_ADD_S_N) --------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_ADD_S_N) )
{
    VEC_N_T(1,C)                        vX1 = FCN_V(tgMH_SET1_N)( (VAR_T())0 );
    VEC_N_T(1,C)                        vP4 = FCN_V(tgMH_SET1_N)( (VAR_T())4 );
    VEC_N_T(1,C)                        vP8 = FCN_V(tgMH_SET1_N)( (VAR_T())8 );
    VEC_N_T(1,C)                        vX0 = FCN_V(tgMH_SET1_N)( VAR_K(KTgMAX) );
    VEC_N_T(1,C)                        vX4 = FCN_V(tgMH_SET1_N)( VAR_K(KTgMAX) - 4 );
    VEC_N_T(1)                          vRet_Add, vRet_Cmp;
    TgBOOL                              bRet_Cmp;

    vRet_Add = FCN_V(tgMH_ADD_S_N)( vP4, vP4 ); /* P P P */
    vRet_Cmp = FCN_V(tgMH_CMP_EQ_N)( vP8, vRet_Add );
    bRet_Cmp = FCN_V(tgMH_CMP_TO_BOOL_N)( vRet_Cmp );
    Test__Expect_EQ( true, bRet_Cmp );

    vRet_Add = FCN_V(tgMH_ADD_S_N)( vP4, vX1 ); /* P P Z */
    vRet_Cmp = FCN_V(tgMH_CMP_EQ_N)( vP4, vRet_Add );
    bRet_Cmp = FCN_V(tgMH_CMP_TO_BOOL_N)( vRet_Cmp );
    Test__Expect_EQ( true, bRet_Cmp );

    vRet_Add = FCN_V(tgMH_ADD_S_N)( vX1, vP4 ); /* P Z P */
    vRet_Cmp = FCN_V(tgMH_CMP_EQ_N)( vP4, vRet_Add );
    bRet_Cmp = FCN_V(tgMH_CMP_TO_BOOL_N)( vRet_Cmp );
    Test__Expect_EQ( true, bRet_Cmp );

    vRet_Add = FCN_V(tgMH_ADD_S_N)( vP8, vX4 ); /* X P N */
    vRet_Cmp = FCN_V(tgMH_CMP_EQ_N)( vX0, vRet_Add );
    bRet_Cmp = FCN_V(tgMH_CMP_TO_BOOL_N)( vRet_Cmp );
    Test__Expect_EQ( true, bRet_Cmp );

    vRet_Add = FCN_V(tgMH_ADD_S_N)( vX4, vP8 ); /* X N P */
    vRet_Cmp = FCN_V(tgMH_CMP_EQ_N)( vX0, vRet_Add );
    bRet_Cmp = FCN_V(tgMH_CMP_TO_BOOL_N)( vRet_Cmp );
    Test__Expect_EQ( true, bRet_Cmp );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_ADD_N) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_ADD_N) )
{
    VEC_N_T(1,C)                        vX1 = FCN_V(tgMH_SET1_N)((VAR_T())0);
    VEC_N_T(1,C)                        vP4 = FCN_V(tgMH_SET1_N)((VAR_T())4);
    VEC_N_T(1,C)                        vN4 = FCN_V(tgMH_SET1_N)((VAR_T())-4);
    VEC_N_T(1,C)                        vP8 = FCN_V(tgMH_SET1_N)((VAR_T())8);
    VEC_N_T(1,C)                        vN8 = FCN_V(tgMH_SET1_N)((VAR_T())-8);
    VEC_N_T(1,C)                        vX4 = FCN_V(tgMH_SET1_N)(VAR_K(KTgMAX) - 4);
    VEC_N_T(1,C)                        vY3 = FCN_V(tgMH_SET1_N)(VAR_K(KTgMIN) + 3);

    VEC_N_T(1)                          vRet;

    vRet = FCN_V(tgMH_ADD_N)( vP4, vP4 ); Test__Expect_EQ( true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vP8, vRet ) ) ); /* P P P */
    vRet = FCN_V(tgMH_ADD_N)( vP4, vX1 ); Test__Expect_EQ( true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vP4, vRet ) ) ); /* P P Z */
    vRet = FCN_V(tgMH_ADD_N)( vP8, vN4 ); Test__Expect_EQ( true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vP4, vRet ) ) ); /* P P N */
    vRet = FCN_V(tgMH_ADD_N)( vX1, vP4 ); Test__Expect_EQ( true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vP4, vRet ) ) ); /* P Z P */
    vRet = FCN_V(tgMH_ADD_N)( vN4, vP8 ); Test__Expect_EQ( true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vP4, vRet ) ) ); /* P N P */
    vRet = FCN_V(tgMH_ADD_N)( vY3, vN8 ); Test__Expect_EQ( true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vX4, vRet ) ) ); /* P N N */
    vRet = FCN_V(tgMH_ADD_N)( vP4, vN4 ); Test__Expect_EQ( true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vX1, vRet ) ) ); /* Z P N */
    vRet = FCN_V(tgMH_ADD_N)( vX1, vX1 ); Test__Expect_EQ( true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vX1, vRet ) ) ); /* Z Z Z */
    vRet = FCN_V(tgMH_ADD_N)( vN4, vP4 ); Test__Expect_EQ( true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vX1, vRet ) ) ); /* Z N P */
    vRet = FCN_V(tgMH_ADD_N)( vX4, vP8 ); Test__Expect_EQ( true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vY3, vRet ) ) ); /* N P P */
    vRet = FCN_V(tgMH_ADD_N)( vP4, vN8 ); Test__Expect_EQ( true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vN4, vRet ) ) ); /* N P N */
    vRet = FCN_V(tgMH_ADD_N)( vX1, vN4 ); Test__Expect_EQ( true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vN4, vRet ) ) ); /* N Z N */
    vRet = FCN_V(tgMH_ADD_N)( vN8, vP4 ); Test__Expect_EQ( true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vN4, vRet ) ) ); /* N N P */
    vRet = FCN_V(tgMH_ADD_N)( vN4, vX1 ); Test__Expect_EQ( true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vN4, vRet ) ) ); /* N N Z */
    vRet = FCN_V(tgMH_ADD_N)( vN4, vN4 ); Test__Expect_EQ( true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vN8, vRet ) ) ); /* N N N */

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_SUB_S_N) --------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_SUB_S_N) )
{
    VEC_N_T(1,C)                        vX1 = FCN_V(tgMH_SET1_N)((VAR_T())0);
    VEC_N_T(1,C)                        vP4 = FCN_V(tgMH_SET1_N)((VAR_T())4);
    VEC_N_T(1,C)                        vP8 = FCN_V(tgMH_SET1_N)((VAR_T())8);
    VEC_N_T(1,C)                        vY0 = FCN_V(tgMH_SET1_N)(VAR_K(KTgMIN));
    VEC_N_T(1,C)                        vY3 = FCN_V(tgMH_SET1_N)(VAR_K(KTgMIN) + 3);

    VEC_N_T(1)                          vRet;

    vRet = FCN_V(tgMH_SUB_S_N)( vP8, vP4 ); Test__Expect_EQ( true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vP4, vRet ) ) ); /* P P P */
    vRet = FCN_V(tgMH_SUB_S_N)( vP4, vX1 ); Test__Expect_EQ( true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vP4, vRet ) ) ); /* P P Z */
    vRet = FCN_V(tgMH_SUB_S_N)( vY0, vP4 ); Test__Expect_EQ( true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vY0, vRet ) ) ); /* P Z P */
    vRet = FCN_V(tgMH_SUB_S_N)( vY3, vP8 ); Test__Expect_EQ( true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vY0, vRet ) ) ); /* Z P N */

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_SUB_N) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_SUB_N) )
{
    VEC_N_T(1,C)                        vX1 = FCN_V(tgMH_SET1_N)((VAR_T())0);
    VEC_N_T(1,C)                        vP4 = FCN_V(tgMH_SET1_N)((VAR_T())4);
    VEC_N_T(1,C)                        vN4 = FCN_V(tgMH_SET1_N)((VAR_T())-4);
    VEC_N_T(1,C)                        vP8 = FCN_V(tgMH_SET1_N)((VAR_T())8);
    VEC_N_T(1,C)                        vN8 = FCN_V(tgMH_SET1_N)((VAR_T())-8);
    VEC_N_T(1,C)                        vX4 = FCN_V(tgMH_SET1_N)(VAR_K(KTgMAX) - 4);
    VEC_N_T(1,C)                        vY3 = FCN_V(tgMH_SET1_N)(VAR_K(KTgMIN) + 3);

    VEC_N_T(1)                          vRet;

    vRet = FCN_V(tgMH_SUB_N)( vP8, vP4 ); Test__Expect_EQ( true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vP4, vRet ) ) ); /* P P P */
    vRet = FCN_V(tgMH_SUB_N)( vP4, vX1 ); Test__Expect_EQ( true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vP4, vRet ) ) ); /* P P Z */
    vRet = FCN_V(tgMH_SUB_N)( vP4, vN4 ); Test__Expect_EQ( true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vP8, vRet ) ) ); /* P P N */
    vRet = FCN_V(tgMH_SUB_N)( vX1, vN4 ); Test__Expect_EQ( true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vP4, vRet ) ) ); /* P Z N */
    vRet = FCN_V(tgMH_SUB_N)( vY3, vP8 ); Test__Expect_EQ( true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vX4, vRet ) ) ); /* P N P */
    vRet = FCN_V(tgMH_SUB_N)( vN4, vN8 ); Test__Expect_EQ( true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vP4, vRet ) ) ); /* P N N */
    vRet = FCN_V(tgMH_SUB_N)( vP4, vP4 ); Test__Expect_EQ( true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vX1, vRet ) ) ); /* Z P P */
    vRet = FCN_V(tgMH_SUB_N)( vX1, vX1 ); Test__Expect_EQ( true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vX1, vRet ) ) ); /* Z Z Z */
    vRet = FCN_V(tgMH_SUB_N)( vN4, vN4 ); Test__Expect_EQ( true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vX1, vRet ) ) ); /* Z N N */
    vRet = FCN_V(tgMH_SUB_N)( vP4, vP8 ); Test__Expect_EQ( true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vN4, vRet ) ) ); /* N P P */
    vRet = FCN_V(tgMH_SUB_N)( vX4, vN8 ); Test__Expect_EQ( true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vY3, vRet ) ) ); /* N P N */
    vRet = FCN_V(tgMH_SUB_N)( vX1, vP4 ); Test__Expect_EQ( true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vN4, vRet ) ) ); /* N Z P */
    vRet = FCN_V(tgMH_SUB_N)( vN4, vP4 ); Test__Expect_EQ( true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vN8, vRet ) ) ); /* N N P */
    vRet = FCN_V(tgMH_SUB_N)( vN4, vX1 ); Test__Expect_EQ( true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vN4, vRet ) ) ); /* N N Z */
    vRet = FCN_V(tgMH_SUB_N)( vN8, vN4 ); Test__Expect_EQ( true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vN4, vRet ) ) ); /* N N N */

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_V_UT(tgMH_AVG_N) ----------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_V_UT(tgMH_AVG_N) )
{
    VEC_N_T(1,C)                        vX1 = FCN_V(tgMH_SET1_N)((VAR_T())0);
    VEC_N_T(1,C)                        vP4 = FCN_V(tgMH_SET1_N)((VAR_T())4);
    VEC_N_T(1,C)                        vP6 = FCN_V(tgMH_SET1_N)((VAR_T())6);
    VEC_N_T(1,C)                        vP8 = FCN_V(tgMH_SET1_N)((VAR_T())8);
    VEC_N_T(1,C)                        vX0 = FCN_V(tgMH_SET1_N)(VAR_K(KTgMAX));
    VEC_N_T(1,C)                        vX4 = FCN_V(tgMH_SET1_N)(VAR_K(KTgMAX) - 4);
    VEC_N_T(1,C)                        vY0 = FCN_V(tgMH_SET1_N)(VAR_K(KTgMIN));
    VEC_N_T(1,C)                        vY3 = FCN_V(tgMH_SET1_N)(VAR_K(KTgMIN) + 3);

    VEC_N_T(1)                          vRet;

    vRet = FCN_V(tgMH_AVG_N)( vX1, vX1 ); Test__Expect_EQ(true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vX1, vRet ) ));
    vRet = FCN_V(tgMH_AVG_N)( vP8, vX1 ); Test__Expect_EQ(true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vP4, vRet ) ));
    vRet = FCN_V(tgMH_AVG_N)( vP8, vP4 ); Test__Expect_EQ(true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vP6, vRet ) ));
    vRet = FCN_V(tgMH_AVG_N)( vX0, vX0 ); Test__Expect_EQ(true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vX0, vRet ) ));
    vRet = FCN_V(tgMH_AVG_N)( vX4, vX4 ); Test__Expect_EQ(true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vX4, vRet ) ));
    vRet = FCN_V(tgMH_AVG_N)( vY0, vY0 ); Test__Expect_EQ(true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vY0, vRet ) ));
    vRet = FCN_V(tgMH_AVG_N)( vY3, vY3 ); Test__Expect_EQ(true, FCN_V(tgMH_CMP_TO_BOOL_N)( FCN_V(tgMH_CMP_EQ_N)( vY3, vRet ) ));

    TEST_END_METHOD( KTgS_OK );
}
