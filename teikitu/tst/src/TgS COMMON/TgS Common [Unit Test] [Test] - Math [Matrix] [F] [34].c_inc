/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/*  »Project«   Teikitu Gaming System (TgS) (∂)
    »File«      TgS Common [Unit Test] [Test] - Math [Matrix] [F] [34].c_inc
    »Author«    Andrew Aye (mailto: andrew.aye@teikitu.com, https://www.andrew.aye.page)
    »Version«   5.16 / »GUID« 015482FC-A4BD-4E1C-AE49-A30E5728D73A */
/*  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
/*  Copyright: © 2002-2020, Andrew Aye.  All Rights Reserved.
    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation,
    either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
    the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the
    GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. */
/* =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */
/* == Common ===================================================================================================================================================================== */

/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */
/*  Test Functions                                                                                                                                                                 */
/* -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.- */

/* ---- FCN_M_UT(tgMH_TR) -------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_TR) )
{
    VEC_T(4)                            xM0;
    VEC_T(TEMPLATE__VECTOR_ROW)         xM1;
    TgSINT_F32                          iIndex, iRow, iCol;

    for (iIndex = 0; iIndex < TEMPLATE__VECTOR_ROW * TEMPLATE__VECTOR_DIM; ++iIndex)
    {
        while (0 == (xM1.m_aElement[iIndex] = FCN_F(tgCM_RAND)()));
    };

    FCN_M(tgMH_TR)( &xM0, &xM1 );

    for (iRow = 0; iRow < 3; ++iRow)
    {
        for (iCol = 0; iCol < 4; ++iCol)
        {
            Test__Expect_EQ( xM0.m_aRowCol[iCol][iRow], xM1.m_aRowCol[iRow][iCol] );
        };
    };
    for (iCol = 0; iCol < 4; ++iCol)
    {
        Test__Expect_EQ( xM0.m_aRowCol[iCol][3], VEC_K(KTgUNIT_W).m_aData[iCol] );
    };

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_LookLH) ---------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_LookLH) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;
    VEC_T(1)                            vFrom, vTo, vUp, vT;
    TgSINT_F32                          iIndex;

    for (iIndex = 0; iIndex < 3; ++iIndex)
    {
        while (0 == (vUp.m_aData[iIndex] = FCN_F(tgCM_RAND)()));
        while (0 == (vFrom.m_aData[iIndex] = FCN_F(tgCM_RAND)()));
        while (0 == (vTo.m_aData[iIndex] = FCN_F(tgCM_RAND)()));
    };

    vFrom.w = TYPE_K(1);
    vTo.w = TYPE_K(1);
    vUp.w = TYPE_K(0);

    vT = FCN_V(tgMH_SET1)( TYPE_K(0) );
    vT.x = vUp.x;
    vT.y = vUp.y;
    vT.z = vUp.z;
    FCN_V(tgMH_NORM)( &vT );

    FCN_M(tgMH_LookLH)( &xM0, &vFrom, &vTo, &vT );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_LookRH) ---------------------------------------------------------------------------------------------------------------------------------------------------- */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_LookRH) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;
    VEC_T(1)                            vFrom, vTo, vUp, vT;
    TgSINT_F32                          iIndex;

    for (iIndex = 0; iIndex < 3; ++iIndex)
    {
        while (0 == (vUp.m_aData[iIndex] = FCN_F(tgCM_RAND)()));
        while (0 == (vFrom.m_aData[iIndex] = FCN_F(tgCM_RAND)()));
        while (0 == (vTo.m_aData[iIndex] = FCN_F(tgCM_RAND)()));
    };

    vFrom.w = TYPE_K(1);
    vTo.w = TYPE_K(1);
    vUp.w = TYPE_K(0);

    vT = FCN_V(tgMH_SET1)( TYPE_K(0) );
    vT.x = vUp.x;
    vT.y = vUp.y;
    vT.z = vUp.z;
    FCN_V(tgMH_NORM)( &vT );

    FCN_M(tgMH_LookRH)( &xM0, &vFrom, &vTo, &vT );

    TEST_END_METHOD( KTgS_OK );
}


/* ---- FCN_M_UT(tgMH_Look) ------------------------------------------------------------------------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
TEST_METHOD( FCN_M_UT(tgMH_Look) )
{
    VEC_T(TEMPLATE__VECTOR_ROW)         xM0;
    VEC_T(1)                            vFrom, vTo, vUp, vT;
    TgSINT_F32                          iIndex;

    for (iIndex = 0; iIndex < 3; ++iIndex)
    {
        while (0 == (vUp.m_aData[iIndex] = FCN_F(tgCM_RAND)()));
        while (0 == (vFrom.m_aData[iIndex] = FCN_F(tgCM_RAND)()));
        while (0 == (vTo.m_aData[iIndex] = FCN_F(tgCM_RAND)()));
    };

    vFrom.w = TYPE_K(1);
    vTo.w = TYPE_K(1);
    vUp.w = TYPE_K(0);

    vT = FCN_V(tgMH_SET1)( TYPE_K(0) );
    vT.x = vUp.x;
    vT.y = vUp.y;
    vT.z = vUp.z;
    FCN_V(tgMH_NORM)( &vT );

    FCN_M(tgMH_Look)( &xM0, &vFrom, &vTo, &vT );

    TEST_END_METHOD( KTgS_OK );
}
